{"id":"fc70579a8903b91466356e3653355ff3","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when a role is granted.\n    /// @param role the granted role.\n    /// @param account the account granted with the role.\n    /// @param operator the initiator of the grant.\n    event RoleGranted(bytes32 role, address account, address operator);\n\n    /// @notice Emitted when a role is revoked or renounced.\n    /// @param role the revoked or renounced role.\n    /// @param account the account losing the role.\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\n    event RoleRevoked(bytes32 role, address account, address operator);\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if the sender does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is Context, IERC173 {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual override returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual override {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC-173 Contract Ownership Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {Bytes32} from \"./../../utils/libraries/Bytes32.sol\";\n\nlibrary AccessControlStorage {\n    using Bytes32 for bytes32;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    event RoleGranted(bytes32 role, address account, address operator);\n    event RoleRevoked(bytes32 role, address account, address operator);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(\n        Layout storage s,\n        bytes32 role,\n        address account,\n        address operator\n    ) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(\n        Layout storage s,\n        bytes32 role,\n        address account,\n        address operator\n    ) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(\n        Layout storage s,\n        address sender,\n        bytes32 role\n    ) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return whether `account` has `role`.\n    function hasRole(\n        Layout storage s,\n        bytes32 role,\n        address account\n    ) internal view returns (bool) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(\n        Layout storage s,\n        bytes32 role,\n        address account\n    ) internal view {\n        if (!s.hasRole(role, account)) {\n            revert(string(abi.encodePacked(\"AccessControl: missing '\", role.toASCIIString(), \"' role\")));\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(\n        Layout storage s,\n        address sender,\n        address newOwner\n    ) internal {\n        address previousOwner = s.contractOwner;\n        require(sender == previousOwner, \"Ownership: not the owner\");\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        require(account == s.contractOwner, \"Ownership: not the owner\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(\n        Layout storage s,\n        bytes4 interfaceId,\n        bool supported\n    ) internal {\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \"InterfaceDetection: wrong value\");\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _forwarderRegistry;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _forwarderRegistry = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _forwarderRegistry;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\n        return forwarder == address(_forwarderRegistry);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        require(currentVersion.value < phase, \"Storage: phase reached\");\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\ncontract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                accounts[i].sendValue(amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(\n        address[] calldata accounts,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts\n    ) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == tokens.length && length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(\n        address[] calldata accounts,\n        IERC721[] calldata contracts,\n        uint256[] calldata tokenIds\n    ) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == contracts.length && length == tokenIds.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n            }\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"./../interfaces/IERC20.sol\";\nimport {IERC20Allowance} from \"./../interfaces/IERC20Allowance.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC20Base is Context, IERC20, IERC20Allowance {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20\n    function approve(address spender, uint256 value) external virtual override returns (bool result) {\n        ERC20Storage.layout().approve(_msgSender(), spender, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transfer(address to, uint256 value) external virtual override returns (bool result) {\n        ERC20Storage.layout().transfer(_msgSender(), to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external virtual override returns (bool result) {\n        ERC20Storage.layout().transferFrom(_msgSender(), from, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Allowance\n    function increaseAllowance(address spender, uint256 addedValue) external virtual override returns (bool result) {\n        ERC20Storage.layout().increaseAllowance(_msgSender(), spender, addedValue);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Allowance\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual override returns (bool result) {\n        ERC20Storage.layout().decreaseAllowance(_msgSender(), spender, subtractedValue);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() external view override returns (uint256 supply) {\n        return ERC20Storage.layout().totalSupply();\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address owner) external view override returns (uint256 balance) {\n        return ERC20Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual override returns (uint256 value) {\n        return ERC20Storage.layout().allowance(owner, spender);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20BatchTransfers} from \"./../interfaces/IERC20BatchTransfers.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20BatchTransfersBase is Context, IERC20BatchTransfers {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20BatchTransfers\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external virtual override returns (bool) {\n        ERC20Storage.layout().batchTransfer(_msgSender(), recipients, values);\n        return true;\n    }\n\n    /// @inheritdoc IERC20BatchTransfers\n    function batchTransferFrom(\n        address from,\n        address[] calldata recipients,\n        uint256[] calldata values\n    ) external virtual override returns (bool) {\n        ERC20Storage.layout().batchTransferFrom(_msgSender(), from, recipients, values);\n        return true;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Burnable} from \"./../interfaces/IERC20Burnable.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20BurnableBase is Context, IERC20Burnable {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20Burnable\n    function burn(uint256 value) external virtual override returns (bool) {\n        ERC20Storage.layout().burn(_msgSender(), value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Burnable\n    function burnFrom(address from, uint256 value) external virtual override returns (bool) {\n        ERC20Storage.layout().burnFrom(_msgSender(), from, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Burnable\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external virtual override returns (bool) {\n        ERC20Storage.layout().batchBurnFrom(_msgSender(), owners, values);\n        return true;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Detailed} from \"./../interfaces/IERC20Detailed.sol\";\nimport {ERC20DetailedStorage} from \"./../libraries/ERC20DetailedStorage.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20DetailedBase is IERC20Detailed {\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    /// @inheritdoc IERC20Detailed\n    function name() external view override returns (string memory) {\n        return ERC20DetailedStorage.layout().name();\n    }\n\n    /// @inheritdoc IERC20Detailed\n    function symbol() external view override returns (string memory) {\n        return ERC20DetailedStorage.layout().symbol();\n    }\n\n    /// @inheritdoc IERC20Detailed\n    function decimals() external view override returns (uint8) {\n        return ERC20DetailedStorage.layout().decimals();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Metadata} from \"./../interfaces/IERC20Metadata.sol\";\nimport {ERC20MetadataStorage} from \"./../libraries/ERC20MetadataStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract ERC20MetadataBase is Context, IERC20Metadata {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Sets the token URI.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @param uri The token URI.\n    function setTokenURI(string calldata uri) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        ERC20MetadataStorage.layout().setTokenURI(uri);\n    }\n\n    /// @inheritdoc IERC20Metadata\n    function tokenURI() external view override returns (string memory) {\n        return ERC20MetadataStorage.layout().tokenURI();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Mintable} from \"./../interfaces/IERC20Mintable.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC20MintableBase is Context, IERC20Mintable {\n    using ERC20Storage for ERC20Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC20Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function mint(address to, uint256 value) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC20Storage.layout().mint(to, value);\n    }\n\n    /// @inheritdoc IERC20Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC20Storage.layout().batchMint(recipients, values);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Permit} from \"./../interfaces/IERC20Permit.sol\";\nimport {ERC20PermitStorage} from \"./../libraries/ERC20PermitStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires ERC20Detailed.\nabstract contract ERC20PermitBase is Context, IERC20Permit {\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\n\n    /// @inheritdoc IERC20Permit\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        ERC20PermitStorage.layout().permit(owner, spender, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc IERC20Permit\n    function nonces(address owner) external view override returns (uint256) {\n        return ERC20PermitStorage.layout().nonces(owner);\n    }\n\n    /// @inheritdoc IERC20Permit\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return ERC20PermitStorage.DOMAIN_SEPARATOR();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20SafeTransfers} from \"./../interfaces/IERC20SafeTransfers.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20SafeTransfersBase is Context, IERC20SafeTransfers {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20SafeTransfers\n    function safeTransfer(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external virtual override returns (bool) {\n        ERC20Storage.layout().safeTransfer(_msgSender(), to, value, data);\n        return true;\n    }\n\n    /// @inheritdoc IERC20SafeTransfers\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external virtual override returns (bool) {\n        ERC20Storage.layout().safeTransferFrom(_msgSender(), from, to, value, data);\n        return true;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20Base} from \"./base/ERC20Base.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20 is ERC20Base, InterfaceDetection {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    constructor() {\n        ERC20Storage.init();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20BatchTransfersBase} from \"./base/ERC20BatchTransfersBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20BatchTransfers is ERC20BatchTransfersBase {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    constructor() {\n        ERC20Storage.initERC20BatchTransfers();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20BurnableBase} from \"./base/ERC20BurnableBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Burnable is ERC20BurnableBase {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\n    constructor() {\n        ERC20Storage.initERC20Burnable();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20DetailedStorage} from \"./libraries/ERC20DetailedStorage.sol\";\nimport {ERC20DetailedBase} from \"./base/ERC20DetailedBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Detailed is ERC20DetailedBase {\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    /// @notice Initializes the storage with the token details.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals\n    ) {\n        ERC20DetailedStorage.layout().constructorInit(tokenName, tokenSymbol, tokenDecimals);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20MetadataStorage} from \"./libraries/ERC20MetadataStorage.sol\";\nimport {ERC20MetadataBase} from \"./base/ERC20MetadataBase.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Metadata is ERC20MetadataBase, ContractOwnership {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\n    constructor() {\n        ERC20MetadataStorage.init();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20MintableBase} from \"./base/ERC20MintableBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Mintable is ERC20MintableBase, AccessControl {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\n    constructor() {\n        ERC20Storage.initERC20Mintable();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Permit} from \"./interfaces/IERC20Permit.sol\";\nimport {ERC20PermitStorage} from \"./libraries/ERC20PermitStorage.sol\";\nimport {ERC20PermitBase} from \"./base/ERC20PermitBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Note: This contract requires ERC20Detailed.\nabstract contract ERC20Permit is ERC20PermitBase {\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\n    constructor() {\n        ERC20PermitStorage.init();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20SafeTransfersBase} from \"./base/ERC20SafeTransfersBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20SafeTransfers is ERC20SafeTransfersBase {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\n    constructor() {\n        ERC20Storage.initERC20SafeTransfers();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, basic interface.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\ninterface IERC20 {\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\n    /// @param from The account where the transferred tokens are withdrawn from.\n    /// @param to The account where the transferred tokens are deposited to.\n    /// @param value The amount of tokens being transferred.\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Emitted when an approval is set.\n    /// @param owner The account granting an allowance to `spender`.\n    /// @param spender The account being granted an allowance from `owner`.\n    /// @param value The allowance amount being granted.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Sets the allowance to an account from the sender.\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param spender The account being granted the allowance by the message caller.\n    /// @param value The allowance amount to grant.\n    /// @return result Whether the operation succeeded.\n    function approve(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transfer(address to, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool result);\n\n    /// @notice Gets the total token supply.\n    /// @return supply The total token supply.\n    function totalSupply() external view returns (uint256 supply);\n\n    /// @notice Gets an account balance.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(address owner, address spender) external view returns (uint256 value);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Allowance.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\ninterface IERC20Allowance {\n    /// @notice Increases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    /// @return result Whether the operation succeeded.\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Decreases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    /// @return result Whether the operation succeeded.\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\ninterface IERC20BatchTransfers {\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\n\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to be transferred.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransferFrom(\n        address from,\n        address[] calldata recipients,\n        uint256[] calldata values\n    ) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\ninterface IERC20Burnable {\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burn(uint256 value) external returns (bool result);\n\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burnFrom(address from, uint256 value) external returns (bool result);\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Reverts if `owners` and `values` have different lengths.\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Detailed.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\ninterface IERC20Detailed {\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name() external view returns (string memory tokenName);\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol() external view returns (string memory tokenSymbol);\n\n    /// @notice Gets the number of decimals used to display the balances.\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n    /// @return nbDecimals The number of decimals used to display the balances.\n    function decimals() external view returns (uint8 nbDecimals);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\ninterface IERC20Metadata {\n    /// @notice Gets the token metadata URI.\n    /// @return uri The token metadata URI.\n    function tokenURI() external view returns (string memory uri);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\ninterface IERC20Mintable {\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(address to, uint256 value) external;\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit – 712-signed approvals\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\ninterface IERC20Permit {\n    /// @notice Sets the allowance to an account from another account using a signed permit.\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\n    /// @dev Reverts if `owner` is the zero address.\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n    /// @dev Emits an {IERC20-Approval} event.\n    /// @param owner The token owner granting the allowance to `spender`.\n    /// @param spender The token spender being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    /// @param deadline The deadline from which the permit signature is no longer valid.\n    /// @param v Permit signature v parameter\n    /// @param r Permit signature r parameter.\n    /// @param s Permit signature s parameter.\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /// @notice Gets the current permit nonce of an account.\n    /// @param owner The account to check the nonce of.\n    /// @return nonce The current permit nonce of `owner`.\n    function nonces(address owner) external view returns (uint256 nonce);\n\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n    ///  keccak256(\n    ///      abi.encode(\n    ///          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n    ///          keccak256(bytes(name)),\n    ///          keccak256(bytes(version)),\n    ///          chainId,\n    ///          address(this)))\n    ///\n    ///  where\n    ///   - `name` (string) is the ERC-20 token name.\n    ///   - `version` (string) refers to the ERC-20 token contract version.\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\n    ///\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(\n        address operator,\n        address from,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\ninterface IERC20SafeTransfers {\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransfer(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Detailed} from \"./../interfaces/IERC20Detailed.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20DetailedStorage {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    struct Layout {\n        string tokenName;\n        string tokenSymbol;\n        uint8 tokenDecimals;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Detailed.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Detailed.phase\")) - 1);\n\n    /// @notice Initializes the storage with the token details (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    function constructorInit(\n        Layout storage s,\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals\n    ) internal {\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenDecimals = tokenDecimals;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with the token details (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    function proxyInit(\n        Layout storage s,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        uint8 tokenDecimals\n    ) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenDecimals = tokenDecimals;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\n    }\n\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name(Layout storage s) internal view returns (string memory tokenName) {\n        return s.tokenName;\n    }\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\n        return s.tokenSymbol;\n    }\n\n    /// @notice Gets the number of decimals used to display the balances.\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n    /// @return nbDecimals The number of decimals used to display the balances.\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\n        return s.tokenDecimals;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Metadata} from \"./../interfaces/IERC20Metadata.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20MetadataStorage {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n\n    struct Layout {\n        string uri;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Metadata.storage\")) - 1);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\n    }\n\n    /// @notice Sets the token URI.\n    /// @param uri The token URI.\n    function setTokenURI(Layout storage s, string calldata uri) internal {\n        s.uri = uri;\n    }\n\n    /// @notice Gets the token metadata URI.\n    /// @return uri The token metadata URI.\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\n        return s.uri;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Permit} from \"./../interfaces/IERC20Permit.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport {ERC20Storage} from \"./ERC20Storage.sol\";\nimport {ERC20DetailedStorage} from \"./ERC20DetailedStorage.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20PermitStorage {\n    using ERC20Storage for ERC20Storage.Layout;\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(address => uint256) accountNonces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Permit.storage\")) - 1);\n\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\n    }\n\n    /// @notice Sets the allowance to an account from another account using a signed permit.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n    /// @dev Emits an {IERC20-Approval} event.\n    /// @param owner The token owner granting the allowance to `spender`.\n    /// @param spender The token spender being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    /// @param deadline The deadline from which the permit signature is no longer valid.\n    /// @param v Permit signature v parameter\n    /// @param r Permit signature r parameter.\n    /// @param s Permit signature s parameter.\n    function permit(\n        Layout storage st,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        require(owner != address(0), \"ERC20: permit from address(0)\");\n        require(block.timestamp <= deadline, \"ERC20: expired permit\");\n        unchecked {\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\n            bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR(), hashStruct));\n            address signer = ecrecover(hash, v, r, s);\n            require(signer == owner, \"ERC20: invalid permit\");\n        }\n        ERC20Storage.layout().approve(owner, spender, value);\n    }\n\n    /// @notice Gets the current permit nonce of an account.\n    /// @param owner The account to check the nonce of.\n    /// @return nonce The current permit nonce of `owner`.\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\n        return s.accountNonces[owner];\n    }\n\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n    ///  keccak256(\n    ///      abi.encode(\n    ///          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n    ///          keccak256(bytes(name)),\n    ///          keccak256(bytes(version)),\n    ///          chainId,\n    ///          address(this)))\n    ///\n    ///  where\n    ///   - `name` (string) is the ERC-20 token name.\n    ///   - `version` (string) refers to the ERC-20 token contract version.\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\n    ///\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\n                    keccak256(\"1\"),\n                    chainId,\n                    address(this)\n                )\n            );\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"./../interfaces/IERC20.sol\";\nimport {IERC20Allowance} from \"./../interfaces/IERC20Allowance.sol\";\nimport {IERC20BatchTransfers} from \"./../interfaces/IERC20BatchTransfers.sol\";\nimport {IERC20SafeTransfers} from \"./../interfaces/IERC20SafeTransfers.sol\";\nimport {IERC20Mintable} from \"./../interfaces/IERC20Mintable.sol\";\nimport {IERC20Burnable} from \"./../interfaces/IERC20Burnable.sol\";\nimport {IERC20Receiver} from \"./../interfaces/IERC20Receiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20Storage {\n    using Address for address;\n    using ERC20Storage for ERC20Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n        uint256 supply;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20.storage\")) - 1);\n\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    function init() internal {\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    function initERC20BatchTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\n    function initERC20SafeTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\n    function initERC20Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\n    function initERC20Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets the allowance to an account by an owner.\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param owner The account to set the allowance from.\n    /// @param spender The account being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    function approve(\n        Layout storage s,\n        address owner,\n        address spender,\n        uint256 value\n    ) internal {\n        require(spender != address(0), \"ERC20: approval to address(0)\");\n        s.allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /// @notice Increases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account increasing the allowance.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    function increaseAllowance(\n        Layout storage s,\n        address owner,\n        address spender,\n        uint256 value\n    ) internal {\n        require(spender != address(0), \"ERC20: approval to address(0)\");\n        uint256 allowance_ = s.allowances[owner][spender];\n        if (value != 0) {\n            unchecked {\n                uint256 newAllowance = allowance_ + value;\n                require(newAllowance > allowance_, \"ERC20: allowance overflow\");\n                s.allowances[owner][spender] = newAllowance;\n                allowance_ = newAllowance;\n            }\n        }\n        emit Approval(owner, spender, allowance_);\n    }\n\n    /// @notice Decreases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account decreasing the allowance.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    function decreaseAllowance(\n        Layout storage s,\n        address owner,\n        address spender,\n        uint256 value\n    ) internal {\n        require(spender != address(0), \"ERC20: approval to address(0)\");\n        uint256 allowance_ = s.allowances[owner][spender];\n\n        if (allowance_ != type(uint256).max && value != 0) {\n            unchecked {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                uint256 newAllowance = allowance_ - value;\n                require(newAllowance < allowance_, \"ERC20: insufficient allowance\");\n                s.allowances[owner][spender] = newAllowance;\n                allowance_ = newAllowance;\n            }\n        }\n        emit Approval(owner, spender, allowance_);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient.\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transfer(\n        Layout storage s,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(to != address(0), \"ERC20: transfer to address(0)\");\n\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                require(newBalance < balance, \"ERC20: insufficient balance\");\n                if (from != to) {\n                    s.balances[from] = newBalance;\n                    s.balances[to] += value;\n                }\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\n    /// @param sender The message sender.\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transferFrom(\n        Layout storage s,\n        address sender,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.transfer(from, to, value);\n    }\n\n    //================================================= Batch Transfers ==================================================//\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransfer(\n        Layout storage s,\n        address from,\n        address[] calldata recipients,\n        uint256[] calldata values\n    ) internal {\n        uint256 length = recipients.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                require(to != address(0), \"ERC20: transfer to address(0)\");\n\n                uint256 value = values[i];\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    require(newTotalValue > totalValue, \"ERC20: values overflow\");\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        require(value <= balance, \"ERC20: insufficient balance\");\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n                emit Transfer(from, to, value);\n            }\n\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n                uint256 newBalance = balance - totalValue;\n                require(newBalance < balance, \"ERC20: insufficient balance\"); // balance must be sufficient, including self-transfers\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n            }\n        }\n    }\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransferFrom(\n        Layout storage s,\n        address sender,\n        address from,\n        address[] calldata recipients,\n        uint256[] calldata values\n    ) internal {\n        uint256 length = recipients.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                require(to != address(0), \"ERC20: transfer to address(0)\");\n\n                uint256 value = values[i];\n\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    require(newTotalValue > totalValue, \"ERC20: values overflow\");\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        require(value <= balance, \"ERC20: insufficient balance\");\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n\n                emit Transfer(from, to, value);\n            }\n\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n                uint256 newBalance = balance - totalValue;\n                require(newBalance < balance, \"ERC20: insufficient balance\"); // balance must be sufficient, including self-transfers\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n            }\n        }\n\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, totalValue);\n        }\n    }\n\n    //================================================= Safe Transfers ==================================================//\n\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransfer(\n        Layout storage s,\n        address from,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) internal {\n        s.transfer(from, to, value);\n        if (to.isContract()) {\n            _callOnERC20Received(from, from, to, value, data);\n        }\n    }\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransferFrom(\n        Layout storage s,\n        address sender,\n        address from,\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) internal {\n        s.transferFrom(sender, from, to, value);\n        if (to.isContract()) {\n            _callOnERC20Received(sender, from, to, value, data);\n        }\n    }\n\n    //================================================= Minting ==================================================//\n\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(\n        Layout storage s,\n        address to,\n        uint256 value\n    ) internal {\n        require(to != address(0), \"ERC20: mint to address(0)\");\n        if (value != 0) {\n            uint256 supply = s.supply;\n            unchecked {\n                uint256 newSupply = supply + value;\n                require(newSupply > supply, \"ERC20: supply overflow\");\n                s.supply = newSupply;\n                s.balances[to] += value; // balance cannot overflow if supply does not\n            }\n        }\n        emit Transfer(address(0), to, value);\n    }\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(\n        Layout storage s,\n        address[] memory recipients,\n        uint256[] memory values\n    ) internal {\n        uint256 length = recipients.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                require(to != address(0), \"ERC20: mint to address(0)\");\n\n                uint256 value = values[i];\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    require(newTotalValue > totalValue, \"ERC20: values overflow\");\n                    totalValue = newTotalValue;\n                    s.balances[to] += value; // balance cannot overflow if supply does not\n                }\n                emit Transfer(address(0), to, value);\n            }\n\n            if (totalValue != 0) {\n                uint256 supply = s.supply;\n                uint256 newSupply = supply + totalValue;\n                require(newSupply > supply, \"ERC20: supply overflow\");\n                s.supply = newSupply;\n            }\n        }\n    }\n\n    //================================================= Burning ==================================================//\n\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param from The account burning the tokens.\n    /// @param value The amount of tokens to burn.\n    function burn(\n        Layout storage s,\n        address from,\n        uint256 value\n    ) internal {\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                require(newBalance < balance, \"ERC20: insufficient balance\");\n                s.balances[from] = newBalance;\n                s.supply -= value; // will not underflow if balance does not\n            }\n        }\n\n        emit Transfer(from, address(0), value);\n    }\n\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    function burnFrom(\n        Layout storage s,\n        address sender,\n        address from,\n        uint256 value\n    ) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.burn(from, value);\n    }\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\n    /// @dev Reverts if `owners` and `values` have different lengths.\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\n    /// @param sender The message sender.\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    function batchBurnFrom(\n        Layout storage s,\n        address sender,\n        address[] calldata owners,\n        uint256[] calldata values\n    ) internal {\n        uint256 length = owners.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address from = owners[i];\n                uint256 value = values[i];\n\n                if (from != sender) {\n                    s.decreaseAllowance(from, sender, value);\n                }\n\n                if (value != 0) {\n                    uint256 balance = s.balances[from];\n                    uint256 newBalance = balance - value;\n                    require(newBalance < balance, \"ERC20: insufficient balance\");\n                    s.balances[from] = newBalance;\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\n                }\n\n                emit Transfer(from, address(0), value);\n            }\n\n            if (totalValue != 0) {\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\n            }\n        }\n    }\n\n    /// @notice Gets the total token supply.\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\n    /// @return supply The total token supply.\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\n        return s.supply;\n    }\n\n    /// @notice Gets an account balance.\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(\n        Layout storage s,\n        address owner,\n        address spender\n    ) internal view returns (uint256 value) {\n        return s.allowances[owner][spender];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param value The value transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC20Received(\n        address sender,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) private {\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \"ERC20: safe transfer rejected\");\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nlibrary Bytes32 {\n    /// @notice Converts bytes32 to base32 string.\n    /// @param value value to convert.\n    /// @return the converted base32 string.\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\n        unchecked {\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\n            uint256 i = uint256(value);\n            uint256 k = 52;\n            bytes memory bstr = new bytes(k);\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\n            i /= 8;\n            while (k > 0) {\n                bstr[--k] = base32Alphabet[i % 32];\n                i /= 32;\n            }\n            return string(bstr);\n        }\n    }\n\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\n    /// @param value value to convert.\n    /// @return the converted ASCII string.\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\n        unchecked {\n            if (value == 0x00) return \"\";\n            bytes memory bytesString = bytes(abi.encodePacked(value));\n            uint256 pos = 31;\n            while (true) {\n                if (bytesString[pos] != 0) break;\n                --pos;\n            }\n            bytes memory asciiString = new bytes(pos + 1);\n            for (uint256 i; i <= pos; ++i) {\n                asciiString[i] = bytesString[i];\n            }\n            return string(asciiString);\n        }\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/token/erc20/PRIMATEv2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Detailed} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol\";\nimport {ERC20Metadata} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol\";\nimport {ERC20Permit} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol\";\nimport {ERC20SafeTransfers} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol\";\nimport {ERC20BatchTransfers} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol\";\nimport {ERC20Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol\";\nimport {ERC20Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol\";\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n\ncontract PRIMATEv2 is\n    ERC20,\n    ERC20Detailed,\n    ERC20Metadata,\n    ERC20Mintable,\n    ERC20Burnable,\n    ERC20SafeTransfers,\n    ERC20BatchTransfers,\n    ERC20Permit,\n    ForwarderRegistryContext,\n    TokenRecovery\n{\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals,\n        IForwarderRegistry forwarderRegistry\n    )\n        ERC20()\n        ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n        ERC20Metadata()\n        ForwarderRegistryContext(forwarderRegistry)\n        ContractOwnership(msg.sender)\n    {}\n\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[11],"AccessControlBase":[182],"ContractOwnership":[44]},"id":12,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":12,"sourceUnit":183,"src":"57:63:0","symbolAliases":[{"foreign":{"id":2,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"65:17:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":12,"sourceUnit":45,"src":"121:58:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"129:17:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"AccessControlBase","nameLocations":["383:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":182,"src":"383:17:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"383:17:0"},{"baseName":{"id":9,"name":"ContractOwnership","nameLocations":["402:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"402:17:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"402:17:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"181:167:0","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":11,"linearizedBaseContracts":[11,44,713,725,232,255,182,5498],"name":"AccessControl","nameLocation":"366:13:0","nodeType":"ContractDefinition","nodes":[],"scope":12,"src":"348:76:0","usedErrors":[]}],"src":"32:393:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[44],"ContractOwnershipBase":[232],"ContractOwnershipStorage":[682],"InterfaceDetection":[713]},"id":45,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":13,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":15,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":683,"src":"57:82:1","symbolAliases":[{"foreign":{"id":14,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"65:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":17,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":233,"src":"140:71:1","symbolAliases":[{"foreign":{"id":16,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"148:21:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":19,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":714,"src":"212:77:1","symbolAliases":[{"foreign":{"id":18,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"220:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":21,"name":"ContractOwnershipBase","nameLocations":["548:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":232,"src":"548:21:1"},"id":22,"nodeType":"InheritanceSpecifier","src":"548:21:1"},{"baseName":{"id":23,"name":"InterfaceDetection","nameLocations":["571:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"571:18:1"},"id":24,"nodeType":"InheritanceSpecifier","src":"571:18:1"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":20,"nodeType":"StructuredDocumentation","src":"291:218:1","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":44,"linearizedBaseContracts":[44,713,725,232,255,5498],"name":"ContractOwnership","nameLocation":"527:17:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":28,"libraryName":{"id":25,"name":"ContractOwnershipStorage","nameLocations":["602:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"602:24:1"},"nodeType":"UsingForDirective","src":"596:67:1","typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"ContractOwnershipStorage.Layout","nameLocations":["631:24:1","656:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"631:31:1"},"referencedDeclaration":499,"src":"631:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":42,"nodeType":"Block","src":"997:80:1","statements":[{"expression":{"arguments":[{"id":39,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1057:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":34,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1007:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1032:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1007:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":38,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1041:15:1","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":575,"src":"1007:49:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":41,"nodeType":"ExpressionStatement","src":"1007:63:1"}]},"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"669:289:1","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":43,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"initialOwner","nameLocation":"983:12:1","nodeType":"VariableDeclaration","scope":43,"src":"975:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"975:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"974:22:1"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"997:0:1"},"scope":44,"src":"963:114:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":45,"src":"509:570:1","usedErrors":[]}],"src":"32:1048:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[182],"AccessControlStorage":[480],"Context":[5498],"ContractOwnershipStorage":[682]},"id":183,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":46,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":48,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":481,"src":"57:77:2","symbolAliases":[{"foreign":{"id":47,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"65:20:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":50,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":683,"src":"135:85:2","symbolAliases":[{"foreign":{"id":49,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"143:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":52,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":5499,"src":"221:66:2","symbolAliases":[{"foreign":{"id":51,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"229:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":54,"name":"Context","nameLocations":["554:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"554:7:2"},"id":55,"nodeType":"InheritanceSpecifier","src":"554:7:2"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":53,"nodeType":"StructuredDocumentation","src":"289:226:2","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":182,"linearizedBaseContracts":[182,5498],"name":"AccessControlBase","nameLocation":"533:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":59,"libraryName":{"id":56,"name":"AccessControlStorage","nameLocations":["574:20:2"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"574:20:2"},"nodeType":"UsingForDirective","src":"568:59:2","typeName":{"id":58,"nodeType":"UserDefinedTypeName","pathNode":{"id":57,"name":"AccessControlStorage.Layout","nameLocations":["599:20:2","620:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"599:27:2"},"referencedDeclaration":273,"src":"599:27:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":63,"libraryName":{"id":60,"name":"ContractOwnershipStorage","nameLocations":["638:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"638:24:2"},"nodeType":"UsingForDirective","src":"632:67:2","typeName":{"id":62,"nodeType":"UserDefinedTypeName","pathNode":{"id":61,"name":"ContractOwnershipStorage.Layout","nameLocations":["667:24:2","692:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"667:31:2"},"referencedDeclaration":499,"src":"667:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"anonymous":false,"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"705:191:2","text":"@notice Emitted when a role is granted.\n @param role the granted role.\n @param account the account granted with the role.\n @param operator the initiator of the grant."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":72,"name":"RoleGranted","nameLocation":"907:11:2","nodeType":"EventDefinition","parameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"927:4:2","nodeType":"VariableDeclaration","scope":72,"src":"919:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65,"name":"bytes32","nodeType":"ElementaryTypeName","src":"919:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":68,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"941:7:2","nodeType":"VariableDeclaration","scope":72,"src":"933:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"933:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":70,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"958:8:2","nodeType":"VariableDeclaration","scope":72,"src":"950:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"918:49:2"},"src":"901:67:2"},{"anonymous":false,"documentation":{"id":73,"nodeType":"StructuredDocumentation","src":"974:262:2","text":"@notice Emitted when a role is revoked or renounced.\n @param role the revoked or renounced role.\n @param account the account losing the role.\n @param operator the initiator of the revocation, or identical to `account` for a renouncement."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":81,"name":"RoleRevoked","nameLocation":"1247:11:2","nodeType":"EventDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":75,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"1267:4:2","nodeType":"VariableDeclaration","scope":81,"src":"1259:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":74,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1259:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":77,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1281:7:2","nodeType":"VariableDeclaration","scope":81,"src":"1273:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":76,"name":"address","nodeType":"ElementaryTypeName","src":"1273:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":79,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1298:8:2","nodeType":"VariableDeclaration","scope":81,"src":"1290:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"1290:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1258:49:2"},"src":"1241:67:2"},{"body":{"id":112,"nodeType":"Block","src":"1666:198:2","statements":[{"assignments":[90],"declarations":[{"constant":false,"id":90,"mutability":"mutable","name":"operator","nameLocation":"1684:8:2","nodeType":"VariableDeclaration","scope":112,"src":"1676:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":93,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":91,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1695:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1695:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1676:31:2"},{"expression":{"arguments":[{"id":99,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1774:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":94,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1717:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1742:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1717:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":98,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1751:22:2","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1717:56:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":101,"nodeType":"ExpressionStatement","src":"1717:66:2"},{"expression":{"arguments":[{"id":107,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1833:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":108,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"1839:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":109,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"1848:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":102,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1793:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1814:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1793:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":106,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1823:9:2","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":340,"src":"1793:39:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:64:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":111,"nodeType":"ExpressionStatement","src":"1793:64:2"}]},"documentation":{"id":82,"nodeType":"StructuredDocumentation","src":"1314:288:2","text":"@notice Grants a role to an account.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":113,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1616:9:2","nodeType":"FunctionDefinition","parameters":{"id":87,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"role","nameLocation":"1634:4:2","nodeType":"VariableDeclaration","scope":113,"src":"1626:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":83,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1626:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":86,"mutability":"mutable","name":"account","nameLocation":"1648:7:2","nodeType":"VariableDeclaration","scope":113,"src":"1640:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":85,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1625:31:2"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"1666:0:2"},"scope":182,"src":"1607:257:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":144,"nodeType":"Block","src":"2221:199:2","statements":[{"assignments":[122],"declarations":[{"constant":false,"id":122,"mutability":"mutable","name":"operator","nameLocation":"2239:8:2","nodeType":"VariableDeclaration","scope":144,"src":"2231:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"2231:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":125,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":123,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"2250:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2250:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2231:31:2"},{"expression":{"arguments":[{"id":131,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"2329:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":126,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"2272:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2297:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"2272:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2306:22:2","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"2272:56:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":133,"nodeType":"ExpressionStatement","src":"2272:66:2"},{"expression":{"arguments":[{"id":139,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2389:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":140,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"2395:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":141,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"2404:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":134,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2348:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2369:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"2348:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":138,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2378:10:2","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":377,"src":"2348:40:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"ExpressionStatement","src":"2348:65:2"}]},"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"1870:286:2","text":"@notice Revokes a role from an account.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":145,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2170:10:2","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"role","nameLocation":"2189:4:2","nodeType":"VariableDeclaration","scope":145,"src":"2181:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2181:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":118,"mutability":"mutable","name":"account","nameLocation":"2203:7:2","nodeType":"VariableDeclaration","scope":145,"src":"2195:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"2195:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2180:31:2"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"2221:0:2"},"scope":182,"src":"2161:259:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":161,"nodeType":"Block","src":"2660:79:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":156,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"2713:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2713:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":158,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"2727:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":151,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2670:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2691:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"2670:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2670:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2700:12:2","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":412,"src":"2670:42:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$273_storage_ptr_$_t_address_$_t_bytes32_$returns$__$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2670:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":160,"nodeType":"ExpressionStatement","src":"2670:62:2"}]},"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"2426:184:2","text":"@notice Renounces a role by the sender.\n @dev Reverts if the sender does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":162,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2624:12:2","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"role","nameLocation":"2645:4:2","nodeType":"VariableDeclaration","scope":162,"src":"2637:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":147,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2637:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2636:14:2"},"returnParameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"2660:0:2"},"scope":182,"src":"2615:124:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":180,"nodeType":"Block","src":"2991:76:2","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"3046:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"3052:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":172,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"3008:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3029:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"3008:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3008:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":175,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3038:7:2","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"3008:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3008:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":171,"id":179,"nodeType":"Return","src":"3001:59:2"}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"2745:164:2","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return whether `account` has `role`."},"functionSelector":"91d14854","id":181,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2923:7:2","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"role","nameLocation":"2939:4:2","nodeType":"VariableDeclaration","scope":181,"src":"2931:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2931:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"account","nameLocation":"2953:7:2","nodeType":"VariableDeclaration","scope":181,"src":"2945:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"2945:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2930:31:2"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":181,"src":"2985:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":169,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2984:6:2"},"scope":182,"src":"2914:153:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":183,"src":"515:2554:2","usedErrors":[]}],"src":"32:3038:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[5498],"ContractOwnershipBase":[232],"ContractOwnershipStorage":[682],"IERC173":[255]},"id":233,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":184,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":186,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":233,"sourceUnit":256,"src":"57:52:3","symbolAliases":[{"foreign":{"id":185,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"65:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":188,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":233,"sourceUnit":683,"src":"110:85:3","symbolAliases":[{"foreign":{"id":187,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"118:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":190,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":233,"sourceUnit":5499,"src":"196:66:3","symbolAliases":[{"foreign":{"id":189,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"204:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":192,"name":"Context","nameLocations":["585:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"585:7:3"},"id":193,"nodeType":"InheritanceSpecifier","src":"585:7:3"},{"baseName":{"id":194,"name":"IERC173","nameLocations":["594:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":255,"src":"594:7:3"},"id":195,"nodeType":"InheritanceSpecifier","src":"594:7:3"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"264:278:3","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":232,"linearizedBaseContracts":[232,255,5498],"name":"ContractOwnershipBase","nameLocation":"560:21:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":199,"libraryName":{"id":196,"name":"ContractOwnershipStorage","nameLocations":["614:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"614:24:3"},"nodeType":"UsingForDirective","src":"608:67:3","typeName":{"id":198,"nodeType":"UserDefinedTypeName","pathNode":{"id":197,"name":"ContractOwnershipStorage.Layout","nameLocations":["643:24:3","668:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"643:31:3"},"referencedDeclaration":499,"src":"643:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[254],"body":{"id":212,"nodeType":"Block","src":"773:65:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":206,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"790:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"815:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"790:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"824:5:3","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":651,"src":"790:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$returns$_t_address_$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":205,"id":211,"nodeType":"Return","src":"783:48:3"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"681:23:3","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":213,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"718:5:3","nodeType":"FunctionDefinition","overrides":{"id":202,"nodeType":"OverrideSpecifier","overrides":[],"src":"746:8:3"},"parameters":{"id":201,"nodeType":"ParameterList","parameters":[],"src":"723:2:3"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":213,"src":"764:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"763:9:3"},"scope":232,"src":"709:129:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[248],"body":{"id":230,"nodeType":"Block","src":"941:92:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":225,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1003:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1003:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":227,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"1017:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":220,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"951:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"976:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"951:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"985:17:3","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":638,"src":"951:51:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$499_storage_ptr_$_t_address_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":229,"nodeType":"ExpressionStatement","src":"951:75:3"}]},"documentation":{"id":214,"nodeType":"StructuredDocumentation","src":"844:23:3","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":231,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"881:17:3","nodeType":"FunctionDefinition","overrides":{"id":218,"nodeType":"OverrideSpecifier","overrides":[],"src":"932:8:3"},"parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"newOwner","nameLocation":"907:8:3","nodeType":"VariableDeclaration","scope":231,"src":"899:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:18:3"},"returnParameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"941:0:3"},"scope":232,"src":"872:161:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":233,"src":"542:493:3","usedErrors":[]}],"src":"32:1004:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[255]},"id":256,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":234,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":235,"nodeType":"StructuredDocumentation","src":"57:170:4","text":"@title ERC-173 Contract Ownership Standard\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":255,"linearizedBaseContracts":[255],"name":"IERC173","nameLocation":"237:7:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"251:162:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":242,"name":"OwnershipTransferred","nameLocation":"424:20:4","nodeType":"EventDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"461:13:4","nodeType":"VariableDeclaration","scope":242,"src":"445:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":237,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":240,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"492:8:4","nodeType":"VariableDeclaration","scope":242,"src":"476:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"476:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"444:57:4"},"src":"418:84:4"},{"documentation":{"id":243,"nodeType":"StructuredDocumentation","src":"508:342:4","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":248,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"864:17:4","nodeType":"FunctionDefinition","parameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"newOwner","nameLocation":"890:8:4","nodeType":"VariableDeclaration","scope":248,"src":"882:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":244,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"881:18:4"},"returnParameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"908:0:4"},"scope":255,"src":"855:54:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"915:116:4","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":254,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1045:5:4","nodeType":"FunctionDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[],"src":"1050:2:4"},"returnParameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"contractOwner","nameLocation":"1084:13:4","nodeType":"VariableDeclaration","scope":254,"src":"1076:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1075:23:4"},"scope":255,"src":"1036:63:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":256,"src":"227:874:4","usedErrors":[]}],"src":"32:1070:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[480],"Bytes32":[4748]},"id":481,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":257,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:5"},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol","file":"./../../utils/libraries/Bytes32.sol","id":259,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":481,"sourceUnit":4749,"src":"57:60:5","symbolAliases":[{"foreign":{"id":258,"name":"Bytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"65:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":480,"linearizedBaseContracts":[480],"name":"AccessControlStorage","nameLocation":"127:20:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":262,"libraryName":{"id":260,"name":"Bytes32","nameLocations":["160:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":4748,"src":"160:7:5"},"nodeType":"UsingForDirective","src":"154:26:5","typeName":{"id":261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"172:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"global":false,"id":266,"libraryName":{"id":263,"name":"AccessControlStorage","nameLocations":["191:20:5"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"191:20:5"},"nodeType":"UsingForDirective","src":"185:59:5","typeName":{"id":265,"nodeType":"UserDefinedTypeName","pathNode":{"id":264,"name":"AccessControlStorage.Layout","nameLocations":["216:20:5","237:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"216:27:5"},"referencedDeclaration":273,"src":"216:27:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":273,"members":[{"constant":false,"id":272,"mutability":"mutable","name":"roles","nameLocation":"319:5:5","nodeType":"VariableDeclaration","scope":273,"src":"274:50:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":271,"keyType":{"id":267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"282:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"274:44:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueType":{"id":270,"keyType":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"293:24:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":269,"name":"bool","nodeType":"ElementaryTypeName","src":"312:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"257:6:5","nodeType":"StructDefinition","scope":480,"src":"250:81:5","visibility":"public"},{"constant":true,"id":286,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"363:19:5","nodeType":"VariableDeclaration","scope":480,"src":"337:124:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"337:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"411:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":279,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"401:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"401:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"393:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"393:7:5","typeDescriptions":{}}},"id":282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"393:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"459:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"393:67:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"385:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"385:7:5","typeDescriptions":{}}},"id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"385:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":294,"name":"RoleGranted","nameLocation":"474:11:5","nodeType":"EventDefinition","parameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"494:4:5","nodeType":"VariableDeclaration","scope":294,"src":"486:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"486:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":290,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"508:7:5","nodeType":"VariableDeclaration","scope":294,"src":"500:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"500:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":292,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"525:8:5","nodeType":"VariableDeclaration","scope":294,"src":"517:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"517:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"485:49:5"},"src":"468:67:5"},{"anonymous":false,"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":302,"name":"RoleRevoked","nameLocation":"546:11:5","nodeType":"EventDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"566:4:5","nodeType":"VariableDeclaration","scope":302,"src":"558:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"558:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":298,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"580:7:5","nodeType":"VariableDeclaration","scope":302,"src":"572:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"572:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":300,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"597:8:5","nodeType":"VariableDeclaration","scope":302,"src":"589:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"589:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"557:49:5"},"src":"540:67:5"},{"body":{"id":339,"nodeType":"Block","src":"1120:156:5","statements":[{"condition":{"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1134:25:5","subExpression":{"arguments":[{"id":317,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1145:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":318,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1151:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":315,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1135:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1137:7:5","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"1135:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1135:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":338,"nodeType":"IfStatement","src":"1130:140:5","trueBody":{"id":337,"nodeType":"Block","src":"1161:109:5","statements":[{"expression":{"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":321,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1175:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":325,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1177:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"1175:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":326,"indexExpression":{"id":323,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1183:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1175:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":327,"indexExpression":{"id":324,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1189:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1175:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1200:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1175:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":330,"nodeType":"ExpressionStatement","src":"1175:29:5"},{"eventCall":{"arguments":[{"id":332,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1235:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":333,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1241:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":334,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"1250:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":331,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"1223:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1223:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":336,"nodeType":"EmitStatement","src":"1218:41:5"}]}}]},"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"613:369:5","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":340,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"996:9:5","nodeType":"FunctionDefinition","parameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"mutability":"mutable","name":"s","nameLocation":"1030:1:5","nodeType":"VariableDeclaration","scope":340,"src":"1015:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":305,"nodeType":"UserDefinedTypeName","pathNode":{"id":304,"name":"Layout","nameLocations":["1015:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"1015:6:5"},"referencedDeclaration":273,"src":"1015:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":308,"mutability":"mutable","name":"role","nameLocation":"1049:4:5","nodeType":"VariableDeclaration","scope":340,"src":"1041:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1041:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":310,"mutability":"mutable","name":"account","nameLocation":"1071:7:5","nodeType":"VariableDeclaration","scope":340,"src":"1063:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"1063:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":312,"mutability":"mutable","name":"operator","nameLocation":"1096:8:5","nodeType":"VariableDeclaration","scope":340,"src":"1088:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":311,"name":"address","nodeType":"ElementaryTypeName","src":"1088:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1005:105:5"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"1120:0:5"},"scope":480,"src":"987:289:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":376,"nodeType":"Block","src":"1788:156:5","statements":[{"condition":{"arguments":[{"id":355,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"1812:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"1818:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":353,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"1802:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":354,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1804:7:5","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"1802:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1802:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":375,"nodeType":"IfStatement","src":"1798:140:5","trueBody":{"id":374,"nodeType":"Block","src":"1828:110:5","statements":[{"expression":{"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":358,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"1842:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":362,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1844:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"1842:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":363,"indexExpression":{"id":360,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"1850:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1842:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":364,"indexExpression":{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"1856:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1842:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1867:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1842:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":367,"nodeType":"ExpressionStatement","src":"1842:30:5"},{"eventCall":{"arguments":[{"id":369,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"1903:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":370,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"1909:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":371,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"1918:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":368,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"1891:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1891:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":373,"nodeType":"EmitStatement","src":"1886:41:5"}]}}]},"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"1282:367:5","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":377,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1663:10:5","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"s","nameLocation":"1698:1:5","nodeType":"VariableDeclaration","scope":377,"src":"1683:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":343,"nodeType":"UserDefinedTypeName","pathNode":{"id":342,"name":"Layout","nameLocations":["1683:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"1683:6:5"},"referencedDeclaration":273,"src":"1683:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"role","nameLocation":"1717:4:5","nodeType":"VariableDeclaration","scope":377,"src":"1709:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1709:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"account","nameLocation":"1739:7:5","nodeType":"VariableDeclaration","scope":377,"src":"1731:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"1731:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"operator","nameLocation":"1764:8:5","nodeType":"VariableDeclaration","scope":377,"src":"1756:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1756:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1673:105:5"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[],"src":"1788:0:5"},"scope":480,"src":"1654:290:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":411,"nodeType":"Block","src":"2288:134:5","statements":[{"expression":{"arguments":[{"id":391,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"2315:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":392,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2321:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":388,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2298:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":390,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2300:14:5","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":467,"src":"2298:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":394,"nodeType":"ExpressionStatement","src":"2298:30:5"},{"expression":{"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":395,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2338:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":399,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2340:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"2338:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":400,"indexExpression":{"id":397,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"2346:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2338:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":401,"indexExpression":{"id":398,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2352:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2338:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2362:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2338:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":404,"nodeType":"ExpressionStatement","src":"2338:29:5"},{"eventCall":{"arguments":[{"id":406,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"2394:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":407,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2400:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":408,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"2408:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":405,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"2382:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":410,"nodeType":"EmitStatement","src":"2377:38:5"}]},"documentation":{"id":378,"nodeType":"StructuredDocumentation","src":"1950:224:5","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":412,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2188:12:5","nodeType":"FunctionDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"s","nameLocation":"2225:1:5","nodeType":"VariableDeclaration","scope":412,"src":"2210:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":380,"nodeType":"UserDefinedTypeName","pathNode":{"id":379,"name":"Layout","nameLocations":["2210:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"2210:6:5"},"referencedDeclaration":273,"src":"2210:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"sender","nameLocation":"2244:6:5","nodeType":"VariableDeclaration","scope":412,"src":"2236:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"2236:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"role","nameLocation":"2268:4:5","nodeType":"VariableDeclaration","scope":412,"src":"2260:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2200:78:5"},"returnParameters":{"id":387,"nodeType":"ParameterList","parameters":[],"src":"2288:0:5"},"scope":480,"src":"2179:243:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":432,"nodeType":"Block","src":"2722:46:5","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":425,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"2739:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2741:5:5","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":272,"src":"2739:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":428,"indexExpression":{"id":427,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"2747:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2739:13:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":430,"indexExpression":{"id":429,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"2753:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2739:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":424,"id":431,"nodeType":"Return","src":"2732:29:5"}]},"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"2428:164:5","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return whether `account` has `role`."},"id":433,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2606:7:5","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"s","nameLocation":"2638:1:5","nodeType":"VariableDeclaration","scope":433,"src":"2623:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":415,"nodeType":"UserDefinedTypeName","pathNode":{"id":414,"name":"Layout","nameLocations":["2623:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"2623:6:5"},"referencedDeclaration":273,"src":"2623:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"role","nameLocation":"2657:4:5","nodeType":"VariableDeclaration","scope":433,"src":"2649:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2649:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"account","nameLocation":"2679:7:5","nodeType":"VariableDeclaration","scope":433,"src":"2671:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"2671:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2613:79:5"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":433,"src":"2716:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":422,"name":"bool","nodeType":"ElementaryTypeName","src":"2716:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2715:6:5"},"scope":480,"src":"2597:171:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":466,"nodeType":"Block","src":"3065:164:5","statements":[{"condition":{"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3079:25:5","subExpression":{"arguments":[{"id":446,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3090:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":447,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"3096:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":444,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"3080:1:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3082:7:5","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":433,"src":"3080:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":465,"nodeType":"IfStatement","src":"3075:148:5","trueBody":{"id":464,"nodeType":"Block","src":"3106:117:5","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206d697373696e672027","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3151:26:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a","typeString":"literal_string \"AccessControl: missing '\""},"value":"AccessControl: missing '"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":456,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3179:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:5","memberName":"toASCIIString","nodeType":"MemberAccess","referencedDeclaration":4747,"src":"3179:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_string_memory_ptr_$bound_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (string memory)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3179:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2720726f6c65","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3201:8:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223","typeString":"literal_string \"' role\""},"value":"' role"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a","typeString":"literal_string \"AccessControl: missing '\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223","typeString":"literal_string \"' role\""}],"expression":{"id":453,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3134:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3138:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"3134:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3134:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3127:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":451,"name":"string","nodeType":"ElementaryTypeName","src":"3127:6:5","typeDescriptions":{}}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3127:84:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":450,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3120:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3120:92:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":463,"nodeType":"ExpressionStatement","src":"3120:92:5"}]}}]},"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"2774:169:5","text":"@notice Ensures that an account has a role.\n @dev Reverts if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":467,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"2957:14:5","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"s","nameLocation":"2996:1:5","nodeType":"VariableDeclaration","scope":467,"src":"2981:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":436,"nodeType":"UserDefinedTypeName","pathNode":{"id":435,"name":"Layout","nameLocations":["2981:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"2981:6:5"},"referencedDeclaration":273,"src":"2981:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"role","nameLocation":"3015:4:5","nodeType":"VariableDeclaration","scope":467,"src":"3007:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3007:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"account","nameLocation":"3037:7:5","nodeType":"VariableDeclaration","scope":467,"src":"3029:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":440,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2971:79:5"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[],"src":"3065:0:5"},"scope":480,"src":"2948:281:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":478,"nodeType":"Block","src":"3294:115:5","statements":[{"assignments":[474],"declarations":[{"constant":false,"id":474,"mutability":"mutable","name":"position","nameLocation":"3312:8:5","nodeType":"VariableDeclaration","scope":478,"src":"3304:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3304:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":476,"initialValue":{"id":475,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"3323:19:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3304:38:5"},{"AST":{"nodeType":"YulBlock","src":"3361:42:5","statements":[{"nodeType":"YulAssignment","src":"3375:18:5","value":{"name":"position","nodeType":"YulIdentifier","src":"3385:8:5"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3375:6:5"}]}]},"evmVersion":"london","externalReferences":[{"declaration":474,"isOffset":false,"isSlot":false,"src":"3385:8:5","valueSize":1},{"declaration":471,"isOffset":false,"isSlot":true,"src":"3375:6:5","suffix":"slot","valueSize":1}],"id":477,"nodeType":"InlineAssembly","src":"3352:51:5"}]},"id":479,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3244:6:5","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"3250:2:5"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"s","nameLocation":"3291:1:5","nodeType":"VariableDeclaration","scope":479,"src":"3276:16:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":470,"nodeType":"UserDefinedTypeName","pathNode":{"id":469,"name":"Layout","nameLocations":["3276:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"3276:6:5"},"referencedDeclaration":273,"src":"3276:6:5","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"3275:18:5"},"scope":480,"src":"3235:174:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":481,"src":"119:3292:5","usedErrors":[]}],"src":"32:3380:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"ContractOwnershipStorage":[682],"IERC173":[255],"InterfaceDetectionStorage":[824],"ProxyInitialization":[1088]},"id":683,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":482,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":484,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":683,"sourceUnit":256,"src":"57:52:6","symbolAliases":[{"foreign":{"id":483,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"65:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":486,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":683,"sourceUnit":1089,"src":"110:84:6","symbolAliases":[{"foreign":{"id":485,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"118:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":488,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":683,"sourceUnit":825,"src":"195:104:6","symbolAliases":[{"foreign":{"id":487,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"203:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":682,"linearizedBaseContracts":[682],"name":"ContractOwnershipStorage","nameLocation":"309:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":492,"libraryName":{"id":489,"name":"ContractOwnershipStorage","nameLocations":["346:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"346:24:6"},"nodeType":"UsingForDirective","src":"340:67:6","typeName":{"id":491,"nodeType":"UserDefinedTypeName","pathNode":{"id":490,"name":"ContractOwnershipStorage.Layout","nameLocations":["375:24:6","400:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"375:31:6"},"referencedDeclaration":499,"src":"375:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":496,"libraryName":{"id":493,"name":"InterfaceDetectionStorage","nameLocations":["418:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"418:25:6"},"nodeType":"UsingForDirective","src":"412:69:6","typeName":{"id":495,"nodeType":"UserDefinedTypeName","pathNode":{"id":494,"name":"InterfaceDetectionStorage.Layout","nameLocations":["448:25:6","474:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"448:32:6"},"referencedDeclaration":734,"src":"448:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":499,"members":[{"constant":false,"id":498,"mutability":"mutable","name":"contractOwner","nameLocation":"519:13:6","nodeType":"VariableDeclaration","scope":499,"src":"511:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":497,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"494:6:6","nodeType":"StructDefinition","scope":682,"src":"487:52:6","visibility":"public"},{"constant":true,"id":512,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"571:19:6","nodeType":"VariableDeclaration","scope":682,"src":"545:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"619:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":505,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"609:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"609:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"601:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":503,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:6","typeDescriptions":{}}},"id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"601:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"671:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"601:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"593:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:6","typeDescriptions":{}}},"id":511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"593:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":525,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"705:21:6","nodeType":"VariableDeclaration","scope":682,"src":"679:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":513,"name":"bytes32","nodeType":"ElementaryTypeName","src":"679:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"755:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":518,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"745:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"745:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"737:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"737:7:6","typeDescriptions":{}}},"id":521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"737:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"737:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"729:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"729:7:6","typeDescriptions":{}}},"id":524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"729:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":531,"name":"OwnershipTransferred","nameLocation":"820:20:6","nodeType":"EventDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"857:13:6","nodeType":"VariableDeclaration","scope":531,"src":"841:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"841:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":529,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"888:8:6","nodeType":"VariableDeclaration","scope":531,"src":"872:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"840:57:6"},"src":"814:84:6"},{"body":{"id":574,"nodeType":"Block","src":"1406:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":540,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1420:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1444:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1436:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"1436:7:6","typeDescriptions":{}}},"id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1436:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1420:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":561,"nodeType":"IfStatement","src":"1416:152:6","trueBody":{"id":560,"nodeType":"Block","src":"1448:120:6","statements":[{"expression":{"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":546,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"1462:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1464:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"1462:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":549,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1480:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1462:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":551,"nodeType":"ExpressionStatement","src":"1462:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1540:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1532:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:6","typeDescriptions":{}}},"id":556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":557,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1544:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":552,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"1511:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":559,"nodeType":"EmitStatement","src":"1506:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":568,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"1639:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$255_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$255_$","typeString":"type(contract IERC173)"}],"id":567,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1634:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$255","typeString":"type(contract IERC173)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1648:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1634:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1661:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":562,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1577:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"1577:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":566,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1612:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"1577:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":573,"nodeType":"ExpressionStatement","src":"1577:89:6"}]},"documentation":{"id":532,"nodeType":"StructuredDocumentation","src":"904:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":575,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1341:15:6","nodeType":"FunctionDefinition","parameters":{"id":538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"s","nameLocation":"1372:1:6","nodeType":"VariableDeclaration","scope":575,"src":"1357:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":534,"nodeType":"UserDefinedTypeName","pathNode":{"id":533,"name":"Layout","nameLocations":["1357:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"1357:6:6"},"referencedDeclaration":499,"src":"1357:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":537,"mutability":"mutable","name":"initialOwner","nameLocation":"1383:12:6","nodeType":"VariableDeclaration","scope":575,"src":"1375:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1356:40:6"},"returnParameters":{"id":539,"nodeType":"ParameterList","parameters":[],"src":"1406:0:6"},"scope":682,"src":"1332:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":597,"nodeType":"Block","src":"2297:112:6","statements":[{"expression":{"arguments":[{"id":587,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2336:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":584,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"2307:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1088_$","typeString":"type(library ProxyInitialization)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2327:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1087,"src":"2307:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2307:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":590,"nodeType":"ExpressionStatement","src":"2307:54:6"},{"expression":{"arguments":[{"id":594,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"2389:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":591,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"2371:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":593,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2373:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":575,"src":"2371:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":596,"nodeType":"ExpressionStatement","src":"2371:31:6"}]},"documentation":{"id":576,"nodeType":"StructuredDocumentation","src":"1679:545:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":598,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2238:9:6","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"s","nameLocation":"2263:1:6","nodeType":"VariableDeclaration","scope":598,"src":"2248:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":578,"nodeType":"UserDefinedTypeName","pathNode":{"id":577,"name":"Layout","nameLocations":["2248:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"2248:6:6"},"referencedDeclaration":499,"src":"2248:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"initialOwner","nameLocation":"2274:12:6","nodeType":"VariableDeclaration","scope":598,"src":"2266:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:40:6"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[],"src":"2297:0:6"},"scope":682,"src":"2229:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":637,"nodeType":"Block","src":"2878:281:6","statements":[{"assignments":[610],"declarations":[{"constant":false,"id":610,"mutability":"mutable","name":"previousOwner","nameLocation":"2896:13:6","nodeType":"VariableDeclaration","scope":637,"src":"2888:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"2888:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":613,"initialValue":{"expression":{"id":611,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"2912:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2914:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"2912:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2888:39:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":615,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2945:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":616,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2955:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2945:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2970:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2937:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2937:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":620,"nodeType":"ExpressionStatement","src":"2937:60:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":621,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"3011:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":622,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3028:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3011:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":636,"nodeType":"IfStatement","src":"3007:146:6","trueBody":{"id":635,"nodeType":"Block","src":"3038:115:6","statements":[{"expression":{"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":624,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"3052:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":626,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3054:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"3052:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":627,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3070:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3052:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":629,"nodeType":"ExpressionStatement","src":"3052:26:6"},{"eventCall":{"arguments":[{"id":631,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"3118:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":632,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3133:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":630,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"3097:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3097:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"EmitStatement","src":"3092:50:6"}]}}]},"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"2415:340:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":638,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2769:17:6","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"s","nameLocation":"2811:1:6","nodeType":"VariableDeclaration","scope":638,"src":"2796:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":601,"nodeType":"UserDefinedTypeName","pathNode":{"id":600,"name":"Layout","nameLocations":["2796:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"2796:6:6"},"referencedDeclaration":499,"src":"2796:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"sender","nameLocation":"2830:6:6","nodeType":"VariableDeclaration","scope":638,"src":"2822:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":603,"name":"address","nodeType":"ElementaryTypeName","src":"2822:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"newOwner","nameLocation":"2854:8:6","nodeType":"VariableDeclaration","scope":638,"src":"2846:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"2846:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2786:82:6"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[],"src":"2878:0:6"},"scope":682,"src":"2760:399:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":650,"nodeType":"Block","src":"3365:39:6","statements":[{"expression":{"expression":{"id":647,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"3382:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3384:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"3382:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":646,"id":649,"nodeType":"Return","src":"3375:22:6"}]},"documentation":{"id":639,"nodeType":"StructuredDocumentation","src":"3165:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":651,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3295:5:6","nodeType":"FunctionDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"s","nameLocation":"3316:1:6","nodeType":"VariableDeclaration","scope":651,"src":"3301:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":641,"nodeType":"UserDefinedTypeName","pathNode":{"id":640,"name":"Layout","nameLocations":["3301:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"3301:6:6"},"referencedDeclaration":499,"src":"3301:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3300:18:6"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"contractOwner","nameLocation":"3350:13:6","nodeType":"VariableDeclaration","scope":651,"src":"3342:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"3342:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3341:23:6"},"scope":682,"src":"3286:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"3651:80:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":661,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"3669:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":662,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"3680:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3682:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":498,"src":"3680:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3669:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3697:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":660,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3661:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3661:63:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"3661:63:6"}]},"documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"3410:155:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts if `account` is not the contract owner.\n @param account The account."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"3579:22:6","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"s","nameLocation":"3617:1:6","nodeType":"VariableDeclaration","scope":669,"src":"3602:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":654,"nodeType":"UserDefinedTypeName","pathNode":{"id":653,"name":"Layout","nameLocations":["3602:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"3602:6:6"},"referencedDeclaration":499,"src":"3602:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"account","nameLocation":"3628:7:6","nodeType":"VariableDeclaration","scope":669,"src":"3620:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"3620:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3601:35:6"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"3651:0:6"},"scope":682,"src":"3570:161:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":680,"nodeType":"Block","src":"3796:115:6","statements":[{"assignments":[676],"declarations":[{"constant":false,"id":676,"mutability":"mutable","name":"position","nameLocation":"3814:8:6","nodeType":"VariableDeclaration","scope":680,"src":"3806:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3806:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":678,"initialValue":{"id":677,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"3825:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3806:38:6"},{"AST":{"nodeType":"YulBlock","src":"3863:42:6","statements":[{"nodeType":"YulAssignment","src":"3877:18:6","value":{"name":"position","nodeType":"YulIdentifier","src":"3887:8:6"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3877:6:6"}]}]},"evmVersion":"london","externalReferences":[{"declaration":676,"isOffset":false,"isSlot":false,"src":"3887:8:6","valueSize":1},{"declaration":673,"isOffset":false,"isSlot":true,"src":"3877:6:6","suffix":"slot","valueSize":1}],"id":679,"nodeType":"InlineAssembly","src":"3854:51:6"}]},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3746:6:6","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[],"src":"3752:2:6"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"s","nameLocation":"3793:1:6","nodeType":"VariableDeclaration","scope":681,"src":"3778:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":672,"nodeType":"UserDefinedTypeName","pathNode":{"id":671,"name":"Layout","nameLocations":["3778:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"3778:6:6"},"referencedDeclaration":499,"src":"3778:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3777:18:6"},"scope":682,"src":"3737:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":683,"src":"301:3612:6","usedErrors":[]}],"src":"32:3882:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[725],"InterfaceDetection":[713],"InterfaceDetectionStorage":[824]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":684,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":686,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":714,"sourceUnit":726,"src":"57:49:7","symbolAliases":[{"foreign":{"id":685,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"65:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":714,"sourceUnit":825,"src":"107:84:7","symbolAliases":[{"foreign":{"id":687,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"115:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":690,"name":"IERC165","nameLocations":["424:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":725,"src":"424:7:7"},"id":691,"nodeType":"InheritanceSpecifier","src":"424:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"193:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":713,"linearizedBaseContracts":[713,725],"name":"InterfaceDetection","nameLocation":"402:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":695,"libraryName":{"id":692,"name":"InterfaceDetectionStorage","nameLocations":["444:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"444:25:7"},"nodeType":"UsingForDirective","src":"438:69:7","typeName":{"id":694,"nodeType":"UserDefinedTypeName","pathNode":{"id":693,"name":"InterfaceDetectionStorage.Layout","nameLocations":["474:25:7","500:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"474:32:7"},"referencedDeclaration":734,"src":"474:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[724],"body":{"id":711,"nodeType":"Block","src":"626:89:7","statements":[{"expression":{"arguments":[{"id":708,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"696:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":704,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"643:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"669:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"643:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"678:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":811,"src":"643:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$returns$_t_bool_$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":703,"id":710,"nodeType":"Return","src":"636:72:7"}]},"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"513:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":712,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"550:17:7","nodeType":"FunctionDefinition","overrides":{"id":700,"nodeType":"OverrideSpecifier","overrides":[],"src":"602:8:7"},"parameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"interfaceId","nameLocation":"575:11:7","nodeType":"VariableDeclaration","scope":712,"src":"568:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":697,"name":"bytes4","nodeType":"ElementaryTypeName","src":"568:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"567:20:7"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"620:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":701,"name":"bool","nodeType":"ElementaryTypeName","src":"620:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"619:6:7"},"scope":713,"src":"541:174:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":714,"src":"384:333:7","usedErrors":[]}],"src":"32:686:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[725]},"id":726,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"57:173:8","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":725,"linearizedBaseContracts":[725],"name":"IERC165","nameLocation":"240:7:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"254:340:8","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":724,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"608:17:8","nodeType":"FunctionDefinition","parameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"interfaceId","nameLocation":"633:11:8","nodeType":"VariableDeclaration","scope":724,"src":"626:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":718,"name":"bytes4","nodeType":"ElementaryTypeName","src":"626:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"625:20:8"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"supported","nameLocation":"674:9:8","nodeType":"VariableDeclaration","scope":724,"src":"669:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":721,"name":"bool","nodeType":"ElementaryTypeName","src":"669:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"668:16:8"},"scope":725,"src":"599:86:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":726,"src":"230:457:8","usedErrors":[]}],"src":"32:656:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[725],"InterfaceDetectionStorage":[824]},"id":825,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":727,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:9"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":729,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":825,"sourceUnit":726,"src":"57:52:9","symbolAliases":[{"foreign":{"id":728,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"65:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":824,"linearizedBaseContracts":[824],"name":"InterfaceDetectionStorage","nameLocation":"119:25:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":734,"members":[{"constant":false,"id":733,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"199:19:9","nodeType":"VariableDeclaration","scope":734,"src":"175:43:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":732,"keyType":{"id":730,"name":"bytes4","nodeType":"ElementaryTypeName","src":"183:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"175:23:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueType":{"id":731,"name":"bool","nodeType":"ElementaryTypeName","src":"193:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"158:6:9","nodeType":"StructDefinition","scope":824,"src":"151:74:9","visibility":"public"},{"constant":true,"id":747,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"257:19:9","nodeType":"VariableDeclaration","scope":824,"src":"231:136:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"231:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"305:55:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":740,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"295:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"295:66:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"287:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"287:7:9","typeDescriptions":{}}},"id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"287:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"365:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"287:79:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"279:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"279:7:9","typeDescriptions":{}}},"id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"279:88:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":750,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"399:20:9","nodeType":"VariableDeclaration","scope":824,"src":"374:58:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":748,"name":"bytes4","nodeType":"ElementaryTypeName","src":"374:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:10:9","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":776,"nodeType":"Block","src":"794:152:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":762,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"812:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":763,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"827:20:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"812:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"849:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""},"value":"InterfaceDetection: wrong value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""}],"id":761,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"804:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"804:79:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"ExpressionStatement","src":"804:79:9"},{"expression":{"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":768,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"893:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":771,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"895:19:9","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":733,"src":"893:21:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":772,"indexExpression":{"id":770,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"915:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"893:34:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":773,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"930:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"893:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":775,"nodeType":"ExpressionStatement","src":"893:46:9"}]},"documentation":{"id":751,"nodeType":"StructuredDocumentation","src":"439:226:9","text":"@notice Sets or unsets an ERC165 interface.\n @dev Reverts if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":777,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"679:21:9","nodeType":"FunctionDefinition","parameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":754,"mutability":"mutable","name":"s","nameLocation":"725:1:9","nodeType":"VariableDeclaration","scope":777,"src":"710:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":753,"nodeType":"UserDefinedTypeName","pathNode":{"id":752,"name":"Layout","nameLocations":["710:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"710:6:9"},"referencedDeclaration":734,"src":"710:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"interfaceId","nameLocation":"743:11:9","nodeType":"VariableDeclaration","scope":777,"src":"736:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":755,"name":"bytes4","nodeType":"ElementaryTypeName","src":"736:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":758,"mutability":"mutable","name":"supported","nameLocation":"769:9:9","nodeType":"VariableDeclaration","scope":777,"src":"764:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":757,"name":"bool","nodeType":"ElementaryTypeName","src":"764:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"700:84:9"},"returnParameters":{"id":760,"nodeType":"ParameterList","parameters":[],"src":"794:0:9"},"scope":824,"src":"670:276:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":810,"nodeType":"Block","src":"1401:236:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":788,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"1415:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":789,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"1430:20:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1415:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":794,"nodeType":"IfStatement","src":"1411:78:9","trueBody":{"id":793,"nodeType":"Block","src":"1452:37:9","statements":[{"expression":{"hexValue":"66616c7365","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1473:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":787,"id":792,"nodeType":"Return","src":"1466:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"1502:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":797,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"1522:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$725_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$725_$","typeString":"type(contract IERC165)"}],"id":796,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1517:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1517:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$725","typeString":"type(contract IERC165)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1531:11:9","memberName":"interfaceId","nodeType":"MemberAccess","src":"1517:25:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1502:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":804,"nodeType":"IfStatement","src":"1498:82:9","trueBody":{"id":803,"nodeType":"Block","src":"1544:36:9","statements":[{"expression":{"hexValue":"74727565","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1565:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":787,"id":802,"nodeType":"Return","src":"1558:11:9"}]}},{"expression":{"baseExpression":{"expression":{"id":805,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"1596:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":806,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1598:19:9","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":733,"src":"1596:21:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":808,"indexExpression":{"id":807,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"1618:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1596:34:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":787,"id":809,"nodeType":"Return","src":"1589:41:9"}]},"documentation":{"id":778,"nodeType":"StructuredDocumentation","src":"952:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1306:17:9","nodeType":"FunctionDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"s","nameLocation":"1339:1:9","nodeType":"VariableDeclaration","scope":811,"src":"1324:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":780,"nodeType":"UserDefinedTypeName","pathNode":{"id":779,"name":"Layout","nameLocations":["1324:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"1324:6:9"},"referencedDeclaration":734,"src":"1324:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":783,"mutability":"mutable","name":"interfaceId","nameLocation":"1349:11:9","nodeType":"VariableDeclaration","scope":811,"src":"1342:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":782,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1342:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1323:38:9"},"returnParameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"supported","nameLocation":"1390:9:9","nodeType":"VariableDeclaration","scope":811,"src":"1385:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":785,"name":"bool","nodeType":"ElementaryTypeName","src":"1385:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1384:16:9"},"scope":824,"src":"1297:340:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":822,"nodeType":"Block","src":"1702:115:9","statements":[{"assignments":[818],"declarations":[{"constant":false,"id":818,"mutability":"mutable","name":"position","nameLocation":"1720:8:9","nodeType":"VariableDeclaration","scope":822,"src":"1712:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":817,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1712:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":820,"initialValue":{"id":819,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"1731:19:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1712:38:9"},{"AST":{"nodeType":"YulBlock","src":"1769:42:9","statements":[{"nodeType":"YulAssignment","src":"1783:18:9","value":{"name":"position","nodeType":"YulIdentifier","src":"1793:8:9"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"1783:6:9"}]}]},"evmVersion":"london","externalReferences":[{"declaration":818,"isOffset":false,"isSlot":false,"src":"1793:8:9","valueSize":1},{"declaration":815,"isOffset":false,"isSlot":true,"src":"1783:6:9","suffix":"slot","valueSize":1}],"id":821,"nodeType":"InlineAssembly","src":"1760:51:9"}]},"id":823,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1652:6:9","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[],"src":"1658:2:9"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"s","nameLocation":"1699:1:9","nodeType":"VariableDeclaration","scope":823,"src":"1684:16:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":814,"nodeType":"UserDefinedTypeName","pathNode":{"id":813,"name":"Layout","nameLocations":["1684:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"1684:6:9"},"referencedDeclaration":734,"src":"1684:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1683:18:9"},"scope":824,"src":"1643:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":825,"src":"111:1708:9","usedErrors":[]}],"src":"32:1788:9"},"id":9},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[874],"ForwarderRegistryContextBase":[994],"IERC2771":[1006],"IForwarderRegistry":[1020]},"id":875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":826,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":1021,"src":"57:71:10","symbolAliases":[{"foreign":{"id":827,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"65:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":830,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":1007,"src":"129:51:10","symbolAliases":[{"foreign":{"id":829,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"137:8:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":832,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":995,"src":"181:85:10","symbolAliases":[{"foreign":{"id":831,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"189:28:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":834,"name":"ForwarderRegistryContextBase","nameLocations":["574:28:10"],"nodeType":"IdentifierPath","referencedDeclaration":994,"src":"574:28:10"},"id":835,"nodeType":"InheritanceSpecifier","src":"574:28:10"},{"baseName":{"id":836,"name":"IERC2771","nameLocations":["604:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1006,"src":"604:8:10"},"id":837,"nodeType":"InheritanceSpecifier","src":"604:8:10"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":833,"nodeType":"StructuredDocumentation","src":"268:260:10","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":874,"linearizedBaseContracts":[874,1006,994],"name":"ForwarderRegistryContext","nameLocation":"546:24:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":846,"nodeType":"Block","src":"719:2:10","statements":[]},"id":847,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":843,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"699:18:10","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}}],"id":844,"kind":"baseConstructorSpecifier","modifierName":{"id":842,"name":"ForwarderRegistryContextBase","nameLocations":["670:28:10"],"nodeType":"IdentifierPath","referencedDeclaration":994,"src":"670:28:10"},"nodeType":"ModifierInvocation","src":"670:48:10"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":840,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"650:18:10","nodeType":"VariableDeclaration","scope":847,"src":"631:37:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"},"typeName":{"id":839,"nodeType":"UserDefinedTypeName","pathNode":{"id":838,"name":"IForwarderRegistry","nameLocations":["631:18:10"],"nodeType":"IdentifierPath","referencedDeclaration":1020,"src":"631:18:10"},"referencedDeclaration":1020,"src":"631:18:10","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"630:39:10"},"returnParameters":{"id":845,"nodeType":"ParameterList","parameters":[],"src":"719:0:10"},"scope":874,"src":"619:102:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":855,"nodeType":"Block","src":"799:42:10","statements":[{"expression":{"id":853,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"816:18:10","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":852,"id":854,"nodeType":"Return","src":"809:25:10"}]},"functionSelector":"2b4c9f16","id":856,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"736:17:10","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[],"src":"753:2:10"},"returnParameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":856,"src":"779:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"},"typeName":{"id":850,"nodeType":"UserDefinedTypeName","pathNode":{"id":849,"name":"IForwarderRegistry","nameLocations":["779:18:10"],"nodeType":"IdentifierPath","referencedDeclaration":1020,"src":"779:18:10"},"referencedDeclaration":1020,"src":"779:18:10","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"778:20:10"},"scope":874,"src":"727:114:10","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1005],"body":{"id":872,"nodeType":"Block","src":"969:64:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":865,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"986:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":868,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"1007:18:10","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}],"id":867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"999:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":866,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:10","typeDescriptions":{}}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"999:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"986:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":864,"id":871,"nodeType":"Return","src":"979:47:10"}]},"documentation":{"id":857,"nodeType":"StructuredDocumentation","src":"847:24:10","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":873,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"885:18:10","nodeType":"FunctionDefinition","overrides":{"id":861,"nodeType":"OverrideSpecifier","overrides":[],"src":"945:8:10"},"parameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":859,"mutability":"mutable","name":"forwarder","nameLocation":"912:9:10","nodeType":"VariableDeclaration","scope":873,"src":"904:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":858,"name":"address","nodeType":"ElementaryTypeName","src":"904:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"903:19:10"},"returnParameters":{"id":864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":873,"src":"963:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":862,"name":"bool","nodeType":"ElementaryTypeName","src":"963:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"962:6:10"},"scope":874,"src":"876:157:10","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":875,"src":"528:507:10","usedErrors":[]}],"src":"32:1004:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[1049],"ForwarderRegistryContextBase":[994],"IForwarderRegistry":[1020]},"id":995,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":876,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":878,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":995,"sourceUnit":1021,"src":"57:74:11","symbolAliases":[{"foreign":{"id":877,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"65:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":880,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":995,"sourceUnit":1050,"src":"132:67:11","symbolAliases":[{"foreign":{"id":879,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"140:15:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"201:243:11","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":994,"linearizedBaseContracts":[994],"name":"ForwarderRegistryContextBase","nameLocation":"462:28:11","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":884,"mutability":"immutable","name":"_forwarderRegistry","nameLocation":"535:18:11","nodeType":"VariableDeclaration","scope":994,"src":"497:56:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"},"typeName":{"id":883,"nodeType":"UserDefinedTypeName","pathNode":{"id":882,"name":"IForwarderRegistry","nameLocations":["497:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":1020,"src":"497:18:11"},"referencedDeclaration":1020,"src":"497:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":894,"nodeType":"Block","src":"610:55:11","statements":[{"expression":{"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":890,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"620:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":891,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"641:17:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"src":"620:38:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"id":893,"nodeType":"ExpressionStatement","src":"620:38:11"}]},"id":895,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"591:17:11","nodeType":"VariableDeclaration","scope":895,"src":"572:36:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"},"typeName":{"id":886,"nodeType":"UserDefinedTypeName","pathNode":{"id":885,"name":"IForwarderRegistry","nameLocations":["572:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":1020,"src":"572:18:11"},"referencedDeclaration":1020,"src":"572:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"571:38:11"},"returnParameters":{"id":889,"nodeType":"ParameterList","parameters":[],"src":"610:0:11"},"scope":994,"src":"560:105:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":944,"nodeType":"Block","src":"843:681:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":901,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1044:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1044:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":903,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1058:2:11","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1061:6:11","memberName":"origin","nodeType":"MemberAccess","src":"1058:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1044:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":906,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1071:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1075:4:11","memberName":"data","nodeType":"MemberAccess","src":"1071:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1080:6:11","memberName":"length","nodeType":"MemberAccess","src":"1071:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1089:2:11","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1071:20:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1044:47:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":916,"nodeType":"IfStatement","src":"1040:95:11","trueBody":{"id":915,"nodeType":"Block","src":"1093:42:11","statements":[{"expression":{"expression":{"id":912,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1114:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1118:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1114:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":900,"id":914,"nodeType":"Return","src":"1107:17:11"}]}},{"assignments":[918],"declarations":[{"constant":false,"id":918,"mutability":"mutable","name":"sender","nameLocation":"1153:6:11","nodeType":"VariableDeclaration","scope":944,"src":"1145:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":917,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":922,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":919,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"1162:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1049_$","typeString":"type(library ERC2771Calldata)"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1178:9:11","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1031,"src":"1162:25:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1145:44:11"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":923,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1347:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1351:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1347:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":927,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"1369:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}],"id":926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1361:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"1361:7:11","typeDescriptions":{}}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1361:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1347:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":932,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"1431:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":933,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1439:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1443:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1439:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":930,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"1392:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1411:19:11","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1019,"src":"1392:38:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1392:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1347:103:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":940,"nodeType":"IfStatement","src":"1343:147:11","trueBody":{"id":939,"nodeType":"Block","src":"1452:38:11","statements":[{"expression":{"id":937,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"1473:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":900,"id":938,"nodeType":"Return","src":"1466:13:11"}]}},{"expression":{"expression":{"id":941,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1507:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1507:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":900,"id":943,"nodeType":"Return","src":"1500:17:11"}]},"documentation":{"id":896,"nodeType":"StructuredDocumentation","src":"671:105:11","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":945,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"790:10:11","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[],"src":"800:2:11"},"returnParameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":945,"src":"834:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":898,"name":"address","nodeType":"ElementaryTypeName","src":"834:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"833:9:11"},"scope":994,"src":"781:743:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":992,"nodeType":"Block","src":"1705:666:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":951,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1906:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1910:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1906:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":953,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1920:2:11","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1923:6:11","memberName":"origin","nodeType":"MemberAccess","src":"1920:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1906:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":956,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1933:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1937:4:11","memberName":"data","nodeType":"MemberAccess","src":"1933:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:6:11","memberName":"length","nodeType":"MemberAccess","src":"1933:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1951:2:11","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1933:20:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1906:47:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":966,"nodeType":"IfStatement","src":"1902:93:11","trueBody":{"id":965,"nodeType":"Block","src":"1955:40:11","statements":[{"expression":{"expression":{"id":962,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1976:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1980:4:11","memberName":"data","nodeType":"MemberAccess","src":"1976:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":950,"id":964,"nodeType":"Return","src":"1969:15:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":967,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2156:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2160:6:11","memberName":"sender","nodeType":"MemberAccess","src":"2156:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":971,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"2178:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}],"id":970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2170:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"2170:7:11","typeDescriptions":{}}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2170:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2156:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":976,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"2240:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1049_$","typeString":"type(library ERC2771Calldata)"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2256:9:11","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1031,"src":"2240:25:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2240:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":979,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2269:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:11","memberName":"sender","nodeType":"MemberAccess","src":"2269:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":974,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"2201:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2220:19:11","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1019,"src":"2201:38:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2201:79:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2156:124:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":988,"nodeType":"IfStatement","src":"2152:187:11","trueBody":{"id":987,"nodeType":"Block","src":"2282:57:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":983,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"2303:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1049_$","typeString":"type(library ERC2771Calldata)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2319:7:11","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":1048,"src":"2303:23:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":950,"id":986,"nodeType":"Return","src":"2296:32:11"}]}},{"expression":{"expression":{"id":989,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2356:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2360:4:11","memberName":"data","nodeType":"MemberAccess","src":"2356:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":950,"id":991,"nodeType":"Return","src":"2349:15:11"}]},"documentation":{"id":946,"nodeType":"StructuredDocumentation","src":"1530:103:11","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":993,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1647:8:11","nodeType":"FunctionDefinition","parameters":{"id":947,"nodeType":"ParameterList","parameters":[],"src":"1655:2:11"},"returnParameters":{"id":950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":949,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":993,"src":"1689:14:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":948,"name":"bytes","nodeType":"ElementaryTypeName","src":"1689:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1688:16:11"},"scope":994,"src":"1638:733:11","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":995,"src":"444:1929:11","usedErrors":[]}],"src":"32:2342:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[1006]},"id":1007,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":996,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":997,"nodeType":"StructuredDocumentation","src":"57:110:12","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":1006,"linearizedBaseContracts":[1006],"name":"IERC2771","nameLocation":"177:8:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"192:171:12","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":1005,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"377:18:12","nodeType":"FunctionDefinition","parameters":{"id":1001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"forwarder","nameLocation":"404:9:12","nodeType":"VariableDeclaration","scope":1005,"src":"396:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"396:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"395:19:12"},"returnParameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"isTrusted","nameLocation":"443:9:12","nodeType":"VariableDeclaration","scope":1005,"src":"438:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1002,"name":"bool","nodeType":"ElementaryTypeName","src":"438:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"437:16:12"},"scope":1006,"src":"368:86:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1007,"src":"167:289:12","usedErrors":[]}],"src":"32:425:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[1020]},"id":1021,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1008,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":1009,"nodeType":"StructuredDocumentation","src":"57:143:13","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":1020,"linearizedBaseContracts":[1020],"name":"IForwarderRegistry","nameLocation":"210:18:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1010,"nodeType":"StructuredDocumentation","src":"235:314:13","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":1019,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"563:19:13","nodeType":"FunctionDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"sender","nameLocation":"591:6:13","nodeType":"VariableDeclaration","scope":1019,"src":"583:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"583:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"forwarder","nameLocation":"607:9:13","nodeType":"VariableDeclaration","scope":1019,"src":"599:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"599:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"582:35:13"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"isApproved","nameLocation":"646:10:13","nodeType":"VariableDeclaration","scope":1019,"src":"641:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1016,"name":"bool","nodeType":"ElementaryTypeName","src":"641:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"640:17:13"},"scope":1020,"src":"554:104:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1021,"src":"200:460:13","usedErrors":[]}],"src":"32:629:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[1049]},"id":1050,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1022,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":1023,"nodeType":"StructuredDocumentation","src":"57:144:14","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":1049,"linearizedBaseContracts":[1049],"name":"ERC2771Calldata","nameLocation":"209:15:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1030,"nodeType":"Block","src":"397:105:14","statements":[{"AST":{"nodeType":"YulBlock","src":"416:80:14","statements":[{"nodeType":"YulAssignment","src":"430:56:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:14","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"465:12:14"},"nodeType":"YulFunctionCall","src":"465:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"481:2:14","type":"","value":"20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"461:3:14"},"nodeType":"YulFunctionCall","src":"461:23:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"448:12:14"},"nodeType":"YulFunctionCall","src":"448:37:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"440:3:14"},"nodeType":"YulFunctionCall","src":"440:46:14"},"variableNames":[{"name":"sender","nodeType":"YulIdentifier","src":"430:6:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1027,"isOffset":false,"isSlot":false,"src":"430:6:14","valueSize":1}],"id":1029,"nodeType":"InlineAssembly","src":"407:89:14"}]},"documentation":{"id":1024,"nodeType":"StructuredDocumentation","src":"231:101:14","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":1031,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"346:9:14","nodeType":"FunctionDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[],"src":"355:2:14"},"returnParameters":{"id":1028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"sender","nameLocation":"389:6:14","nodeType":"VariableDeclaration","scope":1031,"src":"381:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1026,"name":"address","nodeType":"ElementaryTypeName","src":"381:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"380:16:14"},"scope":1049,"src":"337:165:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1047,"nodeType":"Block","src":"678:89:14","statements":[{"id":1046,"nodeType":"UncheckedBlock","src":"688:73:14","statements":[{"expression":{"baseExpression":{"expression":{"id":1037,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:4:14","memberName":"data","nodeType":"MemberAccess","src":"719:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1039,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"729:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"733:4:14","memberName":"data","nodeType":"MemberAccess","src":"729:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:14","memberName":"length","nodeType":"MemberAccess","src":"729:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"747:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"729:20:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"719:31:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":1036,"id":1045,"nodeType":"Return","src":"712:38:14"}]}]},"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"508:102:14","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":1048,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"624:7:14","nodeType":"FunctionDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[],"src":"631:2:14"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"data","nameLocation":"672:4:14","nodeType":"VariableDeclaration","scope":1048,"src":"657:19:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1034,"name":"bytes","nodeType":"ElementaryTypeName","src":"657:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"656:21:14"},"scope":1049,"src":"615:152:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1050,"src":"201:568:14","usedErrors":[]}],"src":"32:738:14"},"id":14},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"ProxyInitialization":[1088],"StorageSlot":[5558]},"id":1089,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1051,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:15"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1053,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1089,"sourceUnit":5559,"src":"57:74:15","symbolAliases":[{"foreign":{"id":1052,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5558,"src":"65:11:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1054,"nodeType":"StructuredDocumentation","src":"133:92:15","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1088,"linearizedBaseContracts":[1088],"name":"ProxyInitialization","nameLocation":"233:19:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":1086,"nodeType":"Block","src":"600:216:15","statements":[{"assignments":[1066],"declarations":[{"constant":false,"id":1066,"mutability":"mutable","name":"currentVersion","nameLocation":"642:14:15","nodeType":"VariableDeclaration","scope":1086,"src":"610:46:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5513_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1065,"nodeType":"UserDefinedTypeName","pathNode":{"id":1064,"name":"StorageSlot.Uint256Slot","nameLocations":["610:11:15","622:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":5513,"src":"610:23:15"},"referencedDeclaration":5513,"src":"610:23:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5513_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1071,"initialValue":{"arguments":[{"id":1069,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"686:11:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1067,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5558,"src":"659:11:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$5558_$","typeString":"type(library StorageSlot)"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"671:14:15","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":5557,"src":"659:26:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$5513_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5513_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"610:88:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1073,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"716:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5513_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1074,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"731:5:15","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5512,"src":"716:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1075,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"739:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"716:28:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746f726167653a2070686173652072656163686564","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"746:24:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""},"value":"Storage: phase reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""}],"id":1072,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"708:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"708:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1079,"nodeType":"ExpressionStatement","src":"708:63:15"},{"expression":{"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1080,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"781:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5513_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1082,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"796:5:15","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5512,"src":"781:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1083,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"804:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"781:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1085,"nodeType":"ExpressionStatement","src":"781:28:15"}]},"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"259:273:15","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1087,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"546:8:15","nodeType":"FunctionDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"mutability":"mutable","name":"storageSlot","nameLocation":"563:11:15","nodeType":"VariableDeclaration","scope":1087,"src":"555:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1056,"name":"bytes32","nodeType":"ElementaryTypeName","src":"555:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"phase","nameLocation":"584:5:15","nodeType":"VariableDeclaration","scope":1087,"src":"576:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"554:36:15"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"600:0:15"},"scope":1088,"src":"537:279:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1089,"src":"225:593:15","usedErrors":[]}],"src":"32:787:15"},"id":15},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[44],"TokenRecovery":[1100],"TokenRecoveryBase":[1319]},"id":1101,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1090,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:16"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":1092,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1101,"sourceUnit":1320,"src":"57:63:16","symbolAliases":[{"foreign":{"id":1091,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"65:17:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":1094,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1101,"sourceUnit":45,"src":"121:68:16","symbolAliases":[{"foreign":{"id":1093,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"129:17:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1096,"name":"TokenRecoveryBase","nameLocations":["439:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":1319,"src":"439:17:16"},"id":1097,"nodeType":"InheritanceSpecifier","src":"439:17:16"},{"baseName":{"id":1098,"name":"ContractOwnership","nameLocations":["458:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"458:17:16"},"id":1099,"nodeType":"InheritanceSpecifier","src":"458:17:16"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":1095,"nodeType":"StructuredDocumentation","src":"191:213:16","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":1100,"linearizedBaseContracts":[1100,44,713,725,232,255,1319,5498],"name":"TokenRecovery","nameLocation":"422:13:16","nodeType":"ContractDefinition","nodes":[],"scope":1101,"src":"404:76:16","usedErrors":[]}],"src":"32:449:16"},"id":16},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Address":[5476],"Context":[5498],"ContractOwnershipStorage":[682],"IERC20":[4829],"IERC721":[4591],"SafeERC20":[5146],"TokenRecoveryBase":[1319]},"id":1320,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1102,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:17"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":1104,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1320,"sourceUnit":4752,"src":"57:69:17","symbolAliases":[{"foreign":{"id":1103,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4829,"src":"65:6:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":1106,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1320,"sourceUnit":4592,"src":"127:68:17","symbolAliases":[{"foreign":{"id":1105,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4591,"src":"135:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":1108,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1320,"sourceUnit":683,"src":"196:95:17","symbolAliases":[{"foreign":{"id":1107,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"204:24:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":1110,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1320,"sourceUnit":5147,"src":"292:82:17","symbolAliases":[{"foreign":{"id":1109,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5146,"src":"300:9:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1112,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1320,"sourceUnit":5499,"src":"375:66:17","symbolAliases":[{"foreign":{"id":1111,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"383:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1114,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1320,"sourceUnit":5477,"src":"442:66:17","symbolAliases":[{"foreign":{"id":1113,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"450:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1116,"name":"Context","nameLocations":["812:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"812:7:17"},"id":1117,"nodeType":"InheritanceSpecifier","src":"812:7:17"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"510:272:17","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1319,"linearizedBaseContracts":[1319,5498],"name":"TokenRecoveryBase","nameLocation":"791:17:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1121,"libraryName":{"id":1118,"name":"ContractOwnershipStorage","nameLocations":["832:24:17"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"832:24:17"},"nodeType":"UsingForDirective","src":"826:67:17","typeName":{"id":1120,"nodeType":"UserDefinedTypeName","pathNode":{"id":1119,"name":"ContractOwnershipStorage.Layout","nameLocations":["861:24:17","886:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"861:31:17"},"referencedDeclaration":499,"src":"861:31:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":1125,"libraryName":{"id":1122,"name":"SafeERC20","nameLocations":["904:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":5146,"src":"904:9:17"},"nodeType":"UsingForDirective","src":"898:27:17","typeName":{"id":1124,"nodeType":"UserDefinedTypeName","pathNode":{"id":1123,"name":"IERC20","nameLocations":["918:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"918:6:17"},"referencedDeclaration":4829,"src":"918:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}}},{"global":false,"id":1128,"libraryName":{"id":1126,"name":"Address","nameLocations":["936:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":5476,"src":"936:7:17"},"nodeType":"UsingForDirective","src":"930:34:17","typeName":{"id":1127,"name":"address","nodeType":"ElementaryTypeName","src":"948:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"body":{"id":1181,"nodeType":"Block","src":"1914:348:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1143,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1981:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1981:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1138,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1924:24:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1949:6:17","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1924:31:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1142,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1958:22:17","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1924:56:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:70:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1146,"nodeType":"ExpressionStatement","src":"1924:70:17"},{"assignments":[1148],"declarations":[{"constant":false,"id":1148,"mutability":"mutable","name":"length","nameLocation":"2012:6:17","nodeType":"VariableDeclaration","scope":1181,"src":"2004:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1147,"name":"uint256","nodeType":"ElementaryTypeName","src":"2004:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1151,"initialValue":{"expression":{"id":1149,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"2021:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2030:6:17","memberName":"length","nodeType":"MemberAccess","src":"2021:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2004:32:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1153,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"2054:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1154,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"2064:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2072:6:17","memberName":"length","nodeType":"MemberAccess","src":"2064:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2054:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2080:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""},"value":"Recovery: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""}],"id":1152,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2046:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2046:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1159,"nodeType":"ExpressionStatement","src":"2046:66:17"},{"id":1180,"nodeType":"UncheckedBlock","src":"2122:134:17","statements":[{"body":{"id":1178,"nodeType":"Block","src":"2180:66:17","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1173,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"2220:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1175,"indexExpression":{"id":1174,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"2228:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2220:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1169,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"2198:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1171,"indexExpression":{"id":1170,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"2207:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2198:11:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2210:9:17","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":5198,"src":"2198:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$bound_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2198:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1177,"nodeType":"ExpressionStatement","src":"2198:33:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"2162:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1164,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"2167:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2162:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1179,"initializationExpression":{"assignments":[1161],"declarations":[{"constant":false,"id":1161,"mutability":"mutable","name":"i","nameLocation":"2159:1:17","nodeType":"VariableDeclaration","scope":1179,"src":"2151:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1160,"name":"uint256","nodeType":"ElementaryTypeName","src":"2151:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1162,"nodeType":"VariableDeclarationStatement","src":"2151:9:17"},"loopExpression":{"expression":{"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2175:3:17","subExpression":{"id":1166,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"2177:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1168,"nodeType":"ExpressionStatement","src":"2175:3:17"},"nodeType":"ForStatement","src":"2146:100:17"}]}]},"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"970:837:17","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":1182,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1821:10:17","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1132,"mutability":"mutable","name":"accounts","nameLocation":"1859:8:17","nodeType":"VariableDeclaration","scope":1182,"src":"1832:35:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"1832:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1131,"nodeType":"ArrayTypeName","src":"1832:17:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"amounts","nameLocation":"1888:7:17","nodeType":"VariableDeclaration","scope":1182,"src":"1869:26:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1133,"name":"uint256","nodeType":"ElementaryTypeName","src":"1869:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1134,"nodeType":"ArrayTypeName","src":"1869:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1831:65:17"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[],"src":"1914:0:17"},"scope":1319,"src":"1812:450:17","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":1247,"nodeType":"Block","src":"3128:389:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1201,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"3195:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3195:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1196,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"3138:24:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3163:6:17","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"3138:31:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3172:22:17","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"3138:56:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:70:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1204,"nodeType":"ExpressionStatement","src":"3138:70:17"},{"assignments":[1206],"declarations":[{"constant":false,"id":1206,"mutability":"mutable","name":"length","nameLocation":"3226:6:17","nodeType":"VariableDeclaration","scope":1247,"src":"3218:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"3218:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1209,"initialValue":{"expression":{"id":1207,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"3235:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3244:6:17","memberName":"length","nodeType":"MemberAccess","src":"3235:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3218:32:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1211,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3268:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1212,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"3278:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3285:6:17","memberName":"length","nodeType":"MemberAccess","src":"3278:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3268:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1215,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3295:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1216,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"3305:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3313:6:17","memberName":"length","nodeType":"MemberAccess","src":"3305:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3295:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3268:51:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3321:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""},"value":"Recovery: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""}],"id":1210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3260:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:93:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1222,"nodeType":"ExpressionStatement","src":"3260:93:17"},{"id":1246,"nodeType":"UncheckedBlock","src":"3363:148:17","statements":[{"body":{"id":1244,"nodeType":"Block","src":"3421:80:17","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1236,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"3462:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1238,"indexExpression":{"id":1237,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"3471:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3462:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1239,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"3475:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1241,"indexExpression":{"id":1240,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"3483:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3475:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1232,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"3439:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1234,"indexExpression":{"id":1233,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"3446:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3439:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3449:12:17","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":4897,"src":"3439:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4829_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4829_$","typeString":"function (contract IERC20,address,uint256)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3439:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1243,"nodeType":"ExpressionStatement","src":"3439:47:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1226,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"3403:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1227,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3408:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3403:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1245,"initializationExpression":{"assignments":[1224],"declarations":[{"constant":false,"id":1224,"mutability":"mutable","name":"i","nameLocation":"3400:1:17","nodeType":"VariableDeclaration","scope":1245,"src":"3392:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"3392:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1225,"nodeType":"VariableDeclarationStatement","src":"3392:9:17"},"loopExpression":{"expression":{"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3416:3:17","subExpression":{"id":1229,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"3418:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1231,"nodeType":"ExpressionStatement","src":"3416:3:17"},"nodeType":"ForStatement","src":"3387:114:17"}]}]},"documentation":{"id":1183,"nodeType":"StructuredDocumentation","src":"2268:702:17","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":1248,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"2984:13:17","nodeType":"FunctionDefinition","parameters":{"id":1194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"accounts","nameLocation":"3026:8:17","nodeType":"VariableDeclaration","scope":1248,"src":"3007:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1184,"name":"address","nodeType":"ElementaryTypeName","src":"3007:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1185,"nodeType":"ArrayTypeName","src":"3007:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1190,"mutability":"mutable","name":"tokens","nameLocation":"3062:6:17","nodeType":"VariableDeclaration","scope":1248,"src":"3044:24:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1188,"nodeType":"UserDefinedTypeName","pathNode":{"id":1187,"name":"IERC20","nameLocations":["3044:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"3044:6:17"},"referencedDeclaration":4829,"src":"3044:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":1189,"nodeType":"ArrayTypeName","src":"3044:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$4829_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1193,"mutability":"mutable","name":"amounts","nameLocation":"3097:7:17","nodeType":"VariableDeclaration","scope":1248,"src":"3078:26:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"3078:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1192,"nodeType":"ArrayTypeName","src":"3078:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2997:113:17"},"returnParameters":{"id":1195,"nodeType":"ParameterList","parameters":[],"src":"3128:0:17"},"scope":1319,"src":"2975:542:17","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":1317,"nodeType":"Block","src":"4398:412:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1267,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"4465:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4465:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1262,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4408:24:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4433:6:17","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"4408:31:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4408:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4442:22:17","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"4408:56:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4408:70:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1270,"nodeType":"ExpressionStatement","src":"4408:70:17"},{"assignments":[1272],"declarations":[{"constant":false,"id":1272,"mutability":"mutable","name":"length","nameLocation":"4496:6:17","nodeType":"VariableDeclaration","scope":1317,"src":"4488:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1271,"name":"uint256","nodeType":"ElementaryTypeName","src":"4488:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1275,"initialValue":{"expression":{"id":1273,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"4505:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4514:6:17","memberName":"length","nodeType":"MemberAccess","src":"4505:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4488:32:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1277,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4538:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1278,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"4548:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4558:6:17","memberName":"length","nodeType":"MemberAccess","src":"4548:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4538:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1281,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4568:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1282,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"4578:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4587:6:17","memberName":"length","nodeType":"MemberAccess","src":"4578:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4568:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4538:55:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4595:31:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""},"value":"Recovery: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""}],"id":1276,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4530:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4530:97:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1288,"nodeType":"ExpressionStatement","src":"4530:97:17"},{"id":1316,"nodeType":"UncheckedBlock","src":"4637:167:17","statements":[{"body":{"id":1314,"nodeType":"Block","src":"4695:99:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":1304,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4747:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1319","typeString":"contract TokenRecoveryBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1319","typeString":"contract TokenRecoveryBase"}],"id":1303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4739:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1302,"name":"address","nodeType":"ElementaryTypeName","src":"4739:7:17","typeDescriptions":{}}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4739:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1306,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"4754:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1308,"indexExpression":{"id":1307,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"4763:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4754:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1309,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"4767:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1311,"indexExpression":{"id":1310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"4776:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4767:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1298,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"4713:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1300,"indexExpression":{"id":1299,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"4723:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4713:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$4591","typeString":"contract IERC721"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:12:17","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":4534,"src":"4713:25:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4713:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1313,"nodeType":"ExpressionStatement","src":"4713:66:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1292,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"4677:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1293,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4682:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4677:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1315,"initializationExpression":{"assignments":[1290],"declarations":[{"constant":false,"id":1290,"mutability":"mutable","name":"i","nameLocation":"4674:1:17","nodeType":"VariableDeclaration","scope":1315,"src":"4666:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1289,"name":"uint256","nodeType":"ElementaryTypeName","src":"4666:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1291,"nodeType":"VariableDeclarationStatement","src":"4666:9:17"},"loopExpression":{"expression":{"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4690:3:17","subExpression":{"id":1295,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"4692:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1297,"nodeType":"ExpressionStatement","src":"4690:3:17"},"nodeType":"ForStatement","src":"4661:133:17"}]}]},"documentation":{"id":1249,"nodeType":"StructuredDocumentation","src":"3523:711:17","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":1318,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"4248:14:17","nodeType":"FunctionDefinition","parameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"accounts","nameLocation":"4291:8:17","nodeType":"VariableDeclaration","scope":1318,"src":"4272:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1250,"name":"address","nodeType":"ElementaryTypeName","src":"4272:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1251,"nodeType":"ArrayTypeName","src":"4272:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1256,"mutability":"mutable","name":"contracts","nameLocation":"4328:9:17","nodeType":"VariableDeclaration","scope":1318,"src":"4309:28:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1254,"nodeType":"UserDefinedTypeName","pathNode":{"id":1253,"name":"IERC721","nameLocations":["4309:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":4591,"src":"4309:7:17"},"referencedDeclaration":4591,"src":"4309:7:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$4591","typeString":"contract IERC721"}},"id":1255,"nodeType":"ArrayTypeName","src":"4309:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$4591_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1259,"mutability":"mutable","name":"tokenIds","nameLocation":"4366:8:17","nodeType":"VariableDeclaration","scope":1318,"src":"4347:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1257,"name":"uint256","nodeType":"ElementaryTypeName","src":"4347:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1258,"nodeType":"ArrayTypeName","src":"4347:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4262:118:17"},"returnParameters":{"id":1261,"nodeType":"ParameterList","parameters":[],"src":"4398:0:17"},"scope":1319,"src":"4239:571:17","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":1320,"src":"782:4030:17","usedErrors":[]}],"src":"32:4781:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"ERC20":[1343],"ERC20Base":[1717],"ERC20Storage":[4505],"InterfaceDetection":[713]},"id":1344,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1321,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./libraries/ERC20Storage.sol","id":1323,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1344,"sourceUnit":4506,"src":"57:58:18","symbolAliases":[{"foreign":{"id":1322,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"65:12:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol","file":"./base/ERC20Base.sol","id":1325,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1344,"sourceUnit":1718,"src":"116:47:18","symbolAliases":[{"foreign":{"id":1324,"name":"ERC20Base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"124:9:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":1327,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1344,"sourceUnit":714,"src":"164:80:18","symbolAliases":[{"foreign":{"id":1326,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"172:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1329,"name":"ERC20Base","nameLocations":["434:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":1717,"src":"434:9:18"},"id":1330,"nodeType":"InheritanceSpecifier","src":"434:9:18"},{"baseName":{"id":1331,"name":"InterfaceDetection","nameLocations":["445:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"445:18:18"},"id":1332,"nodeType":"InheritanceSpecifier","src":"445:18:18"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":1328,"nodeType":"StructuredDocumentation","src":"246:161:18","text":"@title ERC20 Fungible Token Standard (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1343,"linearizedBaseContracts":[1343,713,725,1717,2349,2325,5498],"name":"ERC20","nameLocation":"425:5:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":1341,"nodeType":"Block","src":"577:36:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1336,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"587:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"600:4:18","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":3181,"src":"587:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"587:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1340,"nodeType":"ExpressionStatement","src":"587:19:18"}]},"documentation":{"id":1333,"nodeType":"StructuredDocumentation","src":"470:88:18","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance."},"id":1342,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1334,"nodeType":"ParameterList","parameters":[],"src":"574:2:18"},"returnParameters":{"id":1335,"nodeType":"ParameterList","parameters":[],"src":"577:0:18"},"scope":1343,"src":"563:50:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1344,"src":"407:208:18","usedErrors":[]}],"src":"32:584:18"},"id":18},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol","exportedSymbols":{"ERC20BatchTransfers":[1363],"ERC20BatchTransfersBase":[1792],"ERC20Storage":[4505]},"id":1364,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1345,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./libraries/ERC20Storage.sol","id":1347,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1364,"sourceUnit":4506,"src":"57:58:19","symbolAliases":[{"foreign":{"id":1346,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"65:12:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol","file":"./base/ERC20BatchTransfersBase.sol","id":1349,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1364,"sourceUnit":1793,"src":"116:75:19","symbolAliases":[{"foreign":{"id":1348,"name":"ERC20BatchTransfersBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"124:23:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1351,"name":"ERC20BatchTransfersBase","nameLocations":["432:23:19"],"nodeType":"IdentifierPath","referencedDeclaration":1792,"src":"432:23:19"},"id":1352,"nodeType":"InheritanceSpecifier","src":"432:23:19"}],"canonicalName":"ERC20BatchTransfers","contractDependencies":[],"contractKind":"contract","documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"193:198:19","text":"@title ERC20 Fungible Token Standard, optional extension: Batch Transfers (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1363,"linearizedBaseContracts":[1363,1792,2379,5498],"name":"ERC20BatchTransfers","nameLocation":"409:19:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":1361,"nodeType":"Block","src":"567:55:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1356,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"577:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"590:23:19","memberName":"initERC20BatchTransfers","nodeType":"MemberAccess","referencedDeclaration":3198,"src":"577:36:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"577:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1360,"nodeType":"ExpressionStatement","src":"577:38:19"}]},"documentation":{"id":1353,"nodeType":"StructuredDocumentation","src":"462:86:19","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers."},"id":1362,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[],"src":"564:2:19"},"returnParameters":{"id":1355,"nodeType":"ParameterList","parameters":[],"src":"567:0:19"},"scope":1363,"src":"553:69:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1364,"src":"391:233:19","usedErrors":[]}],"src":"32:593:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol","exportedSymbols":{"ERC20Burnable":[1383],"ERC20BurnableBase":[1884],"ERC20Storage":[4505]},"id":1384,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1365,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:20"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./libraries/ERC20Storage.sol","id":1367,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1384,"sourceUnit":4506,"src":"57:58:20","symbolAliases":[{"foreign":{"id":1366,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"65:12:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol","file":"./base/ERC20BurnableBase.sol","id":1369,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1384,"sourceUnit":1885,"src":"116:63:20","symbolAliases":[{"foreign":{"id":1368,"name":"ERC20BurnableBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"124:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1371,"name":"ERC20BurnableBase","nameLocations":["407:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":1884,"src":"407:17:20"},"id":1372,"nodeType":"InheritanceSpecifier","src":"407:17:20"}],"canonicalName":"ERC20Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1370,"nodeType":"StructuredDocumentation","src":"181:191:20","text":"@title ERC20 Fungible Token Standard, optional extension: Burnable (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1383,"linearizedBaseContracts":[1383,1884,2413,5498],"name":"ERC20Burnable","nameLocation":"390:13:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":1381,"nodeType":"Block","src":"530:49:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1376,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"540:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"553:17:20","memberName":"initERC20Burnable","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"540:30:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"540:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1380,"nodeType":"ExpressionStatement","src":"540:32:20"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"431:80:20","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Burnable."},"id":1382,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[],"src":"527:2:20"},"returnParameters":{"id":1375,"nodeType":"ParameterList","parameters":[],"src":"530:0:20"},"scope":1383,"src":"516:63:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1384,"src":"372:209:20","usedErrors":[]}],"src":"32:550:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol","exportedSymbols":{"ERC20Detailed":[1418],"ERC20DetailedBase":[1940],"ERC20DetailedStorage":[2747]},"id":1419,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1385,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:21"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol","file":"./libraries/ERC20DetailedStorage.sol","id":1387,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1419,"sourceUnit":2748,"src":"57:74:21","symbolAliases":[{"foreign":{"id":1386,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"65:20:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol","file":"./base/ERC20DetailedBase.sol","id":1389,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1419,"sourceUnit":1941,"src":"132:63:21","symbolAliases":[{"foreign":{"id":1388,"name":"ERC20DetailedBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"140:17:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1391,"name":"ERC20DetailedBase","nameLocations":["423:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":1940,"src":"423:17:21"},"id":1392,"nodeType":"InheritanceSpecifier","src":"423:17:21"}],"canonicalName":"ERC20Detailed","contractDependencies":[],"contractKind":"contract","documentation":{"id":1390,"nodeType":"StructuredDocumentation","src":"197:191:21","text":"@title ERC20 Fungible Token Standard, optional extension: Detailed (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1418,"linearizedBaseContracts":[1418,1940,2435],"name":"ERC20Detailed","nameLocation":"406:13:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1396,"libraryName":{"id":1393,"name":"ERC20DetailedStorage","nameLocations":["453:20:21"],"nodeType":"IdentifierPath","referencedDeclaration":2747,"src":"453:20:21"},"nodeType":"UsingForDirective","src":"447:59:21","typeName":{"id":1395,"nodeType":"UserDefinedTypeName","pathNode":{"id":1394,"name":"ERC20DetailedStorage.Layout","nameLocations":["478:20:21","499:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"478:27:21"},"referencedDeclaration":2574,"src":"478:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}}},{"body":{"id":1416,"nodeType":"Block","src":"911:101:21","statements":[{"expression":{"arguments":[{"id":1411,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"967:9:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1412,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"978:11:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1413,"name":"tokenDecimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"991:13:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1406,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"921:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20DetailedStorage_$2747_$","typeString":"type(library ERC20DetailedStorage)"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"942:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2746,"src":"921:27:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function () pure returns (struct ERC20DetailedStorage.Layout storage pointer)"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"921:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":1410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"951:15:21","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":2644,"src":"921:45:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2574_storage_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint8_$returns$__$bound_to$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function (struct ERC20DetailedStorage.Layout storage pointer,string memory,string memory,uint8)"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"921:84:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1415,"nodeType":"ExpressionStatement","src":"921:84:21"}]},"documentation":{"id":1397,"nodeType":"StructuredDocumentation","src":"512:279:21","text":"@notice Initializes the storage with the token details.\n @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenDecimals The token decimals."},"id":1417,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"tokenName","nameLocation":"831:9:21","nodeType":"VariableDeclaration","scope":1417,"src":"817:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1398,"name":"string","nodeType":"ElementaryTypeName","src":"817:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1401,"mutability":"mutable","name":"tokenSymbol","nameLocation":"864:11:21","nodeType":"VariableDeclaration","scope":1417,"src":"850:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1400,"name":"string","nodeType":"ElementaryTypeName","src":"850:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"tokenDecimals","nameLocation":"891:13:21","nodeType":"VariableDeclaration","scope":1417,"src":"885:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1402,"name":"uint8","nodeType":"ElementaryTypeName","src":"885:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"807:103:21"},"returnParameters":{"id":1405,"nodeType":"ParameterList","parameters":[],"src":"911:0:21"},"scope":1418,"src":"796:216:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1419,"src":"388:626:21","usedErrors":[]}],"src":"32:983:21"},"id":21},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol","exportedSymbols":{"ContractOwnership":[44],"ERC20Metadata":[1446],"ERC20MetadataBase":[2002],"ERC20MetadataStorage":[2838]},"id":1447,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1420,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:22"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol","file":"./libraries/ERC20MetadataStorage.sol","id":1422,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1447,"sourceUnit":2839,"src":"57:74:22","symbolAliases":[{"foreign":{"id":1421,"name":"ERC20MetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"65:20:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol","file":"./base/ERC20MetadataBase.sol","id":1424,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1447,"sourceUnit":2003,"src":"132:63:22","symbolAliases":[{"foreign":{"id":1423,"name":"ERC20MetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"140:17:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../../access/ContractOwnership.sol","id":1426,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1447,"sourceUnit":45,"src":"196:71:22","symbolAliases":[{"foreign":{"id":1425,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"204:17:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1428,"name":"ERC20MetadataBase","nameLocations":["495:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":2002,"src":"495:17:22"},"id":1429,"nodeType":"InheritanceSpecifier","src":"495:17:22"},{"baseName":{"id":1430,"name":"ContractOwnership","nameLocations":["514:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"514:17:22"},"id":1431,"nodeType":"InheritanceSpecifier","src":"514:17:22"}],"canonicalName":"ERC20Metadata","contractDependencies":[],"contractKind":"contract","documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"269:191:22","text":"@title ERC20 Fungible Token Standard, optional extension: Metadata (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":1446,"linearizedBaseContracts":[1446,44,713,725,232,255,2002,2445,5498],"name":"ERC20Metadata","nameLocation":"478:13:22","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1435,"libraryName":{"id":1432,"name":"ERC20MetadataStorage","nameLocations":["544:20:22"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"544:20:22"},"nodeType":"UsingForDirective","src":"538:59:22","typeName":{"id":1434,"nodeType":"UserDefinedTypeName","pathNode":{"id":1433,"name":"ERC20MetadataStorage.Layout","nameLocations":["569:20:22","590:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"569:27:22"},"referencedDeclaration":2766,"src":"569:27:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"}}},{"body":{"id":1444,"nodeType":"Block","src":"702:44:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1439,"name":"ERC20MetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"712:20:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20MetadataStorage_$2838_$","typeString":"type(library ERC20MetadataStorage)"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"733:4:22","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":2796,"src":"712:25:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"712:27:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1443,"nodeType":"ExpressionStatement","src":"712:27:22"}]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"603:80:22","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Metadata."},"id":1445,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"699:2:22"},"returnParameters":{"id":1438,"nodeType":"ParameterList","parameters":[],"src":"702:0:22"},"scope":1446,"src":"688:58:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1447,"src":"460:288:22","usedErrors":[]}],"src":"32:717:22"},"id":22},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol","exportedSymbols":{"AccessControl":[11],"ERC20Mintable":[1470],"ERC20MintableBase":[2089],"ERC20Storage":[4505]},"id":1471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1448,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:23"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./libraries/ERC20Storage.sol","id":1450,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1471,"sourceUnit":4506,"src":"57:58:23","symbolAliases":[{"foreign":{"id":1449,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"65:12:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol","file":"./base/ERC20MintableBase.sol","id":1452,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1471,"sourceUnit":2090,"src":"116:63:23","symbolAliases":[{"foreign":{"id":1451,"name":"ERC20MintableBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"124:17:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"./../../access/AccessControl.sol","id":1454,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1471,"sourceUnit":12,"src":"180:63:23","symbolAliases":[{"foreign":{"id":1453,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"188:13:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1456,"name":"ERC20MintableBase","nameLocations":["471:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":2089,"src":"471:17:23"},"id":1457,"nodeType":"InheritanceSpecifier","src":"471:17:23"},{"baseName":{"id":1458,"name":"AccessControl","nameLocations":["490:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":11,"src":"490:13:23"},"id":1459,"nodeType":"InheritanceSpecifier","src":"490:13:23"}],"canonicalName":"ERC20Mintable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1455,"nodeType":"StructuredDocumentation","src":"245:191:23","text":"@title ERC20 Fungible Token Standard, optional extension: Mintable (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":1470,"linearizedBaseContracts":[1470,11,44,713,725,232,255,182,2089,2467,5498],"name":"ERC20Mintable","nameLocation":"454:13:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":1468,"nodeType":"Block","src":"609:49:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1463,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"619:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"632:17:23","memberName":"initERC20Mintable","nodeType":"MemberAccess","referencedDeclaration":3232,"src":"619:30:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"619:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1467,"nodeType":"ExpressionStatement","src":"619:32:23"}]},"documentation":{"id":1460,"nodeType":"StructuredDocumentation","src":"510:80:23","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Mintable."},"id":1469,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[],"src":"606:2:23"},"returnParameters":{"id":1462,"nodeType":"ParameterList","parameters":[],"src":"609:0:23"},"scope":1470,"src":"595:63:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1471,"src":"436:224:23","usedErrors":[]}],"src":"32:629:23"},"id":23},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol","exportedSymbols":{"ERC20Permit":[1496],"ERC20PermitBase":[2170],"ERC20PermitStorage":[3067],"IERC20Permit":[2503]},"id":1497,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1472,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:24"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol","file":"./interfaces/IERC20Permit.sol","id":1474,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1497,"sourceUnit":2504,"src":"57:59:24","symbolAliases":[{"foreign":{"id":1473,"name":"IERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"65:12:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol","file":"./libraries/ERC20PermitStorage.sol","id":1476,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1497,"sourceUnit":3068,"src":"117:70:24","symbolAliases":[{"foreign":{"id":1475,"name":"ERC20PermitStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"125:18:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol","file":"./base/ERC20PermitBase.sol","id":1478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1497,"sourceUnit":2171,"src":"188:59:24","symbolAliases":[{"foreign":{"id":1477,"name":"ERC20PermitBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"196:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1480,"name":"ERC20PermitBase","nameLocations":["524:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"524:15:24"},"id":1481,"nodeType":"InheritanceSpecifier","src":"524:15:24"}],"canonicalName":"ERC20Permit","contractDependencies":[],"contractKind":"contract","documentation":{"id":1479,"nodeType":"StructuredDocumentation","src":"249:242:24","text":"@title ERC20 Fungible Token Standard, optional extension: Permit (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Note: This contract requires ERC20Detailed."},"fullyImplemented":true,"id":1496,"linearizedBaseContracts":[1496,2170,2503,5498],"name":"ERC20Permit","nameLocation":"509:11:24","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1485,"libraryName":{"id":1482,"name":"ERC20PermitStorage","nameLocations":["552:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":3067,"src":"552:18:24"},"nodeType":"UsingForDirective","src":"546:55:24","typeName":{"id":1484,"nodeType":"UserDefinedTypeName","pathNode":{"id":1483,"name":"ERC20PermitStorage.Layout","nameLocations":["575:18:24","594:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2867,"src":"575:25:24"},"referencedDeclaration":2867,"src":"575:25:24","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"}}},{"body":{"id":1494,"nodeType":"Block","src":"704:42:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1489,"name":"ERC20PermitStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"714:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20PermitStorage_$3067_$","typeString":"type(library ERC20PermitStorage)"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"733:4:24","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":2902,"src":"714:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"714:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1493,"nodeType":"ExpressionStatement","src":"714:25:24"}]},"documentation":{"id":1486,"nodeType":"StructuredDocumentation","src":"607:78:24","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Permit."},"id":1495,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"701:2:24"},"returnParameters":{"id":1488,"nodeType":"ParameterList","parameters":[],"src":"704:0:24"},"scope":1496,"src":"690:56:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1497,"src":"491:257:24","usedErrors":[]}],"src":"32:717:24"},"id":24},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol","exportedSymbols":{"ERC20SafeTransfers":[1516],"ERC20SafeTransfersBase":[2247],"ERC20Storage":[4505]},"id":1517,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1498,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:25"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./libraries/ERC20Storage.sol","id":1500,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1517,"sourceUnit":4506,"src":"57:58:25","symbolAliases":[{"foreign":{"id":1499,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"65:12:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol","file":"./base/ERC20SafeTransfersBase.sol","id":1502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1517,"sourceUnit":2248,"src":"116:73:25","symbolAliases":[{"foreign":{"id":1501,"name":"ERC20SafeTransfersBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"124:22:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1504,"name":"ERC20SafeTransfersBase","nameLocations":["428:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":2247,"src":"428:22:25"},"id":1505,"nodeType":"InheritanceSpecifier","src":"428:22:25"}],"canonicalName":"ERC20SafeTransfers","contractDependencies":[],"contractKind":"contract","documentation":{"id":1503,"nodeType":"StructuredDocumentation","src":"191:197:25","text":"@title ERC20 Fungible Token Standard, optional extension: Safe Transfers (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1516,"linearizedBaseContracts":[1516,2247,2551,5498],"name":"ERC20SafeTransfers","nameLocation":"406:18:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":1514,"nodeType":"Block","src":"561:54:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1509,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"571:12:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"584:22:25","memberName":"initERC20SafeTransfers","nodeType":"MemberAccess","referencedDeclaration":3215,"src":"571:35:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"571:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1513,"nodeType":"ExpressionStatement","src":"571:37:25"}]},"documentation":{"id":1506,"nodeType":"StructuredDocumentation","src":"457:85:25","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers."},"id":1515,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[],"src":"558:2:25"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[],"src":"561:0:25"},"scope":1516,"src":"547:68:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1517,"src":"388:229:25","usedErrors":[]}],"src":"32:586:25"},"id":25},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol","exportedSymbols":{"Context":[5498],"ERC20Base":[1717],"ERC20Storage":[4505],"IERC20":[2325],"IERC20Allowance":[2349]},"id":1718,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1518,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:26"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","file":"./../interfaces/IERC20.sol","id":1520,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":2326,"src":"57:50:26","symbolAliases":[{"foreign":{"id":1519,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"65:6:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol","file":"./../interfaces/IERC20Allowance.sol","id":1522,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":2350,"src":"108:68:26","symbolAliases":[{"foreign":{"id":1521,"name":"IERC20Allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"116:15:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./../libraries/ERC20Storage.sol","id":1524,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":4506,"src":"177:61:26","symbolAliases":[{"foreign":{"id":1523,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"185:12:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1526,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":5499,"src":"239:66:26","symbolAliases":[{"foreign":{"id":1525,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"247:7:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1528,"name":"Context","nameLocations":["559:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"559:7:26"},"id":1529,"nodeType":"InheritanceSpecifier","src":"559:7:26"},{"baseName":{"id":1530,"name":"IERC20","nameLocations":["568:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":2325,"src":"568:6:26"},"id":1531,"nodeType":"InheritanceSpecifier","src":"568:6:26"},{"baseName":{"id":1532,"name":"IERC20Allowance","nameLocations":["576:15:26"],"nodeType":"IdentifierPath","referencedDeclaration":2349,"src":"576:15:26"},"id":1533,"nodeType":"InheritanceSpecifier","src":"576:15:26"}],"canonicalName":"ERC20Base","contractDependencies":[],"contractKind":"contract","documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"307:221:26","text":"@title ERC20 Fungible Token Standard (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":1717,"linearizedBaseContracts":[1717,2349,2325,5498],"name":"ERC20Base","nameLocation":"546:9:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1537,"libraryName":{"id":1534,"name":"ERC20Storage","nameLocations":["604:12:26"],"nodeType":"IdentifierPath","referencedDeclaration":4505,"src":"604:12:26"},"nodeType":"UsingForDirective","src":"598:43:26","typeName":{"id":1536,"nodeType":"UserDefinedTypeName","pathNode":{"id":1535,"name":"ERC20Storage.Layout","nameLocations":["621:12:26","634:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"621:19:26"},"referencedDeclaration":3113,"src":"621:19:26","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"baseFunctions":[2278],"body":{"id":1561,"nodeType":"Block","src":"771:97:26","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1553,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"811:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"811:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1555,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"825:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"834:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1548,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"781:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"794:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"781:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"781:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1552,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"803:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3289,"src":"781:29:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"781:59:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1558,"nodeType":"ExpressionStatement","src":"781:59:26"},{"expression":{"hexValue":"74727565","id":1559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"857:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1547,"id":1560,"nodeType":"Return","src":"850:11:26"}]},"documentation":{"id":1538,"nodeType":"StructuredDocumentation","src":"647:22:26","text":"@inheritdoc IERC20"},"functionSelector":"095ea7b3","id":1562,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"683:7:26","nodeType":"FunctionDefinition","overrides":{"id":1544,"nodeType":"OverrideSpecifier","overrides":[],"src":"740:8:26"},"parameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"spender","nameLocation":"699:7:26","nodeType":"VariableDeclaration","scope":1562,"src":"691:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1539,"name":"address","nodeType":"ElementaryTypeName","src":"691:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1542,"mutability":"mutable","name":"value","nameLocation":"716:5:26","nodeType":"VariableDeclaration","scope":1562,"src":"708:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1541,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"690:32:26"},"returnParameters":{"id":1547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"result","nameLocation":"763:6:26","nodeType":"VariableDeclaration","scope":1562,"src":"758:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1545,"name":"bool","nodeType":"ElementaryTypeName","src":"758:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"757:13:26"},"scope":1717,"src":"674:194:26","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2288],"body":{"id":1586,"nodeType":"Block","src":"994:93:26","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1578,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1035:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1035:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1580,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"1049:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"1053:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1573,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1004:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1017:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1004:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1004:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1577,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1026:8:26","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"1004:30:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1004:55:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1583,"nodeType":"ExpressionStatement","src":"1004:55:26"},{"expression":{"hexValue":"74727565","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1076:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1572,"id":1585,"nodeType":"Return","src":"1069:11:26"}]},"documentation":{"id":1563,"nodeType":"StructuredDocumentation","src":"874:22:26","text":"@inheritdoc IERC20"},"functionSelector":"a9059cbb","id":1587,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"910:8:26","nodeType":"FunctionDefinition","overrides":{"id":1569,"nodeType":"OverrideSpecifier","overrides":[],"src":"963:8:26"},"parameters":{"id":1568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1565,"mutability":"mutable","name":"to","nameLocation":"927:2:26","nodeType":"VariableDeclaration","scope":1587,"src":"919:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1564,"name":"address","nodeType":"ElementaryTypeName","src":"919:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1567,"mutability":"mutable","name":"value","nameLocation":"939:5:26","nodeType":"VariableDeclaration","scope":1587,"src":"931:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1566,"name":"uint256","nodeType":"ElementaryTypeName","src":"931:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"918:27:26"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"result","nameLocation":"986:6:26","nodeType":"VariableDeclaration","scope":1587,"src":"981:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1570,"name":"bool","nodeType":"ElementaryTypeName","src":"981:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"980:13:26"},"scope":1717,"src":"901:186:26","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2300],"body":{"id":1614,"nodeType":"Block","src":"1261:103:26","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1605,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1306:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1306:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1607,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1320:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1608,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"1326:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"1330:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1600,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1271:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1284:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1271:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1271:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1293:12:26","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3555,"src":"1271:34:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,address,uint256)"}},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1271:65:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1611,"nodeType":"ExpressionStatement","src":"1271:65:26"},{"expression":{"hexValue":"74727565","id":1612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1353:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1599,"id":1613,"nodeType":"Return","src":"1346:11:26"}]},"documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"1093:22:26","text":"@inheritdoc IERC20"},"functionSelector":"23b872dd","id":1615,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1129:12:26","nodeType":"FunctionDefinition","overrides":{"id":1596,"nodeType":"OverrideSpecifier","overrides":[],"src":"1230:8:26"},"parameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"from","nameLocation":"1159:4:26","nodeType":"VariableDeclaration","scope":1615,"src":"1151:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1589,"name":"address","nodeType":"ElementaryTypeName","src":"1151:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1592,"mutability":"mutable","name":"to","nameLocation":"1181:2:26","nodeType":"VariableDeclaration","scope":1615,"src":"1173:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1591,"name":"address","nodeType":"ElementaryTypeName","src":"1173:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1594,"mutability":"mutable","name":"value","nameLocation":"1201:5:26","nodeType":"VariableDeclaration","scope":1615,"src":"1193:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1593,"name":"uint256","nodeType":"ElementaryTypeName","src":"1193:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1141:71:26"},"returnParameters":{"id":1599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"mutability":"mutable","name":"result","nameLocation":"1253:6:26","nodeType":"VariableDeclaration","scope":1615,"src":"1248:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1597,"name":"bool","nodeType":"ElementaryTypeName","src":"1248:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1247:13:26"},"scope":1717,"src":"1120:244:26","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2338],"body":{"id":1639,"nodeType":"Block","src":"1518:112:26","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1631,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1568:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1568:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1633,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1582:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1634,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"1591:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1626,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1528:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1541:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1528:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1550:17:26","memberName":"increaseAllowance","nodeType":"MemberAccess","referencedDeclaration":3361,"src":"1528:39:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:74:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1636,"nodeType":"ExpressionStatement","src":"1528:74:26"},{"expression":{"hexValue":"74727565","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1619:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1625,"id":1638,"nodeType":"Return","src":"1612:11:26"}]},"documentation":{"id":1616,"nodeType":"StructuredDocumentation","src":"1370:31:26","text":"@inheritdoc IERC20Allowance"},"functionSelector":"39509351","id":1640,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"1415:17:26","nodeType":"FunctionDefinition","overrides":{"id":1622,"nodeType":"OverrideSpecifier","overrides":[],"src":"1487:8:26"},"parameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"spender","nameLocation":"1441:7:26","nodeType":"VariableDeclaration","scope":1640,"src":"1433:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1617,"name":"address","nodeType":"ElementaryTypeName","src":"1433:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"addedValue","nameLocation":"1458:10:26","nodeType":"VariableDeclaration","scope":1640,"src":"1450:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1432:37:26"},"returnParameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"result","nameLocation":"1510:6:26","nodeType":"VariableDeclaration","scope":1640,"src":"1505:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1623,"name":"bool","nodeType":"ElementaryTypeName","src":"1505:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1504:13:26"},"scope":1717,"src":"1406:224:26","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2348],"body":{"id":1664,"nodeType":"Block","src":"1789:117:26","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1656,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1839:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1839:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1658,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"1853:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1659,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"1862:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1651,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1799:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1812:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1799:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1799:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1655,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1821:17:26","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":3441,"src":"1799:39:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1799:79:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1661,"nodeType":"ExpressionStatement","src":"1799:79:26"},{"expression":{"hexValue":"74727565","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1895:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1650,"id":1663,"nodeType":"Return","src":"1888:11:26"}]},"documentation":{"id":1641,"nodeType":"StructuredDocumentation","src":"1636:31:26","text":"@inheritdoc IERC20Allowance"},"functionSelector":"a457c2d7","id":1665,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"1681:17:26","nodeType":"FunctionDefinition","overrides":{"id":1647,"nodeType":"OverrideSpecifier","overrides":[],"src":"1758:8:26"},"parameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"mutability":"mutable","name":"spender","nameLocation":"1707:7:26","nodeType":"VariableDeclaration","scope":1665,"src":"1699:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1642,"name":"address","nodeType":"ElementaryTypeName","src":"1699:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1645,"mutability":"mutable","name":"subtractedValue","nameLocation":"1724:15:26","nodeType":"VariableDeclaration","scope":1665,"src":"1716:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1644,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1698:42:26"},"returnParameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"result","nameLocation":"1781:6:26","nodeType":"VariableDeclaration","scope":1665,"src":"1776:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1648,"name":"bool","nodeType":"ElementaryTypeName","src":"1776:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1775:13:26"},"scope":1717,"src":"1672:234:26","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2306],"body":{"id":1678,"nodeType":"Block","src":"2010:59:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1672,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"2027:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2040:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"2027:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2027:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1675,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2049:11:26","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":4424,"src":"2027:33:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3113_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer) view returns (uint256)"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2027:35:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1671,"id":1677,"nodeType":"Return","src":"2020:42:26"}]},"documentation":{"id":1666,"nodeType":"StructuredDocumentation","src":"1912:22:26","text":"@inheritdoc IERC20"},"functionSelector":"18160ddd","id":1679,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1948:11:26","nodeType":"FunctionDefinition","overrides":{"id":1668,"nodeType":"OverrideSpecifier","overrides":[],"src":"1976:8:26"},"parameters":{"id":1667,"nodeType":"ParameterList","parameters":[],"src":"1959:2:26"},"returnParameters":{"id":1671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"supply","nameLocation":"2002:6:26","nodeType":"VariableDeclaration","scope":1679,"src":"1994:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1994:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1993:16:26"},"scope":1717,"src":"1939:130:26","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2314],"body":{"id":1695,"nodeType":"Block","src":"2185:62:26","statements":[{"expression":{"arguments":[{"id":1692,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"2234:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1688,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"2202:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2215:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"2202:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2202:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1691,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2224:9:26","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":4441,"src":"2202:31:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$returns$_t_uint256_$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address) view returns (uint256)"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2202:38:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1687,"id":1694,"nodeType":"Return","src":"2195:45:26"}]},"documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"2075:22:26","text":"@inheritdoc IERC20"},"functionSelector":"70a08231","id":1696,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2111:9:26","nodeType":"FunctionDefinition","overrides":{"id":1684,"nodeType":"OverrideSpecifier","overrides":[],"src":"2150:8:26"},"parameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"owner","nameLocation":"2129:5:26","nodeType":"VariableDeclaration","scope":1696,"src":"2121:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1681,"name":"address","nodeType":"ElementaryTypeName","src":"2121:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2120:15:26"},"returnParameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"balance","nameLocation":"2176:7:26","nodeType":"VariableDeclaration","scope":1696,"src":"2168:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2167:17:26"},"scope":1717,"src":"2102:145:26","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2324],"body":{"id":1715,"nodeType":"Block","src":"2384:71:26","statements":[{"expression":{"arguments":[{"id":1711,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"2433:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1712,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"2440:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1707,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"2401:12:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2414:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"2401:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2423:9:26","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":4462,"src":"2401:31:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$returns$_t_uint256_$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address) view returns (uint256)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:47:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1706,"id":1714,"nodeType":"Return","src":"2394:54:26"}]},"documentation":{"id":1697,"nodeType":"StructuredDocumentation","src":"2253:22:26","text":"@inheritdoc IERC20"},"functionSelector":"dd62ed3e","id":1716,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"2289:9:26","nodeType":"FunctionDefinition","overrides":{"id":1703,"nodeType":"OverrideSpecifier","overrides":[],"src":"2351:8:26"},"parameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1699,"mutability":"mutable","name":"owner","nameLocation":"2307:5:26","nodeType":"VariableDeclaration","scope":1716,"src":"2299:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1698,"name":"address","nodeType":"ElementaryTypeName","src":"2299:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1701,"mutability":"mutable","name":"spender","nameLocation":"2322:7:26","nodeType":"VariableDeclaration","scope":1716,"src":"2314:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1700,"name":"address","nodeType":"ElementaryTypeName","src":"2314:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2298:32:26"},"returnParameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"value","nameLocation":"2377:5:26","nodeType":"VariableDeclaration","scope":1716,"src":"2369:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1704,"name":"uint256","nodeType":"ElementaryTypeName","src":"2369:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2368:15:26"},"scope":1717,"src":"2280:175:26","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1718,"src":"528:1929:26","usedErrors":[]}],"src":"32:2426:26"},"id":26},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol","exportedSymbols":{"Context":[5498],"ERC20BatchTransfersBase":[1792],"ERC20Storage":[4505],"IERC20BatchTransfers":[2379]},"id":1793,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1719,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol","file":"./../interfaces/IERC20BatchTransfers.sol","id":1721,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1793,"sourceUnit":2380,"src":"57:78:27","symbolAliases":[{"foreign":{"id":1720,"name":"IERC20BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"65:20:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./../libraries/ERC20Storage.sol","id":1723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1793,"sourceUnit":4506,"src":"136:61:27","symbolAliases":[{"foreign":{"id":1722,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"144:12:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1793,"sourceUnit":5499,"src":"198:66:27","symbolAliases":[{"foreign":{"id":1724,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"206:7:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1727,"name":"Context","nameLocations":["563:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"563:7:27"},"id":1728,"nodeType":"InheritanceSpecifier","src":"563:7:27"},{"baseName":{"id":1729,"name":"IERC20BatchTransfers","nameLocations":["572:20:27"],"nodeType":"IdentifierPath","referencedDeclaration":2379,"src":"572:20:27"},"id":1730,"nodeType":"InheritanceSpecifier","src":"572:20:27"}],"canonicalName":"ERC20BatchTransfersBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1726,"nodeType":"StructuredDocumentation","src":"266:252:27","text":"@title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC20 (Fungible Token Standard)."},"fullyImplemented":true,"id":1792,"linearizedBaseContracts":[1792,2379,5498],"name":"ERC20BatchTransfersBase","nameLocation":"536:23:27","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1734,"libraryName":{"id":1731,"name":"ERC20Storage","nameLocations":["605:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":4505,"src":"605:12:27"},"nodeType":"UsingForDirective","src":"599:43:27","typeName":{"id":1733,"nodeType":"UserDefinedTypeName","pathNode":{"id":1732,"name":"ERC20Storage.Layout","nameLocations":["622:12:27","635:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"622:19:27"},"referencedDeclaration":3113,"src":"622:19:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"baseFunctions":[2364],"body":{"id":1760,"nodeType":"Block","src":"811:107:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1752,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"857:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"857:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1754,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"871:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1755,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"883:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1747,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"821:12:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"834:6:27","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"821:19:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"821:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"843:13:27","memberName":"batchTransfer","nodeType":"MemberAccess","referencedDeclaration":3721,"src":"821:35:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address[] calldata,uint256[] calldata)"}},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"821:69:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1757,"nodeType":"ExpressionStatement","src":"821:69:27"},{"expression":{"hexValue":"74727565","id":1758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"907:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1746,"id":1759,"nodeType":"Return","src":"900:11:27"}]},"documentation":{"id":1735,"nodeType":"StructuredDocumentation","src":"648:36:27","text":"@inheritdoc IERC20BatchTransfers"},"functionSelector":"88d695b2","id":1761,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransfer","nameLocation":"698:13:27","nodeType":"FunctionDefinition","overrides":{"id":1743,"nodeType":"OverrideSpecifier","overrides":[],"src":"787:8:27"},"parameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"mutability":"mutable","name":"recipients","nameLocation":"731:10:27","nodeType":"VariableDeclaration","scope":1761,"src":"712:29:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1736,"name":"address","nodeType":"ElementaryTypeName","src":"712:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1737,"nodeType":"ArrayTypeName","src":"712:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"values","nameLocation":"762:6:27","nodeType":"VariableDeclaration","scope":1761,"src":"743:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1739,"name":"uint256","nodeType":"ElementaryTypeName","src":"743:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1740,"nodeType":"ArrayTypeName","src":"743:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"711:58:27"},"returnParameters":{"id":1746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1761,"src":"805:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1744,"name":"bool","nodeType":"ElementaryTypeName","src":"805:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"804:6:27"},"scope":1792,"src":"689:229:27","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2378],"body":{"id":1790,"nodeType":"Block","src":"1135:117:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1781,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1185:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1185:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1783,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"1199:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1784,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"1205:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1785,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"1217:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1776,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1145:12:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1158:6:27","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1145:19:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1145:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1780,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1167:17:27","memberName":"batchTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3902,"src":"1145:39:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,address[] calldata,uint256[] calldata)"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1145:79:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1787,"nodeType":"ExpressionStatement","src":"1145:79:27"},{"expression":{"hexValue":"74727565","id":1788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1241:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1775,"id":1789,"nodeType":"Return","src":"1234:11:27"}]},"documentation":{"id":1762,"nodeType":"StructuredDocumentation","src":"924:36:27","text":"@inheritdoc IERC20BatchTransfers"},"functionSelector":"4885b254","id":1791,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"974:17:27","nodeType":"FunctionDefinition","overrides":{"id":1772,"nodeType":"OverrideSpecifier","overrides":[],"src":"1111:8:27"},"parameters":{"id":1771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"from","nameLocation":"1009:4:27","nodeType":"VariableDeclaration","scope":1791,"src":"1001:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1763,"name":"address","nodeType":"ElementaryTypeName","src":"1001:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"recipients","nameLocation":"1042:10:27","nodeType":"VariableDeclaration","scope":1791,"src":"1023:29:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1765,"name":"address","nodeType":"ElementaryTypeName","src":"1023:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1766,"nodeType":"ArrayTypeName","src":"1023:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1770,"mutability":"mutable","name":"values","nameLocation":"1081:6:27","nodeType":"VariableDeclaration","scope":1791,"src":"1062:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1769,"nodeType":"ArrayTypeName","src":"1062:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"991:102:27"},"returnParameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1791,"src":"1129:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1773,"name":"bool","nodeType":"ElementaryTypeName","src":"1129:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1128:6:27"},"scope":1792,"src":"965:287:27","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":1793,"src":"518:736:27","usedErrors":[]}],"src":"32:1223:27"},"id":27},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol","exportedSymbols":{"Context":[5498],"ERC20BurnableBase":[1884],"ERC20Storage":[4505],"IERC20Burnable":[2413]},"id":1885,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1794,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol","file":"./../interfaces/IERC20Burnable.sol","id":1796,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1885,"sourceUnit":2414,"src":"57:66:28","symbolAliases":[{"foreign":{"id":1795,"name":"IERC20Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"65:14:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./../libraries/ERC20Storage.sol","id":1798,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1885,"sourceUnit":4506,"src":"124:61:28","symbolAliases":[{"foreign":{"id":1797,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"132:12:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1800,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1885,"sourceUnit":5499,"src":"186:66:28","symbolAliases":[{"foreign":{"id":1799,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"194:7:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1802,"name":"Context","nameLocations":["538:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"538:7:28"},"id":1803,"nodeType":"InheritanceSpecifier","src":"538:7:28"},{"baseName":{"id":1804,"name":"IERC20Burnable","nameLocations":["547:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":2413,"src":"547:14:28"},"id":1805,"nodeType":"InheritanceSpecifier","src":"547:14:28"}],"canonicalName":"ERC20BurnableBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1801,"nodeType":"StructuredDocumentation","src":"254:245:28","text":"@title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC20 (Fungible Token Standard)."},"fullyImplemented":true,"id":1884,"linearizedBaseContracts":[1884,2413,5498],"name":"ERC20BurnableBase","nameLocation":"517:17:28","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1809,"libraryName":{"id":1806,"name":"ERC20Storage","nameLocations":["574:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":4505,"src":"574:12:28"},"nodeType":"UsingForDirective","src":"568:43:28","typeName":{"id":1808,"nodeType":"UserDefinedTypeName","pathNode":{"id":1807,"name":"ERC20Storage.Layout","nameLocations":["591:12:28","604:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"591:19:28"},"referencedDeclaration":3113,"src":"591:19:28","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"baseFunctions":[2390],"body":{"id":1830,"nodeType":"Block","src":"722:85:28","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1823,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"759:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"773:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1818,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"732:12:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"745:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"732:19:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"732:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1822,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"754:4:28","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":4246,"src":"732:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,uint256)"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"732:47:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1827,"nodeType":"ExpressionStatement","src":"732:47:28"},{"expression":{"hexValue":"74727565","id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"796:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1817,"id":1829,"nodeType":"Return","src":"789:11:28"}]},"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"617:30:28","text":"@inheritdoc IERC20Burnable"},"functionSelector":"42966c68","id":1831,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"661:4:28","nodeType":"FunctionDefinition","overrides":{"id":1814,"nodeType":"OverrideSpecifier","overrides":[],"src":"698:8:28"},"parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"value","nameLocation":"674:5:28","nodeType":"VariableDeclaration","scope":1831,"src":"666:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"666:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"665:15:28"},"returnParameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1831,"src":"716:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1815,"name":"bool","nodeType":"ElementaryTypeName","src":"716:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"715:6:28"},"scope":1884,"src":"652:155:28","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2400],"body":{"id":1855,"nodeType":"Block","src":"936:95:28","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1847,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"977:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"977:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1849,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"991:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1850,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"997:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1842,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"946:12:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"946:19:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"946:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1846,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:8:28","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":4280,"src":"946:30:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"946:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1852,"nodeType":"ExpressionStatement","src":"946:57:28"},{"expression":{"hexValue":"74727565","id":1853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1020:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1841,"id":1854,"nodeType":"Return","src":"1013:11:28"}]},"documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"813:30:28","text":"@inheritdoc IERC20Burnable"},"functionSelector":"79cc6790","id":1856,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"857:8:28","nodeType":"FunctionDefinition","overrides":{"id":1838,"nodeType":"OverrideSpecifier","overrides":[],"src":"912:8:28"},"parameters":{"id":1837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"from","nameLocation":"874:4:28","nodeType":"VariableDeclaration","scope":1856,"src":"866:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1833,"name":"address","nodeType":"ElementaryTypeName","src":"866:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1836,"mutability":"mutable","name":"value","nameLocation":"888:5:28","nodeType":"VariableDeclaration","scope":1856,"src":"880:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1835,"name":"uint256","nodeType":"ElementaryTypeName","src":"880:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"865:29:28"},"returnParameters":{"id":1841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1856,"src":"930:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1839,"name":"bool","nodeType":"ElementaryTypeName","src":"930:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"929:6:28"},"scope":1884,"src":"848:183:28","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2412],"body":{"id":1882,"nodeType":"Block","src":"1190:103:28","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1874,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1236:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1236:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1876,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"1250:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":1877,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"1258:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1869,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1200:12:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1213:6:28","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1200:19:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1200:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":1873,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1222:13:28","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":4411,"src":"1200:35:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address[] calldata,uint256[] calldata)"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1200:65:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1879,"nodeType":"ExpressionStatement","src":"1200:65:28"},{"expression":{"hexValue":"74727565","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1282:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1868,"id":1881,"nodeType":"Return","src":"1275:11:28"}]},"documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"1037:30:28","text":"@inheritdoc IERC20Burnable"},"functionSelector":"1b9a7529","id":1883,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1081:13:28","nodeType":"FunctionDefinition","overrides":{"id":1865,"nodeType":"OverrideSpecifier","overrides":[],"src":"1166:8:28"},"parameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"owners","nameLocation":"1114:6:28","nodeType":"VariableDeclaration","scope":1883,"src":"1095:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1858,"name":"address","nodeType":"ElementaryTypeName","src":"1095:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1859,"nodeType":"ArrayTypeName","src":"1095:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1863,"mutability":"mutable","name":"values","nameLocation":"1141:6:28","nodeType":"VariableDeclaration","scope":1883,"src":"1122:25:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1122:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1862,"nodeType":"ArrayTypeName","src":"1122:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1094:54:28"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1883,"src":"1184:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1866,"name":"bool","nodeType":"ElementaryTypeName","src":"1184:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1183:6:28"},"scope":1884,"src":"1072:221:28","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":1885,"src":"499:796:28","usedErrors":[]}],"src":"32:1264:28"},"id":28},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol","exportedSymbols":{"ERC20DetailedBase":[1940],"ERC20DetailedStorage":[2747],"IERC20Detailed":[2435]},"id":1941,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1886,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:29"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol","file":"./../interfaces/IERC20Detailed.sol","id":1888,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1941,"sourceUnit":2436,"src":"57:66:29","symbolAliases":[{"foreign":{"id":1887,"name":"IERC20Detailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"65:14:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol","file":"./../libraries/ERC20DetailedStorage.sol","id":1890,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1941,"sourceUnit":2748,"src":"124:77:29","symbolAliases":[{"foreign":{"id":1889,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"132:20:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1892,"name":"IERC20Detailed","nameLocations":["487:14:29"],"nodeType":"IdentifierPath","referencedDeclaration":2435,"src":"487:14:29"},"id":1893,"nodeType":"InheritanceSpecifier","src":"487:14:29"}],"canonicalName":"ERC20DetailedBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1891,"nodeType":"StructuredDocumentation","src":"203:245:29","text":"@title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC20 (Fungible Token Standard)."},"fullyImplemented":true,"id":1940,"linearizedBaseContracts":[1940,2435],"name":"ERC20DetailedBase","nameLocation":"466:17:29","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1897,"libraryName":{"id":1894,"name":"ERC20DetailedStorage","nameLocations":["514:20:29"],"nodeType":"IdentifierPath","referencedDeclaration":2747,"src":"514:20:29"},"nodeType":"UsingForDirective","src":"508:59:29","typeName":{"id":1896,"nodeType":"UserDefinedTypeName","pathNode":{"id":1895,"name":"ERC20DetailedStorage.Layout","nameLocations":["539:20:29","560:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"539:27:29"},"referencedDeclaration":2574,"src":"539:27:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}}},{"baseFunctions":[2422],"body":{"id":1910,"nodeType":"Block","src":"671:60:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1904,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"688:20:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20DetailedStorage_$2747_$","typeString":"type(library ERC20DetailedStorage)"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"709:6:29","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2746,"src":"688:27:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function () pure returns (struct ERC20DetailedStorage.Layout storage pointer)"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"688:29:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":1907,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"718:4:29","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":2708,"src":"688:34:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$2574_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function (struct ERC20DetailedStorage.Layout storage pointer) view returns (string memory)"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"688:36:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1903,"id":1909,"nodeType":"Return","src":"681:43:29"}]},"documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"573:30:29","text":"@inheritdoc IERC20Detailed"},"functionSelector":"06fdde03","id":1911,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"617:4:29","nodeType":"FunctionDefinition","overrides":{"id":1900,"nodeType":"OverrideSpecifier","overrides":[],"src":"638:8:29"},"parameters":{"id":1899,"nodeType":"ParameterList","parameters":[],"src":"621:2:29"},"returnParameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1911,"src":"656:13:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1901,"name":"string","nodeType":"ElementaryTypeName","src":"656:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"655:15:29"},"scope":1940,"src":"608:123:29","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2428],"body":{"id":1924,"nodeType":"Block","src":"837:62:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1918,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"854:20:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20DetailedStorage_$2747_$","typeString":"type(library ERC20DetailedStorage)"}},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"875:6:29","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2746,"src":"854:27:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function () pure returns (struct ERC20DetailedStorage.Layout storage pointer)"}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"854:29:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":1921,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"884:6:29","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":2721,"src":"854:36:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$2574_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function (struct ERC20DetailedStorage.Layout storage pointer) view returns (string memory)"}},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"854:38:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1917,"id":1923,"nodeType":"Return","src":"847:45:29"}]},"documentation":{"id":1912,"nodeType":"StructuredDocumentation","src":"737:30:29","text":"@inheritdoc IERC20Detailed"},"functionSelector":"95d89b41","id":1925,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"781:6:29","nodeType":"FunctionDefinition","overrides":{"id":1914,"nodeType":"OverrideSpecifier","overrides":[],"src":"804:8:29"},"parameters":{"id":1913,"nodeType":"ParameterList","parameters":[],"src":"787:2:29"},"returnParameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1925,"src":"822:13:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1915,"name":"string","nodeType":"ElementaryTypeName","src":"822:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"821:15:29"},"scope":1940,"src":"772:127:29","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2434],"body":{"id":1938,"nodeType":"Block","src":"999:64:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1932,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"1016:20:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20DetailedStorage_$2747_$","typeString":"type(library ERC20DetailedStorage)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1037:6:29","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2746,"src":"1016:27:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function () pure returns (struct ERC20DetailedStorage.Layout storage pointer)"}},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1016:29:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":1935,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1046:8:29","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"1016:38:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$2574_storage_ptr_$returns$_t_uint8_$bound_to$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function (struct ERC20DetailedStorage.Layout storage pointer) view returns (uint8)"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1016:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1931,"id":1937,"nodeType":"Return","src":"1009:47:29"}]},"documentation":{"id":1926,"nodeType":"StructuredDocumentation","src":"905:30:29","text":"@inheritdoc IERC20Detailed"},"functionSelector":"313ce567","id":1939,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"949:8:29","nodeType":"FunctionDefinition","overrides":{"id":1928,"nodeType":"OverrideSpecifier","overrides":[],"src":"974:8:29"},"parameters":{"id":1927,"nodeType":"ParameterList","parameters":[],"src":"957:2:29"},"returnParameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1939,"src":"992:5:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1929,"name":"uint8","nodeType":"ElementaryTypeName","src":"992:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"991:7:29"},"scope":1940,"src":"940:123:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1941,"src":"448:617:29","usedErrors":[]}],"src":"32:1034:29"},"id":29},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol","exportedSymbols":{"Context":[5498],"ContractOwnershipStorage":[682],"ERC20MetadataBase":[2002],"ERC20MetadataStorage":[2838],"IERC20Metadata":[2445]},"id":2003,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1942,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:30"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol","file":"./../interfaces/IERC20Metadata.sol","id":1944,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2003,"sourceUnit":2446,"src":"57:66:30","symbolAliases":[{"foreign":{"id":1943,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"65:14:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol","file":"./../libraries/ERC20MetadataStorage.sol","id":1946,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2003,"sourceUnit":2839,"src":"124:77:30","symbolAliases":[{"foreign":{"id":1945,"name":"ERC20MetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"132:20:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../../access/libraries/ContractOwnershipStorage.sol","id":1948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2003,"sourceUnit":683,"src":"202:98:30","symbolAliases":[{"foreign":{"id":1947,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"210:24:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1950,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2003,"sourceUnit":5499,"src":"301:66:30","symbolAliases":[{"foreign":{"id":1949,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"309:7:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1952,"name":"Context","nameLocations":["729:7:30"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"729:7:30"},"id":1953,"nodeType":"InheritanceSpecifier","src":"729:7:30"},{"baseName":{"id":1954,"name":"IERC20Metadata","nameLocations":["738:14:30"],"nodeType":"IdentifierPath","referencedDeclaration":2445,"src":"738:14:30"},"id":1955,"nodeType":"InheritanceSpecifier","src":"738:14:30"}],"canonicalName":"ERC20MetadataBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"369:321:30","text":"@title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC20 (Fungible Token Standard).\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":2002,"linearizedBaseContracts":[2002,2445,5498],"name":"ERC20MetadataBase","nameLocation":"708:17:30","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1959,"libraryName":{"id":1956,"name":"ERC20MetadataStorage","nameLocations":["765:20:30"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"765:20:30"},"nodeType":"UsingForDirective","src":"759:59:30","typeName":{"id":1958,"nodeType":"UserDefinedTypeName","pathNode":{"id":1957,"name":"ERC20MetadataStorage.Layout","nameLocations":["790:20:30","811:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"790:27:30"},"referencedDeclaration":2766,"src":"790:27:30","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"}}},{"global":false,"id":1963,"libraryName":{"id":1960,"name":"ContractOwnershipStorage","nameLocations":["829:24:30"],"nodeType":"IdentifierPath","referencedDeclaration":682,"src":"829:24:30"},"nodeType":"UsingForDirective","src":"823:67:30","typeName":{"id":1962,"nodeType":"UserDefinedTypeName","pathNode":{"id":1961,"name":"ContractOwnershipStorage.Layout","nameLocations":["858:24:30","883:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"858:31:30"},"referencedDeclaration":499,"src":"858:31:30","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":1986,"nodeType":"Block","src":"1079:143:30","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1974,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1146:10:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1146:12:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1969,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1089:24:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$682_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1114:6:30","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":681,"src":"1089:31:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$499_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1123:22:30","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":669,"src":"1089:56:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$499_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$499_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:70:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1977,"nodeType":"ExpressionStatement","src":"1089:70:30"},{"expression":{"arguments":[{"id":1983,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"1211:3:30","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1978,"name":"ERC20MetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"1169:20:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20MetadataStorage_$2838_$","typeString":"type(library ERC20MetadataStorage)"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1190:6:30","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"1169:27:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2766_storage_ptr_$","typeString":"function () pure returns (struct ERC20MetadataStorage.Layout storage pointer)"}},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1169:29:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout storage pointer"}},"id":1982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1199:11:30","memberName":"setTokenURI","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"1169:41:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2766_storage_ptr_$_t_string_calldata_ptr_$returns$__$bound_to$_t_struct$_Layout_$2766_storage_ptr_$","typeString":"function (struct ERC20MetadataStorage.Layout storage pointer,string calldata)"}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1169:46:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1985,"nodeType":"ExpressionStatement","src":"1169:46:30"}]},"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"896:127:30","text":"@notice Sets the token URI.\n @dev Reverts if the sender is not the contract owner.\n @param uri The token URI."},"functionSelector":"e0df5b6f","id":1987,"implemented":true,"kind":"function","modifiers":[],"name":"setTokenURI","nameLocation":"1037:11:30","nodeType":"FunctionDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"uri","nameLocation":"1065:3:30","nodeType":"VariableDeclaration","scope":1987,"src":"1049:19:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1965,"name":"string","nodeType":"ElementaryTypeName","src":"1049:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1048:21:30"},"returnParameters":{"id":1968,"nodeType":"ParameterList","parameters":[],"src":"1079:0:30"},"scope":2002,"src":"1028:194:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2444],"body":{"id":2000,"nodeType":"Block","src":"1330:64:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1994,"name":"ERC20MetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"1347:20:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20MetadataStorage_$2838_$","typeString":"type(library ERC20MetadataStorage)"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1368:6:30","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"1347:27:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2766_storage_ptr_$","typeString":"function () pure returns (struct ERC20MetadataStorage.Layout storage pointer)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1347:29:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout storage pointer"}},"id":1997,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1377:8:30","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":2825,"src":"1347:38:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$2766_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_Layout_$2766_storage_ptr_$","typeString":"function (struct ERC20MetadataStorage.Layout storage pointer) view returns (string memory)"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1347:40:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1993,"id":1999,"nodeType":"Return","src":"1340:47:30"}]},"documentation":{"id":1988,"nodeType":"StructuredDocumentation","src":"1228:30:30","text":"@inheritdoc IERC20Metadata"},"functionSelector":"3c130d90","id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1272:8:30","nodeType":"FunctionDefinition","overrides":{"id":1990,"nodeType":"OverrideSpecifier","overrides":[],"src":"1297:8:30"},"parameters":{"id":1989,"nodeType":"ParameterList","parameters":[],"src":"1280:2:30"},"returnParameters":{"id":1993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2001,"src":"1315:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1991,"name":"string","nodeType":"ElementaryTypeName","src":"1315:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1314:15:30"},"scope":2002,"src":"1263:131:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2003,"src":"690:706:30","usedErrors":[]}],"src":"32:1365:30"},"id":30},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol","exportedSymbols":{"AccessControlStorage":[480],"Context":[5498],"ERC20MintableBase":[2089],"ERC20Storage":[4505],"IERC20Mintable":[2467]},"id":2090,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2004,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:31"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","file":"./../interfaces/IERC20Mintable.sol","id":2006,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2090,"sourceUnit":2468,"src":"57:66:31","symbolAliases":[{"foreign":{"id":2005,"name":"IERC20Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"65:14:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./../libraries/ERC20Storage.sol","id":2008,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2090,"sourceUnit":4506,"src":"124:61:31","symbolAliases":[{"foreign":{"id":2007,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"132:12:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../../../access/libraries/AccessControlStorage.sol","id":2010,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2090,"sourceUnit":481,"src":"186:90:31","symbolAliases":[{"foreign":{"id":2009,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"194:20:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2012,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2090,"sourceUnit":5499,"src":"277:66:31","symbolAliases":[{"foreign":{"id":2011,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"285:7:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2014,"name":"Context","nameLocations":["682:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"682:7:31"},"id":2015,"nodeType":"InheritanceSpecifier","src":"682:7:31"},{"baseName":{"id":2016,"name":"IERC20Mintable","nameLocations":["691:14:31"],"nodeType":"IdentifierPath","referencedDeclaration":2467,"src":"691:14:31"},"id":2017,"nodeType":"InheritanceSpecifier","src":"691:14:31"}],"canonicalName":"ERC20MintableBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":2013,"nodeType":"StructuredDocumentation","src":"345:298:31","text":"@title ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC20 (Fungible Token Standard).\n @dev Note: This contract requires AccessControl."},"fullyImplemented":true,"id":2089,"linearizedBaseContracts":[2089,2467,5498],"name":"ERC20MintableBase","nameLocation":"661:17:31","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2021,"libraryName":{"id":2018,"name":"ERC20Storage","nameLocations":["718:12:31"],"nodeType":"IdentifierPath","referencedDeclaration":4505,"src":"718:12:31"},"nodeType":"UsingForDirective","src":"712:43:31","typeName":{"id":2020,"nodeType":"UserDefinedTypeName","pathNode":{"id":2019,"name":"ERC20Storage.Layout","nameLocations":["735:12:31","748:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"735:19:31"},"referencedDeclaration":3113,"src":"735:19:31","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"global":false,"id":2025,"libraryName":{"id":2022,"name":"AccessControlStorage","nameLocations":["766:20:31"],"nodeType":"IdentifierPath","referencedDeclaration":480,"src":"766:20:31"},"nodeType":"UsingForDirective","src":"760:59:31","typeName":{"id":2024,"nodeType":"UserDefinedTypeName","pathNode":{"id":2023,"name":"AccessControlStorage.Layout","nameLocations":["791:20:31","812:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":273,"src":"791:27:31"},"referencedDeclaration":273,"src":"791:27:31","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"constant":true,"functionSelector":"d5391393","id":2028,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"849:11:31","nodeType":"VariableDeclaration","scope":2089,"src":"825:46:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2026,"name":"bytes32","nodeType":"ElementaryTypeName","src":"825:7:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"6d696e746572","id":2027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"863:8:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_39eb9ec2059d897c44a17440c762c429de204f6fddd727156ca52b8da086a6f7","typeString":"literal_string \"minter\""},"value":"minter"},"visibility":"public"},{"baseFunctions":[2456],"body":{"id":2056,"nodeType":"Block","src":"1048:135:31","statements":[{"expression":{"arguments":[{"id":2042,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"1103:11:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2043,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1116:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2037,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1058:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1058:27:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1058:29:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":2041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1088:14:31","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":467,"src":"1058:44:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1058:71:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2046,"nodeType":"ExpressionStatement","src":"1058:71:31"},{"expression":{"arguments":[{"id":2052,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"1166:2:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"1170:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2047,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1139:12:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1152:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1139:19:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:4:31","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"1139:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,uint256)"}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:37:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2055,"nodeType":"ExpressionStatement","src":"1139:37:31"}]},"documentation":{"id":2029,"nodeType":"StructuredDocumentation","src":"878:98:31","text":"@inheritdoc IERC20Mintable\n @dev Reverts if the sender does not have the 'minter' role."},"functionSelector":"40c10f19","id":2057,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"990:4:31","nodeType":"FunctionDefinition","overrides":{"id":2035,"nodeType":"OverrideSpecifier","overrides":[],"src":"1039:8:31"},"parameters":{"id":2034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"to","nameLocation":"1003:2:31","nodeType":"VariableDeclaration","scope":2057,"src":"995:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2030,"name":"address","nodeType":"ElementaryTypeName","src":"995:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2033,"mutability":"mutable","name":"value","nameLocation":"1015:5:31","nodeType":"VariableDeclaration","scope":2057,"src":"1007:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2032,"name":"uint256","nodeType":"ElementaryTypeName","src":"1007:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"994:27:31"},"returnParameters":{"id":2036,"nodeType":"ParameterList","parameters":[],"src":"1048:0:31"},"scope":2089,"src":"981:202:31","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2466],"body":{"id":2087,"nodeType":"Block","src":"1395:149:31","statements":[{"expression":{"arguments":[{"id":2073,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"1450:11:31","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2074,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1463:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1463:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2068,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"1405:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$480_$","typeString":"type(library AccessControlStorage)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1426:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":479,"src":"1405:27:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1405:29:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$273_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":2072,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1435:14:31","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":467,"src":"1405:44:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$273_storage_ptr_$_t_bytes32_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$273_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1405:71:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2077,"nodeType":"ExpressionStatement","src":"1405:71:31"},{"expression":{"arguments":[{"id":2083,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"1518:10:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":2084,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"1530:6:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2078,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1486:12:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1499:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1486:19:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2082,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1508:9:31","memberName":"batchMint","nodeType":"MemberAccess","referencedDeclaration":4185,"src":"1486:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address[] memory,uint256[] memory)"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:51:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2086,"nodeType":"ExpressionStatement","src":"1486:51:31"}]},"documentation":{"id":2058,"nodeType":"StructuredDocumentation","src":"1189:98:31","text":"@inheritdoc IERC20Mintable\n @dev Reverts if the sender does not have the 'minter' role."},"functionSelector":"68573107","id":2088,"implemented":true,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"1301:9:31","nodeType":"FunctionDefinition","overrides":{"id":2066,"nodeType":"OverrideSpecifier","overrides":[],"src":"1386:8:31"},"parameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"recipients","nameLocation":"1330:10:31","nodeType":"VariableDeclaration","scope":2088,"src":"1311:29:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2059,"name":"address","nodeType":"ElementaryTypeName","src":"1311:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2060,"nodeType":"ArrayTypeName","src":"1311:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2064,"mutability":"mutable","name":"values","nameLocation":"1361:6:31","nodeType":"VariableDeclaration","scope":2088,"src":"1342:25:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2063,"nodeType":"ArrayTypeName","src":"1342:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1310:58:31"},"returnParameters":{"id":2067,"nodeType":"ParameterList","parameters":[],"src":"1395:0:31"},"scope":2089,"src":"1292:252:31","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":2090,"src":"643:903:31","usedErrors":[]}],"src":"32:1515:31"},"id":31},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol","exportedSymbols":{"Context":[5498],"ERC20PermitBase":[2170],"ERC20PermitStorage":[3067],"IERC20Permit":[2503]},"id":2171,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2091,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:32"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol","file":"./../interfaces/IERC20Permit.sol","id":2093,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2171,"sourceUnit":2504,"src":"57:62:32","symbolAliases":[{"foreign":{"id":2092,"name":"IERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"65:12:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol","file":"./../libraries/ERC20PermitStorage.sol","id":2095,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2171,"sourceUnit":3068,"src":"120:73:32","symbolAliases":[{"foreign":{"id":2094,"name":"ERC20PermitStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"128:18:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2097,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2171,"sourceUnit":5499,"src":"194:66:32","symbolAliases":[{"foreign":{"id":2096,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"202:7:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2099,"name":"Context","nameLocations":["595:7:32"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"595:7:32"},"id":2100,"nodeType":"InheritanceSpecifier","src":"595:7:32"},{"baseName":{"id":2101,"name":"IERC20Permit","nameLocations":["604:12:32"],"nodeType":"IdentifierPath","referencedDeclaration":2503,"src":"604:12:32"},"id":2102,"nodeType":"InheritanceSpecifier","src":"604:12:32"}],"canonicalName":"ERC20PermitBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":2098,"nodeType":"StructuredDocumentation","src":"262:296:32","text":"@title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC20 (Fungible Token Standard).\n @dev Note: This contract requires ERC20Detailed."},"fullyImplemented":true,"id":2170,"linearizedBaseContracts":[2170,2503,5498],"name":"ERC20PermitBase","nameLocation":"576:15:32","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2106,"libraryName":{"id":2103,"name":"ERC20PermitStorage","nameLocations":["629:18:32"],"nodeType":"IdentifierPath","referencedDeclaration":3067,"src":"629:18:32"},"nodeType":"UsingForDirective","src":"623:55:32","typeName":{"id":2105,"nodeType":"UserDefinedTypeName","pathNode":{"id":2104,"name":"ERC20PermitStorage.Layout","nameLocations":["652:18:32","671:6:32"],"nodeType":"IdentifierPath","referencedDeclaration":2867,"src":"652:25:32"},"referencedDeclaration":2867,"src":"652:25:32","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"}}},{"baseFunctions":[2488],"body":{"id":2139,"nodeType":"Block","src":"909:93:32","statements":[{"expression":{"arguments":[{"id":2130,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"954:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2131,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"961:7:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2132,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"970:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2133,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"977:8:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2134,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"987:1:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2135,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"990:1:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2136,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"993:1:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2125,"name":"ERC20PermitStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"919:18:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20PermitStorage_$3067_$","typeString":"type(library ERC20PermitStorage)"}},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"938:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3066,"src":"919:25:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2867_storage_ptr_$","typeString":"function () pure returns (struct ERC20PermitStorage.Layout storage pointer)"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"919:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout storage pointer"}},"id":2129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"947:6:32","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":2999,"src":"919:34:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2867_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_struct$_Layout_$2867_storage_ptr_$","typeString":"function (struct ERC20PermitStorage.Layout storage pointer,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"919:76:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2138,"nodeType":"ExpressionStatement","src":"919:76:32"}]},"documentation":{"id":2107,"nodeType":"StructuredDocumentation","src":"684:28:32","text":"@inheritdoc IERC20Permit"},"functionSelector":"d505accf","id":2140,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"726:6:32","nodeType":"FunctionDefinition","overrides":{"id":2123,"nodeType":"OverrideSpecifier","overrides":[],"src":"900:8:32"},"parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2109,"mutability":"mutable","name":"owner","nameLocation":"750:5:32","nodeType":"VariableDeclaration","scope":2140,"src":"742:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2108,"name":"address","nodeType":"ElementaryTypeName","src":"742:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2111,"mutability":"mutable","name":"spender","nameLocation":"773:7:32","nodeType":"VariableDeclaration","scope":2140,"src":"765:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2110,"name":"address","nodeType":"ElementaryTypeName","src":"765:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2113,"mutability":"mutable","name":"value","nameLocation":"798:5:32","nodeType":"VariableDeclaration","scope":2140,"src":"790:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2115,"mutability":"mutable","name":"deadline","nameLocation":"821:8:32","nodeType":"VariableDeclaration","scope":2140,"src":"813:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"813:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"v","nameLocation":"845:1:32","nodeType":"VariableDeclaration","scope":2140,"src":"839:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2116,"name":"uint8","nodeType":"ElementaryTypeName","src":"839:5:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"r","nameLocation":"864:1:32","nodeType":"VariableDeclaration","scope":2140,"src":"856:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2118,"name":"bytes32","nodeType":"ElementaryTypeName","src":"856:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2121,"mutability":"mutable","name":"s","nameLocation":"883:1:32","nodeType":"VariableDeclaration","scope":2140,"src":"875:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"875:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"732:158:32"},"returnParameters":{"id":2124,"nodeType":"ParameterList","parameters":[],"src":"909:0:32"},"scope":2170,"src":"717:285:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2496],"body":{"id":2156,"nodeType":"Block","src":"1113:65:32","statements":[{"expression":{"arguments":[{"id":2153,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"1165:5:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2149,"name":"ERC20PermitStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"1130:18:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20PermitStorage_$3067_$","typeString":"type(library ERC20PermitStorage)"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1149:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3066,"src":"1130:25:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2867_storage_ptr_$","typeString":"function () pure returns (struct ERC20PermitStorage.Layout storage pointer)"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1130:27:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout storage pointer"}},"id":2152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1158:6:32","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":3016,"src":"1130:34:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$2867_storage_ptr_$_t_address_$returns$_t_uint256_$bound_to$_t_struct$_Layout_$2867_storage_ptr_$","typeString":"function (struct ERC20PermitStorage.Layout storage pointer,address) view returns (uint256)"}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1130:41:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2148,"id":2155,"nodeType":"Return","src":"1123:48:32"}]},"documentation":{"id":2141,"nodeType":"StructuredDocumentation","src":"1008:28:32","text":"@inheritdoc IERC20Permit"},"functionSelector":"7ecebe00","id":2157,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1050:6:32","nodeType":"FunctionDefinition","overrides":{"id":2145,"nodeType":"OverrideSpecifier","overrides":[],"src":"1086:8:32"},"parameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"owner","nameLocation":"1065:5:32","nodeType":"VariableDeclaration","scope":2157,"src":"1057:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2142,"name":"address","nodeType":"ElementaryTypeName","src":"1057:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1056:15:32"},"returnParameters":{"id":2148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2157,"src":"1104:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:32"},"scope":2170,"src":"1041:137:32","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2502],"body":{"id":2168,"nodeType":"Block","src":"1339:61:32","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2164,"name":"ERC20PermitStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"1356:18:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20PermitStorage_$3067_$","typeString":"type(library ERC20PermitStorage)"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1375:16:32","memberName":"DOMAIN_SEPARATOR","nodeType":"MemberAccess","referencedDeclaration":3054,"src":"1356:35:32","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1356:37:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2163,"id":2167,"nodeType":"Return","src":"1349:44:32"}]},"documentation":{"id":2158,"nodeType":"StructuredDocumentation","src":"1184:28:32","text":"@inheritdoc IERC20Permit"},"functionSelector":"3644e515","id":2169,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"1279:16:32","nodeType":"FunctionDefinition","overrides":{"id":2160,"nodeType":"OverrideSpecifier","overrides":[],"src":"1312:8:32"},"parameters":{"id":2159,"nodeType":"ParameterList","parameters":[],"src":"1295:2:32"},"returnParameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2169,"src":"1330:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1330:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1329:9:32"},"scope":2170,"src":"1270:130:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2171,"src":"558:844:32","usedErrors":[]}],"src":"32:1371:32"},"id":32},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol","exportedSymbols":{"Context":[5498],"ERC20SafeTransfersBase":[2247],"ERC20Storage":[4505],"IERC20SafeTransfers":[2551]},"id":2248,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2172,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:33"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","file":"./../interfaces/IERC20SafeTransfers.sol","id":2174,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2248,"sourceUnit":2552,"src":"57:76:33","symbolAliases":[{"foreign":{"id":2173,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"65:19:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./../libraries/ERC20Storage.sol","id":2176,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2248,"sourceUnit":4506,"src":"134:61:33","symbolAliases":[{"foreign":{"id":2175,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"142:12:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2178,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2248,"sourceUnit":5499,"src":"196:66:33","symbolAliases":[{"foreign":{"id":2177,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"204:7:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2180,"name":"Context","nameLocations":["559:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"559:7:33"},"id":2181,"nodeType":"InheritanceSpecifier","src":"559:7:33"},{"baseName":{"id":2182,"name":"IERC20SafeTransfers","nameLocations":["568:19:33"],"nodeType":"IdentifierPath","referencedDeclaration":2551,"src":"568:19:33"},"id":2183,"nodeType":"InheritanceSpecifier","src":"568:19:33"}],"canonicalName":"ERC20SafeTransfersBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":2179,"nodeType":"StructuredDocumentation","src":"264:251:33","text":"@title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC20 (Fungible Token Standard)."},"fullyImplemented":true,"id":2247,"linearizedBaseContracts":[2247,2551,5498],"name":"ERC20SafeTransfersBase","nameLocation":"533:22:33","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2187,"libraryName":{"id":2184,"name":"ERC20Storage","nameLocations":["600:12:33"],"nodeType":"IdentifierPath","referencedDeclaration":4505,"src":"600:12:33"},"nodeType":"UsingForDirective","src":"594:43:33","typeName":{"id":2186,"nodeType":"UserDefinedTypeName","pathNode":{"id":2185,"name":"ERC20Storage.Layout","nameLocations":["617:12:33","630:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"617:19:33"},"referencedDeclaration":3113,"src":"617:19:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"baseFunctions":[2536],"body":{"id":2214,"nodeType":"Block","src":"824:103:33","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2205,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"869:10:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"869:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2207,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"883:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2192,"src":"887:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2209,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"894:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2200,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"834:12:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"847:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"834:19:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"834:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"856:12:33","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":3939,"src":"834:34:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256,bytes calldata)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"834:65:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2211,"nodeType":"ExpressionStatement","src":"834:65:33"},{"expression":{"hexValue":"74727565","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"916:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2199,"id":2213,"nodeType":"Return","src":"909:11:33"}]},"documentation":{"id":2188,"nodeType":"StructuredDocumentation","src":"643:35:33","text":"@inheritdoc IERC20SafeTransfers"},"functionSelector":"eb795549","id":2215,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"692:12:33","nodeType":"FunctionDefinition","overrides":{"id":2196,"nodeType":"OverrideSpecifier","overrides":[],"src":"800:8:33"},"parameters":{"id":2195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2190,"mutability":"mutable","name":"to","nameLocation":"722:2:33","nodeType":"VariableDeclaration","scope":2215,"src":"714:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2189,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2192,"mutability":"mutable","name":"value","nameLocation":"742:5:33","nodeType":"VariableDeclaration","scope":2215,"src":"734:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2191,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2194,"mutability":"mutable","name":"data","nameLocation":"772:4:33","nodeType":"VariableDeclaration","scope":2215,"src":"757:19:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2193,"name":"bytes","nodeType":"ElementaryTypeName","src":"757:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"704:78:33"},"returnParameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2215,"src":"818:4:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2197,"name":"bool","nodeType":"ElementaryTypeName","src":"818:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"817:6:33"},"scope":2247,"src":"683:244:33","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2550],"body":{"id":2245,"nodeType":"Block","src":"1140:113:33","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2235,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"1189:10:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1189:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2237,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"1203:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2238,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"1209:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1213:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2240,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"1220:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2230,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"1150:12:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1163:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"1150:19:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1150:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1172:16:33","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3979,"src":"1150:38:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1150:75:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2242,"nodeType":"ExpressionStatement","src":"1150:75:33"},{"expression":{"hexValue":"74727565","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1242:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2229,"id":2244,"nodeType":"Return","src":"1235:11:33"}]},"documentation":{"id":2216,"nodeType":"StructuredDocumentation","src":"933:35:33","text":"@inheritdoc IERC20SafeTransfers"},"functionSelector":"b88d4fde","id":2246,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"982:16:33","nodeType":"FunctionDefinition","overrides":{"id":2226,"nodeType":"OverrideSpecifier","overrides":[],"src":"1116:8:33"},"parameters":{"id":2225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2218,"mutability":"mutable","name":"from","nameLocation":"1016:4:33","nodeType":"VariableDeclaration","scope":2246,"src":"1008:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2217,"name":"address","nodeType":"ElementaryTypeName","src":"1008:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2220,"mutability":"mutable","name":"to","nameLocation":"1038:2:33","nodeType":"VariableDeclaration","scope":2246,"src":"1030:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2219,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2222,"mutability":"mutable","name":"value","nameLocation":"1058:5:33","nodeType":"VariableDeclaration","scope":2246,"src":"1050:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"1050:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2224,"mutability":"mutable","name":"data","nameLocation":"1088:4:33","nodeType":"VariableDeclaration","scope":2246,"src":"1073:19:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2223,"name":"bytes","nodeType":"ElementaryTypeName","src":"1073:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"998:100:33"},"returnParameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2246,"src":"1134:4:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2227,"name":"bool","nodeType":"ElementaryTypeName","src":"1134:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1133:6:33"},"scope":2247,"src":"973:280:33","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":2248,"src":"515:740:33","usedErrors":[]}],"src":"32:1224:33"},"id":33},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[2325]},"id":2326,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2249,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:34"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2250,"nodeType":"StructuredDocumentation","src":"57:173:34","text":"@title ERC20 Token Standard, basic interface.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: The ERC-165 identifier for this interface is 0x36372b07."},"fullyImplemented":false,"id":2325,"linearizedBaseContracts":[2325],"name":"IERC20","nameLocation":"240:6:34","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2251,"nodeType":"StructuredDocumentation","src":"253:299:34","text":"@notice Emitted when tokens are transferred, including zero value transfers.\n @param from The account where the transferred tokens are withdrawn from.\n @param to The account where the transferred tokens are deposited to.\n @param value The amount of tokens being transferred."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2259,"name":"Transfer","nameLocation":"563:8:34","nodeType":"EventDefinition","parameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2253,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"588:4:34","nodeType":"VariableDeclaration","scope":2259,"src":"572:20:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2252,"name":"address","nodeType":"ElementaryTypeName","src":"572:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2255,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"610:2:34","nodeType":"VariableDeclaration","scope":2259,"src":"594:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2254,"name":"address","nodeType":"ElementaryTypeName","src":"594:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2257,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"622:5:34","nodeType":"VariableDeclaration","scope":2259,"src":"614:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2256,"name":"uint256","nodeType":"ElementaryTypeName","src":"614:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"571:57:34"},"src":"557:72:34"},{"anonymous":false,"documentation":{"id":2260,"nodeType":"StructuredDocumentation","src":"635:246:34","text":"@notice Emitted when an approval is set.\n @param owner The account granting an allowance to `spender`.\n @param spender The account being granted an allowance from `owner`.\n @param value The allowance amount being granted."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2268,"name":"Approval","nameLocation":"892:8:34","nodeType":"EventDefinition","parameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2262,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"917:5:34","nodeType":"VariableDeclaration","scope":2268,"src":"901:21:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2261,"name":"address","nodeType":"ElementaryTypeName","src":"901:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2264,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"940:7:34","nodeType":"VariableDeclaration","scope":2268,"src":"924:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2263,"name":"address","nodeType":"ElementaryTypeName","src":"924:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2266,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"957:5:34","nodeType":"VariableDeclaration","scope":2268,"src":"949:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2265,"name":"uint256","nodeType":"ElementaryTypeName","src":"949:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"900:63:34"},"src":"886:78:34"},{"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"970:759:34","text":"@notice Sets the allowance to an account from the sender.\n @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n @dev Reverts if `spender` is the zero address.\n @dev Emits an {Approval} event.\n @param spender The account being granted the allowance by the message caller.\n @param value The allowance amount to grant.\n @return result Whether the operation succeeded."},"functionSelector":"095ea7b3","id":2278,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1743:7:34","nodeType":"FunctionDefinition","parameters":{"id":2274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"spender","nameLocation":"1759:7:34","nodeType":"VariableDeclaration","scope":2278,"src":"1751:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2270,"name":"address","nodeType":"ElementaryTypeName","src":"1751:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2273,"mutability":"mutable","name":"value","nameLocation":"1776:5:34","nodeType":"VariableDeclaration","scope":2278,"src":"1768:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2272,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1750:32:34"},"returnParameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"result","nameLocation":"1806:6:34","nodeType":"VariableDeclaration","scope":2278,"src":"1801:11:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2275,"name":"bool","nodeType":"ElementaryTypeName","src":"1801:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1800:13:34"},"scope":2325,"src":"1734:80:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"1820:408:34","text":"@notice Transfers an amount of tokens to a recipient from the sender.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Emits a {Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @return result Whether the operation succeeded."},"functionSelector":"a9059cbb","id":2288,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"2242:8:34","nodeType":"FunctionDefinition","parameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"to","nameLocation":"2259:2:34","nodeType":"VariableDeclaration","scope":2288,"src":"2251:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2280,"name":"address","nodeType":"ElementaryTypeName","src":"2251:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"value","nameLocation":"2271:5:34","nodeType":"VariableDeclaration","scope":2288,"src":"2263:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2282,"name":"uint256","nodeType":"ElementaryTypeName","src":"2263:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2250:27:34"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2286,"mutability":"mutable","name":"result","nameLocation":"2301:6:34","nodeType":"VariableDeclaration","scope":2288,"src":"2296:11:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2285,"name":"bool","nodeType":"ElementaryTypeName","src":"2296:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2295:13:34"},"scope":2325,"src":"2233:76:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2289,"nodeType":"StructuredDocumentation","src":"2315:682:34","text":"@notice Transfers an amount of tokens to a recipient from a specified address.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits a {Transfer} event.\n @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @return result Whether the operation succeeded."},"functionSelector":"23b872dd","id":2300,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3011:12:34","nodeType":"FunctionDefinition","parameters":{"id":2296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2291,"mutability":"mutable","name":"from","nameLocation":"3041:4:34","nodeType":"VariableDeclaration","scope":2300,"src":"3033:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2290,"name":"address","nodeType":"ElementaryTypeName","src":"3033:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2293,"mutability":"mutable","name":"to","nameLocation":"3063:2:34","nodeType":"VariableDeclaration","scope":2300,"src":"3055:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2292,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2295,"mutability":"mutable","name":"value","nameLocation":"3083:5:34","nodeType":"VariableDeclaration","scope":2300,"src":"3075:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2294,"name":"uint256","nodeType":"ElementaryTypeName","src":"3075:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3023:71:34"},"returnParameters":{"id":2299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"result","nameLocation":"3118:6:34","nodeType":"VariableDeclaration","scope":2300,"src":"3113:11:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2297,"name":"bool","nodeType":"ElementaryTypeName","src":"3113:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3112:13:34"},"scope":2325,"src":"3002:124:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2301,"nodeType":"StructuredDocumentation","src":"3132:87:34","text":"@notice Gets the total token supply.\n @return supply The total token supply."},"functionSelector":"18160ddd","id":2306,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3233:11:34","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[],"src":"3244:2:34"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"supply","nameLocation":"3278:6:34","nodeType":"VariableDeclaration","scope":2306,"src":"3270:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"3270:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3269:16:34"},"scope":2325,"src":"3224:62:34","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2307,"nodeType":"StructuredDocumentation","src":"3292:146:34","text":"@notice Gets an account balance.\n @param owner The account whose balance will be returned.\n @return balance The account balance."},"functionSelector":"70a08231","id":2314,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3452:9:34","nodeType":"FunctionDefinition","parameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"owner","nameLocation":"3470:5:34","nodeType":"VariableDeclaration","scope":2314,"src":"3462:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2308,"name":"address","nodeType":"ElementaryTypeName","src":"3462:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3461:15:34"},"returnParameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"balance","nameLocation":"3508:7:34","nodeType":"VariableDeclaration","scope":2314,"src":"3500:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2311,"name":"uint256","nodeType":"ElementaryTypeName","src":"3500:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3499:17:34"},"scope":2325,"src":"3443:74:34","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2315,"nodeType":"StructuredDocumentation","src":"3523:330:34","text":"@notice Gets the amount that an account is allowed to spend on behalf of another.\n @param owner The account that has granted an allowance to `spender`.\n @param spender The account that was granted an allowance by `owner`.\n @return value The amount which `spender` is allowed to spend on behalf of `owner`."},"functionSelector":"dd62ed3e","id":2324,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3867:9:34","nodeType":"FunctionDefinition","parameters":{"id":2320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2317,"mutability":"mutable","name":"owner","nameLocation":"3885:5:34","nodeType":"VariableDeclaration","scope":2324,"src":"3877:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2316,"name":"address","nodeType":"ElementaryTypeName","src":"3877:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2319,"mutability":"mutable","name":"spender","nameLocation":"3900:7:34","nodeType":"VariableDeclaration","scope":2324,"src":"3892:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2318,"name":"address","nodeType":"ElementaryTypeName","src":"3892:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3876:32:34"},"returnParameters":{"id":2323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2322,"mutability":"mutable","name":"value","nameLocation":"3940:5:34","nodeType":"VariableDeclaration","scope":2324,"src":"3932:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2321,"name":"uint256","nodeType":"ElementaryTypeName","src":"3932:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3931:15:34"},"scope":2325,"src":"3858:89:34","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2326,"src":"230:3719:34","usedErrors":[]}],"src":"32:3918:34"},"id":34},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol","exportedSymbols":{"IERC20Allowance":[2349]},"id":2350,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2327,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:35"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Allowance","contractDependencies":[],"contractKind":"interface","documentation":{"id":2328,"nodeType":"StructuredDocumentation","src":"57:187:35","text":"@title ERC20 Token Standard, optional extension: Allowance.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x9d075186."},"fullyImplemented":false,"id":2349,"linearizedBaseContracts":[2349],"name":"IERC20Allowance","nameLocation":"254:15:35","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2329,"nodeType":"StructuredDocumentation","src":"276:598:35","text":"@notice Increases the allowance granted to an account by the sender.\n @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n @dev Reverts if `spender` is the zero address.\n @dev Reverts if `spender`'s allowance by the sender overflows.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n @param spender The account whose allowance is being increased.\n @param value The allowance amount increase.\n @return result Whether the operation succeeded."},"functionSelector":"39509351","id":2338,"implemented":false,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"888:17:35","nodeType":"FunctionDefinition","parameters":{"id":2334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2331,"mutability":"mutable","name":"spender","nameLocation":"914:7:35","nodeType":"VariableDeclaration","scope":2338,"src":"906:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2330,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2333,"mutability":"mutable","name":"value","nameLocation":"931:5:35","nodeType":"VariableDeclaration","scope":2338,"src":"923:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2332,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"905:32:35"},"returnParameters":{"id":2337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2336,"mutability":"mutable","name":"result","nameLocation":"961:6:35","nodeType":"VariableDeclaration","scope":2338,"src":"956:11:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2335,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:13:35"},"scope":2349,"src":"879:90:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2339,"nodeType":"StructuredDocumentation","src":"975:620:35","text":"@notice Decreases the allowance granted to an account by the sender.\n @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n @dev Reverts if `spender` is the zero address.\n @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n @param spender The account whose allowance is being decreased.\n @param value The allowance amount decrease.\n @return result Whether the operation succeeded."},"functionSelector":"a457c2d7","id":2348,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"1609:17:35","nodeType":"FunctionDefinition","parameters":{"id":2344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2341,"mutability":"mutable","name":"spender","nameLocation":"1635:7:35","nodeType":"VariableDeclaration","scope":2348,"src":"1627:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2340,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2343,"mutability":"mutable","name":"value","nameLocation":"1652:5:35","nodeType":"VariableDeclaration","scope":2348,"src":"1644:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2342,"name":"uint256","nodeType":"ElementaryTypeName","src":"1644:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1626:32:35"},"returnParameters":{"id":2347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2346,"mutability":"mutable","name":"result","nameLocation":"1682:6:35","nodeType":"VariableDeclaration","scope":2348,"src":"1677:11:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2345,"name":"bool","nodeType":"ElementaryTypeName","src":"1677:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1676:13:35"},"scope":2349,"src":"1600:90:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2350,"src":"244:1448:35","usedErrors":[]}],"src":"32:1661:35"},"id":35},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol","exportedSymbols":{"IERC20BatchTransfers":[2379]},"id":2380,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2351,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:36"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20BatchTransfers","contractDependencies":[],"contractKind":"interface","documentation":{"id":2352,"nodeType":"StructuredDocumentation","src":"57:193:36","text":"@title ERC20 Token Standard, optional extension: Batch Transfers.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0xc05327e6."},"fullyImplemented":false,"id":2379,"linearizedBaseContracts":[2379],"name":"IERC20BatchTransfers","nameLocation":"260:20:36","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2353,"nodeType":"StructuredDocumentation","src":"287:595:36","text":"@notice Transfers multiple amounts of tokens to multiple recipients from the sender.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if the sender does not have at least `sum(values)` of balance.\n @dev Emits an {IERC20-Transfer} event for each transfer.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`.\n @return result Whether the operation succeeded."},"functionSelector":"88d695b2","id":2364,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransfer","nameLocation":"896:13:36","nodeType":"FunctionDefinition","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2356,"mutability":"mutable","name":"recipients","nameLocation":"929:10:36","nodeType":"VariableDeclaration","scope":2364,"src":"910:29:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2354,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2355,"nodeType":"ArrayTypeName","src":"910:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"values","nameLocation":"960:6:36","nodeType":"VariableDeclaration","scope":2364,"src":"941:25:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"941:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2358,"nodeType":"ArrayTypeName","src":"941:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"909:58:36"},"returnParameters":{"id":2363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"result","nameLocation":"991:6:36","nodeType":"VariableDeclaration","scope":2364,"src":"986:11:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2361,"name":"bool","nodeType":"ElementaryTypeName","src":"986:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"985:13:36"},"scope":2379,"src":"887:112:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2365,"nodeType":"StructuredDocumentation","src":"1005:888:36","text":"@notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if `from` does not have at least `sum(values)` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\n @dev Emits an {IERC20-Transfer} event for each transfer.\n @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to be transferred.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`.\n @return result Whether the operation succeeded."},"functionSelector":"4885b254","id":2378,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"1907:17:36","nodeType":"FunctionDefinition","parameters":{"id":2374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2367,"mutability":"mutable","name":"from","nameLocation":"1942:4:36","nodeType":"VariableDeclaration","scope":2378,"src":"1934:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2366,"name":"address","nodeType":"ElementaryTypeName","src":"1934:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2370,"mutability":"mutable","name":"recipients","nameLocation":"1975:10:36","nodeType":"VariableDeclaration","scope":2378,"src":"1956:29:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2368,"name":"address","nodeType":"ElementaryTypeName","src":"1956:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2369,"nodeType":"ArrayTypeName","src":"1956:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2373,"mutability":"mutable","name":"values","nameLocation":"2014:6:36","nodeType":"VariableDeclaration","scope":2378,"src":"1995:25:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2371,"name":"uint256","nodeType":"ElementaryTypeName","src":"1995:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2372,"nodeType":"ArrayTypeName","src":"1995:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1924:102:36"},"returnParameters":{"id":2377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2376,"mutability":"mutable","name":"result","nameLocation":"2050:6:36","nodeType":"VariableDeclaration","scope":2378,"src":"2045:11:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2375,"name":"bool","nodeType":"ElementaryTypeName","src":"2045:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2044:13:36"},"scope":2379,"src":"1898:160:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2380,"src":"250:1810:36","usedErrors":[]}],"src":"32:2029:36"},"id":36},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol","exportedSymbols":{"IERC20Burnable":[2413]},"id":2414,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2381,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:37"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2382,"nodeType":"StructuredDocumentation","src":"57:186:37","text":"@title ERC20 Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8."},"fullyImplemented":false,"id":2413,"linearizedBaseContracts":[2413],"name":"IERC20Burnable","nameLocation":"253:14:37","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2383,"nodeType":"StructuredDocumentation","src":"274:349:37","text":"@notice Burns an amount of tokens from the sender, decreasing the total supply.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n @param value The amount of tokens to burn.\n @return result Whether the operation succeeded."},"functionSelector":"42966c68","id":2390,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"637:4:37","nodeType":"FunctionDefinition","parameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"value","nameLocation":"650:5:37","nodeType":"VariableDeclaration","scope":2390,"src":"642:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"642:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"641:15:37"},"returnParameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2388,"mutability":"mutable","name":"result","nameLocation":"680:6:37","nodeType":"VariableDeclaration","scope":2390,"src":"675:11:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2387,"name":"bool","nodeType":"ElementaryTypeName","src":"675:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"674:13:37"},"scope":2413,"src":"628:60:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2391,"nodeType":"StructuredDocumentation","src":"694:613:37","text":"@notice Burns an amount of tokens from a specified address, decreasing the total supply.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n @param from The account to burn the tokens from.\n @param value The amount of tokens to burn.\n @return result Whether the operation succeeded."},"functionSelector":"79cc6790","id":2400,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1321:8:37","nodeType":"FunctionDefinition","parameters":{"id":2396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"from","nameLocation":"1338:4:37","nodeType":"VariableDeclaration","scope":2400,"src":"1330:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2392,"name":"address","nodeType":"ElementaryTypeName","src":"1330:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2395,"mutability":"mutable","name":"value","nameLocation":"1352:5:37","nodeType":"VariableDeclaration","scope":2400,"src":"1344:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"1344:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1329:29:37"},"returnParameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2398,"mutability":"mutable","name":"result","nameLocation":"1382:6:37","nodeType":"VariableDeclaration","scope":2400,"src":"1377:11:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2397,"name":"bool","nodeType":"ElementaryTypeName","src":"1377:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1376:13:37"},"scope":2413,"src":"1312:78:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2401,"nodeType":"StructuredDocumentation","src":"1396:799:37","text":"@notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n @dev Reverts if `owners` and `values` have different lengths.\n @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\n @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\n @param owners The list of accounts to burn the tokens from.\n @param values The list of amounts of tokens to burn.\n @return result Whether the operation succeeded."},"functionSelector":"1b9a7529","id":2412,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"2209:13:37","nodeType":"FunctionDefinition","parameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"owners","nameLocation":"2242:6:37","nodeType":"VariableDeclaration","scope":2412,"src":"2223:25:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2402,"name":"address","nodeType":"ElementaryTypeName","src":"2223:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2403,"nodeType":"ArrayTypeName","src":"2223:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2407,"mutability":"mutable","name":"values","nameLocation":"2269:6:37","nodeType":"VariableDeclaration","scope":2412,"src":"2250:25:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2405,"name":"uint256","nodeType":"ElementaryTypeName","src":"2250:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2406,"nodeType":"ArrayTypeName","src":"2250:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2222:54:37"},"returnParameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2410,"mutability":"mutable","name":"result","nameLocation":"2300:6:37","nodeType":"VariableDeclaration","scope":2412,"src":"2295:11:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2409,"name":"bool","nodeType":"ElementaryTypeName","src":"2295:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2294:13:37"},"scope":2413,"src":"2200:108:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2414,"src":"243:2067:37","usedErrors":[]}],"src":"32:2279:37"},"id":37},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol","exportedSymbols":{"IERC20Detailed":[2435]},"id":2436,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2415,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:38"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Detailed","contractDependencies":[],"contractKind":"interface","documentation":{"id":2416,"nodeType":"StructuredDocumentation","src":"57:186:38","text":"@title ERC20 Token Standard, optional extension: Detailed.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0xa219a025."},"fullyImplemented":false,"id":2435,"linearizedBaseContracts":[2435],"name":"IERC20Detailed","nameLocation":"253:14:38","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2417,"nodeType":"StructuredDocumentation","src":"274:105:38","text":"@notice Gets the name of the token. E.g. \"My Token\".\n @return tokenName The name of the token."},"functionSelector":"06fdde03","id":2422,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"393:4:38","nodeType":"FunctionDefinition","parameters":{"id":2418,"nodeType":"ParameterList","parameters":[],"src":"397:2:38"},"returnParameters":{"id":2421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2420,"mutability":"mutable","name":"tokenName","nameLocation":"437:9:38","nodeType":"VariableDeclaration","scope":2422,"src":"423:23:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2419,"name":"string","nodeType":"ElementaryTypeName","src":"423:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"422:25:38"},"scope":2435,"src":"384:64:38","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"454:106:38","text":"@notice Gets the symbol of the token. E.g. \"TOK\".\n @return tokenSymbol The symbol of the token."},"functionSelector":"95d89b41","id":2428,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"574:6:38","nodeType":"FunctionDefinition","parameters":{"id":2424,"nodeType":"ParameterList","parameters":[],"src":"580:2:38"},"returnParameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"tokenSymbol","nameLocation":"620:11:38","nodeType":"VariableDeclaration","scope":2428,"src":"606:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2425,"name":"string","nodeType":"ElementaryTypeName","src":"606:6:38","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"605:27:38"},"scope":2435,"src":"565:68:38","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2429,"nodeType":"StructuredDocumentation","src":"639:516:38","text":"@notice Gets the number of decimals used to display the balances.\n @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n @return nbDecimals The number of decimals used to display the balances."},"functionSelector":"313ce567","id":2434,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"1169:8:38","nodeType":"FunctionDefinition","parameters":{"id":2430,"nodeType":"ParameterList","parameters":[],"src":"1177:2:38"},"returnParameters":{"id":2433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2432,"mutability":"mutable","name":"nbDecimals","nameLocation":"1209:10:38","nodeType":"VariableDeclaration","scope":2434,"src":"1203:16:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2431,"name":"uint8","nodeType":"ElementaryTypeName","src":"1203:5:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1202:18:38"},"scope":2435,"src":"1160:61:38","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2436,"src":"243:980:38","usedErrors":[]}],"src":"32:1192:38"},"id":38},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol","exportedSymbols":{"IERC20Metadata":[2445]},"id":2446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2437,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:39"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2438,"nodeType":"StructuredDocumentation","src":"57:196:39","text":"@title ERC20 Token Standard, ERC1046 optional extension: Metadata.\n @dev See https://eips.ethereum.org/EIPS/eip-1046\n @dev Note: the ERC-165 identifier for this interface is 0x3c130d90."},"fullyImplemented":false,"id":2445,"linearizedBaseContracts":[2445],"name":"IERC20Metadata","nameLocation":"263:14:39","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2439,"nodeType":"StructuredDocumentation","src":"284:84:39","text":"@notice Gets the token metadata URI.\n @return uri The token metadata URI."},"functionSelector":"3c130d90","id":2444,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"382:8:39","nodeType":"FunctionDefinition","parameters":{"id":2440,"nodeType":"ParameterList","parameters":[],"src":"390:2:39"},"returnParameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"uri","nameLocation":"430:3:39","nodeType":"VariableDeclaration","scope":2444,"src":"416:17:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2441,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:19:39"},"scope":2445,"src":"373:62:39","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2446,"src":"253:184:39","usedErrors":[]}],"src":"32:406:39"},"id":39},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","exportedSymbols":{"IERC20Mintable":[2467]},"id":2468,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2447,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:40"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2448,"nodeType":"StructuredDocumentation","src":"57:186:40","text":"@title ERC20 Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x28963e1e."},"fullyImplemented":false,"id":2467,"linearizedBaseContracts":[2467],"name":"IERC20Mintable","nameLocation":"253:14:40","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2449,"nodeType":"StructuredDocumentation","src":"274:371:40","text":"@notice Mints an amount of tokens to a recipient, increasing the total supply.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n @param to The account to mint the tokens to.\n @param value The amount of tokens to mint."},"functionSelector":"40c10f19","id":2456,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"659:4:40","nodeType":"FunctionDefinition","parameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"to","nameLocation":"672:2:40","nodeType":"VariableDeclaration","scope":2456,"src":"664:10:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2450,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2453,"mutability":"mutable","name":"value","nameLocation":"684:5:40","nodeType":"VariableDeclaration","scope":2456,"src":"676:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2452,"name":"uint256","nodeType":"ElementaryTypeName","src":"676:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"663:27:40"},"returnParameters":{"id":2455,"nodeType":"ParameterList","parameters":[],"src":"699:0:40"},"scope":2467,"src":"650:50:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"706:544:40","text":"@notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n @param recipients The list of accounts to mint the tokens to.\n @param values The list of amounts of tokens to mint to each of `recipients`."},"functionSelector":"68573107","id":2466,"implemented":false,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"1264:9:40","nodeType":"FunctionDefinition","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"mutability":"mutable","name":"recipients","nameLocation":"1293:10:40","nodeType":"VariableDeclaration","scope":2466,"src":"1274:29:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2458,"name":"address","nodeType":"ElementaryTypeName","src":"1274:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2459,"nodeType":"ArrayTypeName","src":"1274:9:40","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"values","nameLocation":"1324:6:40","nodeType":"VariableDeclaration","scope":2466,"src":"1305:25:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"1305:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2462,"nodeType":"ArrayTypeName","src":"1305:9:40","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1273:58:40"},"returnParameters":{"id":2465,"nodeType":"ParameterList","parameters":[],"src":"1340:0:40"},"scope":2467,"src":"1255:86:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2468,"src":"243:1100:40","usedErrors":[]}],"src":"32:1312:40"},"id":40},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[2503]},"id":2504,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2469,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:41"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":2470,"nodeType":"StructuredDocumentation","src":"57:314:41","text":"@title ERC20 Token Standard, ERC2612 optional extension: permit – 712-signed approvals\n @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\n @dev See https://eips.ethereum.org/EIPS/eip-2612\n @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da."},"fullyImplemented":false,"id":2503,"linearizedBaseContracts":[2503],"name":"IERC20Permit","nameLocation":"381:12:41","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2471,"nodeType":"StructuredDocumentation","src":"400:942:41","text":"@notice Sets the allowance to an account from another account using a signed permit.\n @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\n @dev Reverts if `owner` is the zero address.\n @dev Reverts if the current blocktime is greather than `deadline`.\n @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n @dev Emits an {IERC20-Approval} event.\n @param owner The token owner granting the allowance to `spender`.\n @param spender The token spender being granted the allowance by `owner`.\n @param value The allowance amount to grant.\n @param deadline The deadline from which the permit signature is no longer valid.\n @param v Permit signature v parameter\n @param r Permit signature r parameter.\n @param s Permit signature s parameter."},"functionSelector":"d505accf","id":2488,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1356:6:41","nodeType":"FunctionDefinition","parameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"owner","nameLocation":"1380:5:41","nodeType":"VariableDeclaration","scope":2488,"src":"1372:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2472,"name":"address","nodeType":"ElementaryTypeName","src":"1372:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2475,"mutability":"mutable","name":"spender","nameLocation":"1403:7:41","nodeType":"VariableDeclaration","scope":2488,"src":"1395:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2474,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2477,"mutability":"mutable","name":"value","nameLocation":"1428:5:41","nodeType":"VariableDeclaration","scope":2488,"src":"1420:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2476,"name":"uint256","nodeType":"ElementaryTypeName","src":"1420:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2479,"mutability":"mutable","name":"deadline","nameLocation":"1451:8:41","nodeType":"VariableDeclaration","scope":2488,"src":"1443:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2478,"name":"uint256","nodeType":"ElementaryTypeName","src":"1443:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2481,"mutability":"mutable","name":"v","nameLocation":"1475:1:41","nodeType":"VariableDeclaration","scope":2488,"src":"1469:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2480,"name":"uint8","nodeType":"ElementaryTypeName","src":"1469:5:41","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"r","nameLocation":"1494:1:41","nodeType":"VariableDeclaration","scope":2488,"src":"1486:9:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1486:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2485,"mutability":"mutable","name":"s","nameLocation":"1513:1:41","nodeType":"VariableDeclaration","scope":2488,"src":"1505:9:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1505:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1362:158:41"},"returnParameters":{"id":2487,"nodeType":"ParameterList","parameters":[],"src":"1529:0:41"},"scope":2503,"src":"1347:183:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2489,"nodeType":"StructuredDocumentation","src":"1536:171:41","text":"@notice Gets the current permit nonce of an account.\n @param owner The account to check the nonce of.\n @return nonce The current permit nonce of `owner`."},"functionSelector":"7ecebe00","id":2496,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1721:6:41","nodeType":"FunctionDefinition","parameters":{"id":2492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2491,"mutability":"mutable","name":"owner","nameLocation":"1736:5:41","nodeType":"VariableDeclaration","scope":2496,"src":"1728:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2490,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1727:15:41"},"returnParameters":{"id":2495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2494,"mutability":"mutable","name":"nonce","nameLocation":"1774:5:41","nodeType":"VariableDeclaration","scope":2496,"src":"1766:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2493,"name":"uint256","nodeType":"ElementaryTypeName","src":"1766:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1765:15:41"},"scope":2503,"src":"1712:69:41","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"1787:943:41","text":"@notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n  keccak256(\n      abi.encode(\n          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n          keccak256(bytes(name)),\n          keccak256(bytes(version)),\n          chainId,\n          address(this)))\n  where\n   - `name` (string) is the ERC-20 token name.\n   - `version` (string) refers to the ERC-20 token contract version.\n   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n   - `verifyingContract` (address) is the ERC-20 token contract address.\n @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits."},"functionSelector":"3644e515","id":2502,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2797:16:41","nodeType":"FunctionDefinition","parameters":{"id":2498,"nodeType":"ParameterList","parameters":[],"src":"2813:2:41"},"returnParameters":{"id":2501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2500,"mutability":"mutable","name":"domainSeparator","nameLocation":"2847:15:41","nodeType":"VariableDeclaration","scope":2502,"src":"2839:23:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2839:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2838:25:41"},"scope":2503,"src":"2788:76:41","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2504,"src":"371:2495:41","usedErrors":[]}],"src":"32:2835:41"},"id":41},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","exportedSymbols":{"IERC20Receiver":[2521]},"id":2522,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2505,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:42"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2506,"nodeType":"StructuredDocumentation","src":"57:281:42","text":"@title ERC20 Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x4fc35859."},"fullyImplemented":false,"id":2521,"linearizedBaseContracts":[2521],"name":"IERC20Receiver","nameLocation":"348:14:42","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2507,"nodeType":"StructuredDocumentation","src":"369:532:42","text":"@notice Handles the receipt of ERC20 tokens.\n @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n @param operator The initiator of the safe transfer.\n @param from The previous tokens owner.\n @param value The amount of tokens transferred.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."},"functionSelector":"4fc35859","id":2520,"implemented":false,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"915:15:42","nodeType":"FunctionDefinition","parameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2509,"mutability":"mutable","name":"operator","nameLocation":"948:8:42","nodeType":"VariableDeclaration","scope":2520,"src":"940:16:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2508,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2511,"mutability":"mutable","name":"from","nameLocation":"974:4:42","nodeType":"VariableDeclaration","scope":2520,"src":"966:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2510,"name":"address","nodeType":"ElementaryTypeName","src":"966:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2513,"mutability":"mutable","name":"value","nameLocation":"996:5:42","nodeType":"VariableDeclaration","scope":2520,"src":"988:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2512,"name":"uint256","nodeType":"ElementaryTypeName","src":"988:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2515,"mutability":"mutable","name":"data","nameLocation":"1026:4:42","nodeType":"VariableDeclaration","scope":2520,"src":"1011:19:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2514,"name":"bytes","nodeType":"ElementaryTypeName","src":"1011:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"930:106:42"},"returnParameters":{"id":2519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2518,"mutability":"mutable","name":"magicValue","nameLocation":"1062:10:42","nodeType":"VariableDeclaration","scope":2520,"src":"1055:17:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2517,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1055:6:42","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1054:19:42"},"scope":2521,"src":"906:168:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2522,"src":"338:738:42","usedErrors":[]}],"src":"32:1045:42"},"id":42},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","exportedSymbols":{"IERC20SafeTransfers":[2551]},"id":2552,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2523,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:43"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20SafeTransfers","contractDependencies":[],"contractKind":"interface","documentation":{"id":2524,"nodeType":"StructuredDocumentation","src":"57:192:43","text":"@title ERC20 Token Standard, optional extension: Safe Transfers.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x53f41a97."},"fullyImplemented":false,"id":2551,"linearizedBaseContracts":[2551],"name":"IERC20SafeTransfers","nameLocation":"259:19:43","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2525,"nodeType":"StructuredDocumentation","src":"285:697:43","text":"@notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"eb795549","id":2536,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"996:12:43","nodeType":"FunctionDefinition","parameters":{"id":2532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"mutability":"mutable","name":"to","nameLocation":"1026:2:43","nodeType":"VariableDeclaration","scope":2536,"src":"1018:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2526,"name":"address","nodeType":"ElementaryTypeName","src":"1018:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2529,"mutability":"mutable","name":"value","nameLocation":"1046:5:43","nodeType":"VariableDeclaration","scope":2536,"src":"1038:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2528,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2531,"mutability":"mutable","name":"data","nameLocation":"1076:4:43","nodeType":"VariableDeclaration","scope":2536,"src":"1061:19:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2530,"name":"bytes","nodeType":"ElementaryTypeName","src":"1061:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1008:78:43"},"returnParameters":{"id":2535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2534,"mutability":"mutable","name":"result","nameLocation":"1110:6:43","nodeType":"VariableDeclaration","scope":2536,"src":"1105:11:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2533,"name":"bool","nodeType":"ElementaryTypeName","src":"1105:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1104:13:43"},"scope":2551,"src":"987:131:43","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2537,"nodeType":"StructuredDocumentation","src":"1124:1009:43","text":"@notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"b88d4fde","id":2550,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2147:16:43","nodeType":"FunctionDefinition","parameters":{"id":2546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2539,"mutability":"mutable","name":"from","nameLocation":"2181:4:43","nodeType":"VariableDeclaration","scope":2550,"src":"2173:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2538,"name":"address","nodeType":"ElementaryTypeName","src":"2173:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2541,"mutability":"mutable","name":"to","nameLocation":"2203:2:43","nodeType":"VariableDeclaration","scope":2550,"src":"2195:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2540,"name":"address","nodeType":"ElementaryTypeName","src":"2195:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2543,"mutability":"mutable","name":"value","nameLocation":"2223:5:43","nodeType":"VariableDeclaration","scope":2550,"src":"2215:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2542,"name":"uint256","nodeType":"ElementaryTypeName","src":"2215:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"data","nameLocation":"2253:4:43","nodeType":"VariableDeclaration","scope":2550,"src":"2238:19:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2544,"name":"bytes","nodeType":"ElementaryTypeName","src":"2238:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2163:100:43"},"returnParameters":{"id":2549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2548,"mutability":"mutable","name":"result","nameLocation":"2287:6:43","nodeType":"VariableDeclaration","scope":2550,"src":"2282:11:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2547,"name":"bool","nodeType":"ElementaryTypeName","src":"2282:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2281:13:43"},"scope":2551,"src":"2138:157:43","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2552,"src":"249:2048:43","usedErrors":[]}],"src":"32:2266:43"},"id":43},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol","exportedSymbols":{"ERC20DetailedStorage":[2747],"IERC20Detailed":[2435],"InterfaceDetectionStorage":[824],"ProxyInitialization":[1088]},"id":2748,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2553,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:44"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol","file":"./../interfaces/IERC20Detailed.sol","id":2555,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2748,"sourceUnit":2436,"src":"57:66:44","symbolAliases":[{"foreign":{"id":2554,"name":"IERC20Detailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"65:14:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":2557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2748,"sourceUnit":1089,"src":"124:87:44","symbolAliases":[{"foreign":{"id":2556,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"132:19:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":2559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2748,"sourceUnit":825,"src":"212:107:44","symbolAliases":[{"foreign":{"id":2558,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"220:25:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC20DetailedStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2747,"linearizedBaseContracts":[2747],"name":"ERC20DetailedStorage","nameLocation":"329:20:44","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2563,"libraryName":{"id":2560,"name":"InterfaceDetectionStorage","nameLocations":["362:25:44"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"362:25:44"},"nodeType":"UsingForDirective","src":"356:69:44","typeName":{"id":2562,"nodeType":"UserDefinedTypeName","pathNode":{"id":2561,"name":"InterfaceDetectionStorage.Layout","nameLocations":["392:25:44","418:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"392:32:44"},"referencedDeclaration":734,"src":"392:32:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"global":false,"id":2567,"libraryName":{"id":2564,"name":"ERC20DetailedStorage","nameLocations":["436:20:44"],"nodeType":"IdentifierPath","referencedDeclaration":2747,"src":"436:20:44"},"nodeType":"UsingForDirective","src":"430:59:44","typeName":{"id":2566,"nodeType":"UserDefinedTypeName","pathNode":{"id":2565,"name":"ERC20DetailedStorage.Layout","nameLocations":["461:20:44","482:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"461:27:44"},"referencedDeclaration":2574,"src":"461:27:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}}},{"canonicalName":"ERC20DetailedStorage.Layout","id":2574,"members":[{"constant":false,"id":2569,"mutability":"mutable","name":"tokenName","nameLocation":"526:9:44","nodeType":"VariableDeclaration","scope":2574,"src":"519:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2568,"name":"string","nodeType":"ElementaryTypeName","src":"519:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2571,"mutability":"mutable","name":"tokenSymbol","nameLocation":"552:11:44","nodeType":"VariableDeclaration","scope":2574,"src":"545:18:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2570,"name":"string","nodeType":"ElementaryTypeName","src":"545:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2573,"mutability":"mutable","name":"tokenDecimals","nameLocation":"579:13:44","nodeType":"VariableDeclaration","scope":2574,"src":"573:19:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2572,"name":"uint8","nodeType":"ElementaryTypeName","src":"573:5:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"name":"Layout","nameLocation":"502:6:44","nodeType":"StructDefinition","scope":2747,"src":"495:104:44","visibility":"public"},{"constant":true,"id":2587,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"631:19:44","nodeType":"VariableDeclaration","scope":2747,"src":"605:129:44","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"605:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e746f6b656e2e45524332302e455243323044657461696c65642e73746f72616765","id":2581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"679:48:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a82","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Detailed.storage\""},"value":"animoca.core.token.ERC20.ERC20Detailed.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a82","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Detailed.storage\""}],"id":2580,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"669:9:44","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"669:59:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"661:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:44","typeDescriptions":{}}},"id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"661:68:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"732:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"661:72:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"653:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"653:7:44","typeDescriptions":{}}},"id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"653:81:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":2600,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"766:21:44","nodeType":"VariableDeclaration","scope":2747,"src":"740:129:44","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"740:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e746f6b656e2e45524332302e455243323044657461696c65642e7068617365","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"816:46:44","typeDescriptions":{"typeIdentifier":"t_stringliteral_d217496980d1cb14720b20a80af36676bbece8e5feeb5d8970a9681a2c76bb75","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Detailed.phase\""},"value":"animoca.core.token.ERC20.ERC20Detailed.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d217496980d1cb14720b20a80af36676bbece8e5feeb5d8970a9681a2c76bb75","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Detailed.phase\""}],"id":2593,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"806:9:44","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"806:57:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"798:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2591,"name":"uint256","nodeType":"ElementaryTypeName","src":"798:7:44","typeDescriptions":{}}},"id":2596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"798:66:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"867:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"798:70:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"790:7:44","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"790:7:44","typeDescriptions":{}}},"id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:79:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":2643,"nodeType":"Block","src":"1457:224:44","statements":[{"expression":{"id":2617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2613,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"1467:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2615,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1469:9:44","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":2569,"src":"1467:11:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2616,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"1481:9:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1467:23:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2618,"nodeType":"ExpressionStatement","src":"1467:23:44"},{"expression":{"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2619,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"1500:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2621,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1502:11:44","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":2571,"src":"1500:13:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2622,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"1516:11:44","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1500:27:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2624,"nodeType":"ExpressionStatement","src":"1500:27:44"},{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2625,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"1537:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2627,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1539:13:44","memberName":"tokenDecimals","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1537:15:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2628,"name":"tokenDecimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"1555:13:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1537:31:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2630,"nodeType":"ExpressionStatement","src":"1537:31:44"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":2637,"name":"IERC20Detailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"1640:14:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Detailed_$2435_$","typeString":"type(contract IERC20Detailed)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Detailed_$2435_$","typeString":"type(contract IERC20Detailed)"}],"id":2636,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1635:4:44","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:20:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Detailed_$2435","typeString":"type(contract IERC20Detailed)"}},"id":2639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1656:11:44","memberName":"interfaceId","nodeType":"MemberAccess","src":"1635:32:44","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1669:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2631,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1578:25:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1604:6:44","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"1578:32:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1578:34:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1613:21:44","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"1578:56:44","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1578:96:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2642,"nodeType":"ExpressionStatement","src":"1578:96:44"}]},"documentation":{"id":2601,"nodeType":"StructuredDocumentation","src":"876:413:44","text":"@notice Initializes the storage with the token details (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenDecimals The token decimals."},"id":2644,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1303:15:44","nodeType":"FunctionDefinition","parameters":{"id":2611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"s","nameLocation":"1343:1:44","nodeType":"VariableDeclaration","scope":2644,"src":"1328:16:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"},"typeName":{"id":2603,"nodeType":"UserDefinedTypeName","pathNode":{"id":2602,"name":"Layout","nameLocations":["1328:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"1328:6:44"},"referencedDeclaration":2574,"src":"1328:6:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":2606,"mutability":"mutable","name":"tokenName","nameLocation":"1368:9:44","nodeType":"VariableDeclaration","scope":2644,"src":"1354:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2605,"name":"string","nodeType":"ElementaryTypeName","src":"1354:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2608,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1401:11:44","nodeType":"VariableDeclaration","scope":2644,"src":"1387:25:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2607,"name":"string","nodeType":"ElementaryTypeName","src":"1387:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2610,"mutability":"mutable","name":"tokenDecimals","nameLocation":"1428:13:44","nodeType":"VariableDeclaration","scope":2644,"src":"1422:19:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2609,"name":"uint8","nodeType":"ElementaryTypeName","src":"1422:5:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1318:129:44"},"returnParameters":{"id":2612,"nodeType":"ParameterList","parameters":[],"src":"1457:0:44"},"scope":2747,"src":"1294:387:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2694,"nodeType":"Block","src":"2388:288:44","statements":[{"expression":{"arguments":[{"id":2660,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"2427:21:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2450:1:44","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":2657,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"2398:19:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1088_$","typeString":"type(library ProxyInitialization)"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2418:8:44","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1087,"src":"2398:28:44","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2398:54:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2663,"nodeType":"ExpressionStatement","src":"2398:54:44"},{"expression":{"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2664,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"2462:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2464:9:44","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":2569,"src":"2462:11:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2667,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"2476:9:44","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2462:23:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2669,"nodeType":"ExpressionStatement","src":"2462:23:44"},{"expression":{"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2670,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"2495:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2497:11:44","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":2571,"src":"2495:13:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2673,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"2511:11:44","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2495:27:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2675,"nodeType":"ExpressionStatement","src":"2495:27:44"},{"expression":{"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2676,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"2532:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2534:13:44","memberName":"tokenDecimals","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2532:15:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2679,"name":"tokenDecimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"2550:13:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2532:31:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2681,"nodeType":"ExpressionStatement","src":"2532:31:44"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":2688,"name":"IERC20Detailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"2635:14:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Detailed_$2435_$","typeString":"type(contract IERC20Detailed)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Detailed_$2435_$","typeString":"type(contract IERC20Detailed)"}],"id":2687,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2630:4:44","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:20:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Detailed_$2435","typeString":"type(contract IERC20Detailed)"}},"id":2690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2651:11:44","memberName":"interfaceId","nodeType":"MemberAccess","src":"2630:32:44","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2664:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2682,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2573:25:44","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2599:6:44","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2573:32:44","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:34:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2608:21:44","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2573:56:44","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:96:44","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2693,"nodeType":"ExpressionStatement","src":"2573:96:44"}]},"documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"1687:535:44","text":"@notice Initializes the storage with the token details (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenDecimals The token decimals."},"id":2695,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2236:9:44","nodeType":"FunctionDefinition","parameters":{"id":2655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2648,"mutability":"mutable","name":"s","nameLocation":"2270:1:44","nodeType":"VariableDeclaration","scope":2695,"src":"2255:16:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"},"typeName":{"id":2647,"nodeType":"UserDefinedTypeName","pathNode":{"id":2646,"name":"Layout","nameLocations":["2255:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"2255:6:44"},"referencedDeclaration":2574,"src":"2255:6:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":2650,"mutability":"mutable","name":"tokenName","nameLocation":"2297:9:44","nodeType":"VariableDeclaration","scope":2695,"src":"2281:25:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2649,"name":"string","nodeType":"ElementaryTypeName","src":"2281:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2652,"mutability":"mutable","name":"tokenSymbol","nameLocation":"2332:11:44","nodeType":"VariableDeclaration","scope":2695,"src":"2316:27:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2651,"name":"string","nodeType":"ElementaryTypeName","src":"2316:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2654,"mutability":"mutable","name":"tokenDecimals","nameLocation":"2359:13:44","nodeType":"VariableDeclaration","scope":2695,"src":"2353:19:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2653,"name":"uint8","nodeType":"ElementaryTypeName","src":"2353:5:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2245:133:44"},"returnParameters":{"id":2656,"nodeType":"ParameterList","parameters":[],"src":"2388:0:44"},"scope":2747,"src":"2227:449:44","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2707,"nodeType":"Block","src":"2872:35:44","statements":[{"expression":{"expression":{"id":2704,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"2889:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2705,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2891:9:44","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":2569,"src":"2889:11:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2703,"id":2706,"nodeType":"Return","src":"2882:18:44"}]},"documentation":{"id":2696,"nodeType":"StructuredDocumentation","src":"2682:105:44","text":"@notice Gets the name of the token. E.g. \"My Token\".\n @return tokenName The name of the token."},"id":2708,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2801:4:44","nodeType":"FunctionDefinition","parameters":{"id":2700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2699,"mutability":"mutable","name":"s","nameLocation":"2821:1:44","nodeType":"VariableDeclaration","scope":2708,"src":"2806:16:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"},"typeName":{"id":2698,"nodeType":"UserDefinedTypeName","pathNode":{"id":2697,"name":"Layout","nameLocations":["2806:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"2806:6:44"},"referencedDeclaration":2574,"src":"2806:6:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}},"visibility":"internal"}],"src":"2805:18:44"},"returnParameters":{"id":2703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2702,"mutability":"mutable","name":"tokenName","nameLocation":"2861:9:44","nodeType":"VariableDeclaration","scope":2708,"src":"2847:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2701,"name":"string","nodeType":"ElementaryTypeName","src":"2847:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2846:25:44"},"scope":2747,"src":"2792:115:44","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2720,"nodeType":"Block","src":"3108:37:44","statements":[{"expression":{"expression":{"id":2717,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"3125:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2718,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3127:11:44","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":2571,"src":"3125:13:44","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2716,"id":2719,"nodeType":"Return","src":"3118:20:44"}]},"documentation":{"id":2709,"nodeType":"StructuredDocumentation","src":"2913:106:44","text":"@notice Gets the symbol of the token. E.g. \"TOK\".\n @return tokenSymbol The symbol of the token."},"id":2721,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"3033:6:44","nodeType":"FunctionDefinition","parameters":{"id":2713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"mutability":"mutable","name":"s","nameLocation":"3055:1:44","nodeType":"VariableDeclaration","scope":2721,"src":"3040:16:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"},"typeName":{"id":2711,"nodeType":"UserDefinedTypeName","pathNode":{"id":2710,"name":"Layout","nameLocations":["3040:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"3040:6:44"},"referencedDeclaration":2574,"src":"3040:6:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}},"visibility":"internal"}],"src":"3039:18:44"},"returnParameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2715,"mutability":"mutable","name":"tokenSymbol","nameLocation":"3095:11:44","nodeType":"VariableDeclaration","scope":2721,"src":"3081:25:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2714,"name":"string","nodeType":"ElementaryTypeName","src":"3081:6:44","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3080:27:44"},"scope":2747,"src":"3024:121:44","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2733,"nodeType":"Block","src":"3749:39:44","statements":[{"expression":{"expression":{"id":2730,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"3766:1:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":2731,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3768:13:44","memberName":"tokenDecimals","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3766:15:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":2729,"id":2732,"nodeType":"Return","src":"3759:22:44"}]},"documentation":{"id":2722,"nodeType":"StructuredDocumentation","src":"3151:516:44","text":"@notice Gets the number of decimals used to display the balances.\n @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n @return nbDecimals The number of decimals used to display the balances."},"id":2734,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3681:8:44","nodeType":"FunctionDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2725,"mutability":"mutable","name":"s","nameLocation":"3705:1:44","nodeType":"VariableDeclaration","scope":2734,"src":"3690:16:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"},"typeName":{"id":2724,"nodeType":"UserDefinedTypeName","pathNode":{"id":2723,"name":"Layout","nameLocations":["3690:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"3690:6:44"},"referencedDeclaration":2574,"src":"3690:6:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}},"visibility":"internal"}],"src":"3689:18:44"},"returnParameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"nbDecimals","nameLocation":"3737:10:44","nodeType":"VariableDeclaration","scope":2734,"src":"3731:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2727,"name":"uint8","nodeType":"ElementaryTypeName","src":"3731:5:44","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3730:18:44"},"scope":2747,"src":"3672:116:44","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2745,"nodeType":"Block","src":"3853:115:44","statements":[{"assignments":[2741],"declarations":[{"constant":false,"id":2741,"mutability":"mutable","name":"position","nameLocation":"3871:8:44","nodeType":"VariableDeclaration","scope":2745,"src":"3863:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3863:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2743,"initialValue":{"id":2742,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"3882:19:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3863:38:44"},{"AST":{"nodeType":"YulBlock","src":"3920:42:44","statements":[{"nodeType":"YulAssignment","src":"3934:18:44","value":{"name":"position","nodeType":"YulIdentifier","src":"3944:8:44"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3934:6:44"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2741,"isOffset":false,"isSlot":false,"src":"3944:8:44","valueSize":1},{"declaration":2738,"isOffset":false,"isSlot":true,"src":"3934:6:44","suffix":"slot","valueSize":1}],"id":2744,"nodeType":"InlineAssembly","src":"3911:51:44"}]},"id":2746,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3803:6:44","nodeType":"FunctionDefinition","parameters":{"id":2735,"nodeType":"ParameterList","parameters":[],"src":"3809:2:44"},"returnParameters":{"id":2739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2738,"mutability":"mutable","name":"s","nameLocation":"3850:1:44","nodeType":"VariableDeclaration","scope":2746,"src":"3835:16:44","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"},"typeName":{"id":2737,"nodeType":"UserDefinedTypeName","pathNode":{"id":2736,"name":"Layout","nameLocations":["3835:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"3835:6:44"},"referencedDeclaration":2574,"src":"3835:6:44","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}},"visibility":"internal"}],"src":"3834:18:44"},"scope":2747,"src":"3794:174:44","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2748,"src":"321:3649:44","usedErrors":[]}],"src":"32:3939:44"},"id":44},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol","exportedSymbols":{"ERC20MetadataStorage":[2838],"IERC20Metadata":[2445],"InterfaceDetectionStorage":[824],"ProxyInitialization":[1088]},"id":2839,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2749,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:45"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol","file":"./../interfaces/IERC20Metadata.sol","id":2751,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2839,"sourceUnit":2446,"src":"57:66:45","symbolAliases":[{"foreign":{"id":2750,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"65:14:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":2753,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2839,"sourceUnit":1089,"src":"124:87:45","symbolAliases":[{"foreign":{"id":2752,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"132:19:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":2755,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2839,"sourceUnit":825,"src":"212:107:45","symbolAliases":[{"foreign":{"id":2754,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"220:25:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC20MetadataStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2838,"linearizedBaseContracts":[2838],"name":"ERC20MetadataStorage","nameLocation":"329:20:45","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2759,"libraryName":{"id":2756,"name":"InterfaceDetectionStorage","nameLocations":["362:25:45"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"362:25:45"},"nodeType":"UsingForDirective","src":"356:69:45","typeName":{"id":2758,"nodeType":"UserDefinedTypeName","pathNode":{"id":2757,"name":"InterfaceDetectionStorage.Layout","nameLocations":["392:25:45","418:6:45"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"392:32:45"},"referencedDeclaration":734,"src":"392:32:45","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"global":false,"id":2763,"libraryName":{"id":2760,"name":"ERC20MetadataStorage","nameLocations":["436:20:45"],"nodeType":"IdentifierPath","referencedDeclaration":2838,"src":"436:20:45"},"nodeType":"UsingForDirective","src":"430:59:45","typeName":{"id":2762,"nodeType":"UserDefinedTypeName","pathNode":{"id":2761,"name":"ERC20MetadataStorage.Layout","nameLocations":["461:20:45","482:6:45"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"461:27:45"},"referencedDeclaration":2766,"src":"461:27:45","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"}}},{"canonicalName":"ERC20MetadataStorage.Layout","id":2766,"members":[{"constant":false,"id":2765,"mutability":"mutable","name":"uri","nameLocation":"526:3:45","nodeType":"VariableDeclaration","scope":2766,"src":"519:10:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2764,"name":"string","nodeType":"ElementaryTypeName","src":"519:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Layout","nameLocation":"502:6:45","nodeType":"StructDefinition","scope":2838,"src":"495:41:45","visibility":"public"},{"constant":true,"id":2779,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"568:19:45","nodeType":"VariableDeclaration","scope":2838,"src":"542:129:45","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"542:7:45","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e746f6b656e2e45524332302e45524332304d657461646174612e73746f72616765","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"616:48:45","typeDescriptions":{"typeIdentifier":"t_stringliteral_f41bf6a5db26bffdfab174dcf66b31fbba8fdb7e3db040721ce1e62d61839ceb","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Metadata.storage\""},"value":"animoca.core.token.ERC20.ERC20Metadata.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f41bf6a5db26bffdfab174dcf66b31fbba8fdb7e3db040721ce1e62d61839ceb","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Metadata.storage\""}],"id":2772,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"606:9:45","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"606:59:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"598:7:45","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2770,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:45","typeDescriptions":{}}},"id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"598:68:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"669:1:45","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"598:72:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"590:7:45","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"590:7:45","typeDescriptions":{}}},"id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"590:81:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":2795,"nodeType":"Block","src":"788:113:45","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2789,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"860:14:45","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$2445_$","typeString":"type(contract IERC20Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$2445_$","typeString":"type(contract IERC20Metadata)"}],"id":2788,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"855:4:45","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"855:20:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Metadata_$2445","typeString":"type(contract IERC20Metadata)"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"876:11:45","memberName":"interfaceId","nodeType":"MemberAccess","src":"855:32:45","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"889:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2783,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"798:25:45","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"824:6:45","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"798:32:45","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"798:34:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2787,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"833:21:45","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"798:56:45","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"798:96:45","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2794,"nodeType":"ExpressionStatement","src":"798:96:45"}]},"documentation":{"id":2780,"nodeType":"StructuredDocumentation","src":"678:80:45","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Metadata."},"id":2796,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"772:4:45","nodeType":"FunctionDefinition","parameters":{"id":2781,"nodeType":"ParameterList","parameters":[],"src":"776:2:45"},"returnParameters":{"id":2782,"nodeType":"ParameterList","parameters":[],"src":"788:0:45"},"scope":2838,"src":"763:138:45","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2811,"nodeType":"Block","src":"1046:28:45","statements":[{"expression":{"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2805,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"1056:1:45","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout storage pointer"}},"id":2807,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1058:3:45","memberName":"uri","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"1056:5:45","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2808,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"1064:3:45","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"1056:11:45","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2810,"nodeType":"ExpressionStatement","src":"1056:11:45"}]},"documentation":{"id":2797,"nodeType":"StructuredDocumentation","src":"907:65:45","text":"@notice Sets the token URI.\n @param uri The token URI."},"id":2812,"implemented":true,"kind":"function","modifiers":[],"name":"setTokenURI","nameLocation":"986:11:45","nodeType":"FunctionDefinition","parameters":{"id":2803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"s","nameLocation":"1013:1:45","nodeType":"VariableDeclaration","scope":2812,"src":"998:16:45","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"},"typeName":{"id":2799,"nodeType":"UserDefinedTypeName","pathNode":{"id":2798,"name":"Layout","nameLocations":["998:6:45"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"998:6:45"},"referencedDeclaration":2766,"src":"998:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":2802,"mutability":"mutable","name":"uri","nameLocation":"1032:3:45","nodeType":"VariableDeclaration","scope":2812,"src":"1016:19:45","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2801,"name":"string","nodeType":"ElementaryTypeName","src":"1016:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"997:39:45"},"returnParameters":{"id":2804,"nodeType":"ParameterList","parameters":[],"src":"1046:0:45"},"scope":2838,"src":"977:97:45","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2824,"nodeType":"Block","src":"1247:29:45","statements":[{"expression":{"expression":{"id":2821,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"1264:1:45","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout storage pointer"}},"id":2822,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1266:3:45","memberName":"uri","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"1264:5:45","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2820,"id":2823,"nodeType":"Return","src":"1257:12:45"}]},"documentation":{"id":2813,"nodeType":"StructuredDocumentation","src":"1080:84:45","text":"@notice Gets the token metadata URI.\n @return uri The token metadata URI."},"id":2825,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1178:8:45","nodeType":"FunctionDefinition","parameters":{"id":2817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2816,"mutability":"mutable","name":"s","nameLocation":"1202:1:45","nodeType":"VariableDeclaration","scope":2825,"src":"1187:16:45","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"},"typeName":{"id":2815,"nodeType":"UserDefinedTypeName","pathNode":{"id":2814,"name":"Layout","nameLocations":["1187:6:45"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"1187:6:45"},"referencedDeclaration":2766,"src":"1187:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"}},"visibility":"internal"}],"src":"1186:18:45"},"returnParameters":{"id":2820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2819,"mutability":"mutable","name":"uri","nameLocation":"1242:3:45","nodeType":"VariableDeclaration","scope":2825,"src":"1228:17:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2818,"name":"string","nodeType":"ElementaryTypeName","src":"1228:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1227:19:45"},"scope":2838,"src":"1169:107:45","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2836,"nodeType":"Block","src":"1341:115:45","statements":[{"assignments":[2832],"declarations":[{"constant":false,"id":2832,"mutability":"mutable","name":"position","nameLocation":"1359:8:45","nodeType":"VariableDeclaration","scope":2836,"src":"1351:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1351:7:45","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2834,"initialValue":{"id":2833,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"1370:19:45","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1351:38:45"},{"AST":{"nodeType":"YulBlock","src":"1408:42:45","statements":[{"nodeType":"YulAssignment","src":"1422:18:45","value":{"name":"position","nodeType":"YulIdentifier","src":"1432:8:45"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"1422:6:45"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2832,"isOffset":false,"isSlot":false,"src":"1432:8:45","valueSize":1},{"declaration":2829,"isOffset":false,"isSlot":true,"src":"1422:6:45","suffix":"slot","valueSize":1}],"id":2835,"nodeType":"InlineAssembly","src":"1399:51:45"}]},"id":2837,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1291:6:45","nodeType":"FunctionDefinition","parameters":{"id":2826,"nodeType":"ParameterList","parameters":[],"src":"1297:2:45"},"returnParameters":{"id":2830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2829,"mutability":"mutable","name":"s","nameLocation":"1338:1:45","nodeType":"VariableDeclaration","scope":2837,"src":"1323:16:45","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"},"typeName":{"id":2828,"nodeType":"UserDefinedTypeName","pathNode":{"id":2827,"name":"Layout","nameLocations":["1323:6:45"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"1323:6:45"},"referencedDeclaration":2766,"src":"1323:6:45","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2766_storage_ptr","typeString":"struct ERC20MetadataStorage.Layout"}},"visibility":"internal"}],"src":"1322:18:45"},"scope":2838,"src":"1282:174:45","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2839,"src":"321:1137:45","usedErrors":[]}],"src":"32:1427:45"},"id":45},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol","exportedSymbols":{"ERC20DetailedStorage":[2747],"ERC20PermitStorage":[3067],"ERC20Storage":[4505],"IERC20Permit":[2503],"InterfaceDetectionStorage":[824],"StorageSlot":[5558]},"id":3068,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2840,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:46"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol","file":"./../interfaces/IERC20Permit.sol","id":2842,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3068,"sourceUnit":2504,"src":"57:62:46","symbolAliases":[{"foreign":{"id":2841,"name":"IERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"65:12:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":2844,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3068,"sourceUnit":5559,"src":"120:74:46","symbolAliases":[{"foreign":{"id":2843,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5558,"src":"128:11:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"./ERC20Storage.sol","id":2846,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3068,"sourceUnit":4506,"src":"195:48:46","symbolAliases":[{"foreign":{"id":2845,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"203:12:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol","file":"./ERC20DetailedStorage.sol","id":2848,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3068,"sourceUnit":2748,"src":"244:64:46","symbolAliases":[{"foreign":{"id":2847,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"252:20:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":2850,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3068,"sourceUnit":825,"src":"309:107:46","symbolAliases":[{"foreign":{"id":2849,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"317:25:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC20PermitStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3067,"linearizedBaseContracts":[3067],"name":"ERC20PermitStorage","nameLocation":"426:18:46","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2854,"libraryName":{"id":2851,"name":"ERC20Storage","nameLocations":["457:12:46"],"nodeType":"IdentifierPath","referencedDeclaration":4505,"src":"457:12:46"},"nodeType":"UsingForDirective","src":"451:43:46","typeName":{"id":2853,"nodeType":"UserDefinedTypeName","pathNode":{"id":2852,"name":"ERC20Storage.Layout","nameLocations":["474:12:46","487:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"474:19:46"},"referencedDeclaration":3113,"src":"474:19:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"global":false,"id":2858,"libraryName":{"id":2855,"name":"ERC20DetailedStorage","nameLocations":["505:20:46"],"nodeType":"IdentifierPath","referencedDeclaration":2747,"src":"505:20:46"},"nodeType":"UsingForDirective","src":"499:59:46","typeName":{"id":2857,"nodeType":"UserDefinedTypeName","pathNode":{"id":2856,"name":"ERC20DetailedStorage.Layout","nameLocations":["530:20:46","551:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"530:27:46"},"referencedDeclaration":2574,"src":"530:27:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout"}}},{"global":false,"id":2862,"libraryName":{"id":2859,"name":"InterfaceDetectionStorage","nameLocations":["569:25:46"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"569:25:46"},"nodeType":"UsingForDirective","src":"563:69:46","typeName":{"id":2861,"nodeType":"UserDefinedTypeName","pathNode":{"id":2860,"name":"InterfaceDetectionStorage.Layout","nameLocations":["599:25:46","625:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"599:32:46"},"referencedDeclaration":734,"src":"599:32:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC20PermitStorage.Layout","id":2867,"members":[{"constant":false,"id":2866,"mutability":"mutable","name":"accountNonces","nameLocation":"690:13:46","nodeType":"VariableDeclaration","scope":2867,"src":"662:41:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2865,"keyType":{"id":2863,"name":"address","nodeType":"ElementaryTypeName","src":"670:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"662:27:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2864,"name":"uint256","nodeType":"ElementaryTypeName","src":"681:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"645:6:46","nodeType":"StructDefinition","scope":3067,"src":"638:72:46","visibility":"public"},{"constant":true,"id":2880,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"742:19:46","nodeType":"VariableDeclaration","scope":3067,"src":"716:127:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2868,"name":"bytes32","nodeType":"ElementaryTypeName","src":"716:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e746f6b656e2e45524332302e45524332305065726d69742e73746f72616765","id":2874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"790:46:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_93fe0ff7226b064a4a8f0b09910762afb4bc2441835792c021ffd78cd513011e","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Permit.storage\""},"value":"animoca.core.token.ERC20.ERC20Permit.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_93fe0ff7226b064a4a8f0b09910762afb4bc2441835792c021ffd78cd513011e","typeString":"literal_string \"animoca.core.token.ERC20.ERC20Permit.storage\""}],"id":2873,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"780:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:57:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"772:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2871,"name":"uint256","nodeType":"ElementaryTypeName","src":"772:7:46","typeDescriptions":{}}},"id":2876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"772:66:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"841:1:46","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"772:70:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"764:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2869,"name":"bytes32","nodeType":"ElementaryTypeName","src":"764:7:46","typeDescriptions":{}}},"id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"764:79:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":2885,"mutability":"constant","name":"PERMIT_TYPEHASH","nameLocation":"950:15:46","nodeType":"VariableDeclaration","scope":3067,"src":"924:139:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"924:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":2883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"978:84:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":2882,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"968:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"968:95:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":2901,"nodeType":"Block","src":"1178:111:46","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2895,"name":"IERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"1250:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Permit_$2503_$","typeString":"type(contract IERC20Permit)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Permit_$2503_$","typeString":"type(contract IERC20Permit)"}],"id":2894,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1245:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1245:18:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Permit_$2503","typeString":"type(contract IERC20Permit)"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1264:11:46","memberName":"interfaceId","nodeType":"MemberAccess","src":"1245:30:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1277:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2889,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1188:25:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1214:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"1188:32:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2893,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1223:21:46","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"1188:56:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:94:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2900,"nodeType":"ExpressionStatement","src":"1188:94:46"}]},"documentation":{"id":2886,"nodeType":"StructuredDocumentation","src":"1070:78:46","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Permit."},"id":2902,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1162:4:46","nodeType":"FunctionDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[],"src":"1166:2:46"},"returnParameters":{"id":2888,"nodeType":"ParameterList","parameters":[],"src":"1178:0:46"},"scope":3067,"src":"1153:136:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2998,"nodeType":"Block","src":"2312:592:46","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2924,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"2330:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2347:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2339:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2925,"name":"address","nodeType":"ElementaryTypeName","src":"2339:7:46","typeDescriptions":{}}},"id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2339:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2330:19:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207065726d69742066726f6d2061646472657373283029","id":2930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2351:31:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_3a6dd7da9592c148a3c1346620b226302bc667b6fd5e83c82aa507db666797af","typeString":"literal_string \"ERC20: permit from address(0)\""},"value":"ERC20: permit from address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3a6dd7da9592c148a3c1346620b226302bc667b6fd5e83c82aa507db666797af","typeString":"literal_string \"ERC20: permit from address(0)\""}],"id":2923,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2322:7:46","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2322:61:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2932,"nodeType":"ExpressionStatement","src":"2322:61:46"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2934,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2401:5:46","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2407:9:46","memberName":"timestamp","nodeType":"MemberAccess","src":"2401:15:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2936,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"2420:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2401:27:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2065787069726564207065726d6974","id":2938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2430:23:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ac59a98b6fe7e99399c85395b7df87e761b25e505bace1750860cfaa1803c24","typeString":"literal_string \"ERC20: expired permit\""},"value":"ERC20: expired permit"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ac59a98b6fe7e99399c85395b7df87e761b25e505bace1750860cfaa1803c24","typeString":"literal_string \"ERC20: expired permit\""}],"id":2933,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2393:7:46","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2393:61:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2940,"nodeType":"ExpressionStatement","src":"2393:61:46"},{"id":2987,"nodeType":"UncheckedBlock","src":"2464:372:46","statements":[{"assignments":[2942],"declarations":[{"constant":false,"id":2942,"mutability":"mutable","name":"hashStruct","nameLocation":"2496:10:46","nodeType":"VariableDeclaration","scope":2987,"src":"2488:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2488:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2958,"initialValue":{"arguments":[{"arguments":[{"id":2946,"name":"PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"2530:15:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2947,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"2547:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2948,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"2554:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"2563:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2570:25:46","subExpression":{"baseExpression":{"expression":{"id":2950,"name":"st","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"2570:2:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout storage pointer"}},"id":2951,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2573:13:46","memberName":"accountNonces","nodeType":"MemberAccess","referencedDeclaration":2866,"src":"2570:16:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2953,"indexExpression":{"id":2952,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"2587:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2570:23:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2955,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"2597:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2944,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2519:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2523:6:46","memberName":"encode","nodeType":"MemberAccess","src":"2519:10:46","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2519:87:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2943,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2509:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:98:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2488:119:46"},{"assignments":[2960],"declarations":[{"constant":false,"id":2960,"mutability":"mutable","name":"hash","nameLocation":"2629:4:46","nodeType":"VariableDeclaration","scope":2987,"src":"2621:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2621:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2970,"initialValue":{"arguments":[{"arguments":[{"hexValue":"1901","id":2964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2663:10:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"arguments":[],"expression":{"argumentTypes":[],"id":2965,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"2675:16:46","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2675:18:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2967,"name":"hashStruct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"2695:10:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2962,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2646:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2650:12:46","memberName":"encodePacked","nodeType":"MemberAccess","src":"2646:16:46","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2646:60:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2961,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2636:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2636:71:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2621:86:46"},{"assignments":[2972],"declarations":[{"constant":false,"id":2972,"mutability":"mutable","name":"signer","nameLocation":"2729:6:46","nodeType":"VariableDeclaration","scope":2987,"src":"2721:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2971,"name":"address","nodeType":"ElementaryTypeName","src":"2721:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2979,"initialValue":{"arguments":[{"id":2974,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"2748:4:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2975,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"2754:1:46","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2976,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"2757:1:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2977,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"2760:1:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2973,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"2738:9:46","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:24:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2721:41:46"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2981,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"2784:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2982,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"2794:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2784:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e76616c6964207065726d6974","id":2984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2801:23:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e7a3a2e3040cbfa3c00db0248b72c5f4c00492e57a5353baf25410416702f76","typeString":"literal_string \"ERC20: invalid permit\""},"value":"ERC20: invalid permit"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e7a3a2e3040cbfa3c00db0248b72c5f4c00492e57a5353baf25410416702f76","typeString":"literal_string \"ERC20: invalid permit\""}],"id":2980,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2776:7:46","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2776:49:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2986,"nodeType":"ExpressionStatement","src":"2776:49:46"}]},{"expression":{"arguments":[{"id":2993,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"2875:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2994,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"2882:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2995,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"2891:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2988,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"2845:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$4505_$","typeString":"type(library ERC20Storage)"}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2858:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":4474,"src":"2845:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2845:21:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2992,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2867:7:46","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3289,"src":"2845:29:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2845:52:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2997,"nodeType":"ExpressionStatement","src":"2845:52:46"}]},"documentation":{"id":2903,"nodeType":"StructuredDocumentation","src":"1295:802:46","text":"@notice Sets the allowance to an account from another account using a signed permit.\n @dev Reverts if `owner` is the zero address.\n @dev Reverts if the current blocktime is greather than `deadline`.\n @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n @dev Emits an {IERC20-Approval} event.\n @param owner The token owner granting the allowance to `spender`.\n @param spender The token spender being granted the allowance by `owner`.\n @param value The allowance amount to grant.\n @param deadline The deadline from which the permit signature is no longer valid.\n @param v Permit signature v parameter\n @param r Permit signature r parameter.\n @param s Permit signature s parameter."},"id":2999,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"2111:6:46","nodeType":"FunctionDefinition","parameters":{"id":2921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"st","nameLocation":"2142:2:46","nodeType":"VariableDeclaration","scope":2999,"src":"2127:17:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"},"typeName":{"id":2905,"nodeType":"UserDefinedTypeName","pathNode":{"id":2904,"name":"Layout","nameLocations":["2127:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2867,"src":"2127:6:46"},"referencedDeclaration":2867,"src":"2127:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":2908,"mutability":"mutable","name":"owner","nameLocation":"2162:5:46","nodeType":"VariableDeclaration","scope":2999,"src":"2154:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2907,"name":"address","nodeType":"ElementaryTypeName","src":"2154:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2910,"mutability":"mutable","name":"spender","nameLocation":"2185:7:46","nodeType":"VariableDeclaration","scope":2999,"src":"2177:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2909,"name":"address","nodeType":"ElementaryTypeName","src":"2177:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2912,"mutability":"mutable","name":"value","nameLocation":"2210:5:46","nodeType":"VariableDeclaration","scope":2999,"src":"2202:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2914,"mutability":"mutable","name":"deadline","nameLocation":"2233:8:46","nodeType":"VariableDeclaration","scope":2999,"src":"2225:16:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"2225:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"v","nameLocation":"2257:1:46","nodeType":"VariableDeclaration","scope":2999,"src":"2251:7:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2915,"name":"uint8","nodeType":"ElementaryTypeName","src":"2251:5:46","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2918,"mutability":"mutable","name":"r","nameLocation":"2276:1:46","nodeType":"VariableDeclaration","scope":2999,"src":"2268:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2917,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2268:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2920,"mutability":"mutable","name":"s","nameLocation":"2295:1:46","nodeType":"VariableDeclaration","scope":2999,"src":"2287:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2287:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2117:185:46"},"returnParameters":{"id":2922,"nodeType":"ParameterList","parameters":[],"src":"2312:0:46"},"scope":3067,"src":"2102:802:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3015,"nodeType":"Block","src":"3173:46:46","statements":[{"expression":{"baseExpression":{"expression":{"id":3010,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"3190:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout storage pointer"}},"id":3011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3192:13:46","memberName":"accountNonces","nodeType":"MemberAccess","referencedDeclaration":2866,"src":"3190:15:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3013,"indexExpression":{"id":3012,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"3206:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3190:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3009,"id":3014,"nodeType":"Return","src":"3183:29:46"}]},"documentation":{"id":3000,"nodeType":"StructuredDocumentation","src":"2910:171:46","text":"@notice Gets the current permit nonce of an account.\n @param owner The account to check the nonce of.\n @return nonce The current permit nonce of `owner`."},"id":3016,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3095:6:46","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3003,"mutability":"mutable","name":"s","nameLocation":"3117:1:46","nodeType":"VariableDeclaration","scope":3016,"src":"3102:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"},"typeName":{"id":3002,"nodeType":"UserDefinedTypeName","pathNode":{"id":3001,"name":"Layout","nameLocations":["3102:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2867,"src":"3102:6:46"},"referencedDeclaration":2867,"src":"3102:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3005,"mutability":"mutable","name":"owner","nameLocation":"3128:5:46","nodeType":"VariableDeclaration","scope":3016,"src":"3120:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3004,"name":"address","nodeType":"ElementaryTypeName","src":"3120:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3101:33:46"},"returnParameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"nonce","nameLocation":"3166:5:46","nodeType":"VariableDeclaration","scope":3016,"src":"3158:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3007,"name":"uint256","nodeType":"ElementaryTypeName","src":"3158:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3157:15:46"},"scope":3067,"src":"3086:133:46","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3053,"nodeType":"Block","src":"4286:485:46","statements":[{"assignments":[3023],"declarations":[{"constant":false,"id":3023,"mutability":"mutable","name":"chainId","nameLocation":"4304:7:46","nodeType":"VariableDeclaration","scope":3053,"src":"4296:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3022,"name":"uint256","nodeType":"ElementaryTypeName","src":"4296:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3024,"nodeType":"VariableDeclarationStatement","src":"4296:15:46"},{"AST":{"nodeType":"YulBlock","src":"4330:44:46","statements":[{"nodeType":"YulAssignment","src":"4344:20:46","value":{"arguments":[],"functionName":{"name":"chainid","nodeType":"YulIdentifier","src":"4355:7:46"},"nodeType":"YulFunctionCall","src":"4355:9:46"},"variableNames":[{"name":"chainId","nodeType":"YulIdentifier","src":"4344:7:46"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3023,"isOffset":false,"isSlot":false,"src":"4344:7:46","valueSize":1}],"id":3025,"nodeType":"InlineAssembly","src":"4321:53:46"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4471:84:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":3029,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4461:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4461:95:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3035,"name":"ERC20DetailedStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"4594:20:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20DetailedStorage_$2747_$","typeString":"type(library ERC20DetailedStorage)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4615:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":2746,"src":"4594:27:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function () pure returns (struct ERC20DetailedStorage.Layout storage pointer)"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4594:29:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2574_storage_ptr","typeString":"struct ERC20DetailedStorage.Layout storage pointer"}},"id":3038,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4624:4:46","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":2708,"src":"4594:34:46","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$2574_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_Layout_$2574_storage_ptr_$","typeString":"function (struct ERC20DetailedStorage.Layout storage pointer) view returns (string memory)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4594:36:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4588:5:46","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3033,"name":"bytes","nodeType":"ElementaryTypeName","src":"4588:5:46","typeDescriptions":{}}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:43:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3032,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4578:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:54:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"31","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4664:3:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""}],"id":3042,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4654:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:14:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3045,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"4690:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3048,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4727:4:46","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20PermitStorage_$3067","typeString":"library ERC20PermitStorage"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC20PermitStorage_$3067","typeString":"library ERC20PermitStorage"}],"id":3047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4719:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3046,"name":"address","nodeType":"ElementaryTypeName","src":"4719:7:46","typeDescriptions":{}}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4719:13:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3027,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4429:3:46","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4433:6:46","memberName":"encode","nodeType":"MemberAccess","src":"4429:10:46","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4429:321:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3026,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4402:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4402:362:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3021,"id":3052,"nodeType":"Return","src":"4383:381:46"}]},"documentation":{"id":3017,"nodeType":"StructuredDocumentation","src":"3225:943:46","text":"@notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n  keccak256(\n      abi.encode(\n          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n          keccak256(bytes(name)),\n          keccak256(bytes(version)),\n          chainId,\n          address(this)))\n  where\n   - `name` (string) is the ERC-20 token name.\n   - `version` (string) refers to the ERC-20 token contract version.\n   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n   - `verifyingContract` (address) is the ERC-20 token contract address.\n @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits."},"id":3054,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"4235:16:46","nodeType":"FunctionDefinition","parameters":{"id":3018,"nodeType":"ParameterList","parameters":[],"src":"4251:2:46"},"returnParameters":{"id":3021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3054,"src":"4277:7:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3019,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4276:9:46"},"scope":3067,"src":"4226:545:46","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3065,"nodeType":"Block","src":"4836:115:46","statements":[{"assignments":[3061],"declarations":[{"constant":false,"id":3061,"mutability":"mutable","name":"position","nameLocation":"4854:8:46","nodeType":"VariableDeclaration","scope":3065,"src":"4846:16:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4846:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3063,"initialValue":{"id":3062,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"4865:19:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4846:38:46"},{"AST":{"nodeType":"YulBlock","src":"4903:42:46","statements":[{"nodeType":"YulAssignment","src":"4917:18:46","value":{"name":"position","nodeType":"YulIdentifier","src":"4927:8:46"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"4917:6:46"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3061,"isOffset":false,"isSlot":false,"src":"4927:8:46","valueSize":1},{"declaration":3058,"isOffset":false,"isSlot":true,"src":"4917:6:46","suffix":"slot","valueSize":1}],"id":3064,"nodeType":"InlineAssembly","src":"4894:51:46"}]},"id":3066,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4786:6:46","nodeType":"FunctionDefinition","parameters":{"id":3055,"nodeType":"ParameterList","parameters":[],"src":"4792:2:46"},"returnParameters":{"id":3059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3058,"mutability":"mutable","name":"s","nameLocation":"4833:1:46","nodeType":"VariableDeclaration","scope":3066,"src":"4818:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"},"typeName":{"id":3057,"nodeType":"UserDefinedTypeName","pathNode":{"id":3056,"name":"Layout","nameLocations":["4818:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2867,"src":"4818:6:46"},"referencedDeclaration":2867,"src":"4818:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2867_storage_ptr","typeString":"struct ERC20PermitStorage.Layout"}},"visibility":"internal"}],"src":"4817:18:46"},"scope":3067,"src":"4777:174:46","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3068,"src":"418:4535:46","usedErrors":[]}],"src":"32:4922:46"},"id":46},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","exportedSymbols":{"Address":[5476],"ERC20Storage":[4505],"IERC20":[2325],"IERC20Allowance":[2349],"IERC20BatchTransfers":[2379],"IERC20Burnable":[2413],"IERC20Mintable":[2467],"IERC20Receiver":[2521],"IERC20SafeTransfers":[2551],"InterfaceDetectionStorage":[824],"ProxyInitialization":[1088]},"id":4506,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3069,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:47"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","file":"./../interfaces/IERC20.sol","id":3071,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":2326,"src":"57:50:47","symbolAliases":[{"foreign":{"id":3070,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"65:6:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol","file":"./../interfaces/IERC20Allowance.sol","id":3073,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":2350,"src":"108:68:47","symbolAliases":[{"foreign":{"id":3072,"name":"IERC20Allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"116:15:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol","file":"./../interfaces/IERC20BatchTransfers.sol","id":3075,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":2380,"src":"177:78:47","symbolAliases":[{"foreign":{"id":3074,"name":"IERC20BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"185:20:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","file":"./../interfaces/IERC20SafeTransfers.sol","id":3077,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":2552,"src":"256:76:47","symbolAliases":[{"foreign":{"id":3076,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"264:19:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","file":"./../interfaces/IERC20Mintable.sol","id":3079,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":2468,"src":"333:66:47","symbolAliases":[{"foreign":{"id":3078,"name":"IERC20Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"341:14:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol","file":"./../interfaces/IERC20Burnable.sol","id":3081,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":2414,"src":"400:66:47","symbolAliases":[{"foreign":{"id":3080,"name":"IERC20Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"408:14:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"./../interfaces/IERC20Receiver.sol","id":3083,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":2522,"src":"467:66:47","symbolAliases":[{"foreign":{"id":3082,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2521,"src":"475:14:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":3085,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":5477,"src":"534:66:47","symbolAliases":[{"foreign":{"id":3084,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"542:7:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":3087,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":1089,"src":"601:87:47","symbolAliases":[{"foreign":{"id":3086,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"609:19:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":3089,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4506,"sourceUnit":825,"src":"689:107:47","symbolAliases":[{"foreign":{"id":3088,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"697:25:47","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC20Storage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4505,"linearizedBaseContracts":[4505],"name":"ERC20Storage","nameLocation":"806:12:47","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3092,"libraryName":{"id":3090,"name":"Address","nameLocations":["831:7:47"],"nodeType":"IdentifierPath","referencedDeclaration":5476,"src":"831:7:47"},"nodeType":"UsingForDirective","src":"825:26:47","typeName":{"id":3091,"name":"address","nodeType":"ElementaryTypeName","src":"843:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":3096,"libraryName":{"id":3093,"name":"ERC20Storage","nameLocations":["862:12:47"],"nodeType":"IdentifierPath","referencedDeclaration":4505,"src":"862:12:47"},"nodeType":"UsingForDirective","src":"856:43:47","typeName":{"id":3095,"nodeType":"UserDefinedTypeName","pathNode":{"id":3094,"name":"ERC20Storage.Layout","nameLocations":["879:12:47","892:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"879:19:47"},"referencedDeclaration":3113,"src":"879:19:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"global":false,"id":3100,"libraryName":{"id":3097,"name":"InterfaceDetectionStorage","nameLocations":["910:25:47"],"nodeType":"IdentifierPath","referencedDeclaration":824,"src":"910:25:47"},"nodeType":"UsingForDirective","src":"904:69:47","typeName":{"id":3099,"nodeType":"UserDefinedTypeName","pathNode":{"id":3098,"name":"InterfaceDetectionStorage.Layout","nameLocations":["940:25:47","966:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"940:32:47"},"referencedDeclaration":734,"src":"940:32:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC20Storage.Layout","id":3113,"members":[{"constant":false,"id":3104,"mutability":"mutable","name":"balances","nameLocation":"1031:8:47","nodeType":"VariableDeclaration","scope":3113,"src":"1003:36:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3103,"keyType":{"id":3101,"name":"address","nodeType":"ElementaryTypeName","src":"1011:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1003:27:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3102,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":3110,"mutability":"mutable","name":"allowances","nameLocation":"1097:10:47","nodeType":"VariableDeclaration","scope":3113,"src":"1049:58:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":3109,"keyType":{"id":3105,"name":"address","nodeType":"ElementaryTypeName","src":"1057:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1049:47:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":3108,"keyType":{"id":3106,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1068:27:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1087:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"constant":false,"id":3112,"mutability":"mutable","name":"supply","nameLocation":"1125:6:47","nodeType":"VariableDeclaration","scope":3113,"src":"1117:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3111,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Layout","nameLocation":"986:6:47","nodeType":"StructDefinition","scope":4505,"src":"979:159:47","visibility":"public"},{"constant":true,"id":3126,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"1170:19:47","nodeType":"VariableDeclaration","scope":4505,"src":"1144:121:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1144:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e746f6b656e2e45524332302e45524332302e73746f72616765","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1218:40:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef","typeString":"literal_string \"animoca.core.token.ERC20.ERC20.storage\""},"value":"animoca.core.token.ERC20.ERC20.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef","typeString":"literal_string \"animoca.core.token.ERC20.ERC20.storage\""}],"id":3119,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1208:9:47","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1208:51:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1200:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1200:7:47","typeDescriptions":{}}},"id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1200:60:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1263:1:47","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1200:64:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1192:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1192:7:47","typeDescriptions":{}}},"id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1192:73:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":3131,"mutability":"constant","name":"ERC20_RECEIVED","nameLocation":"1297:14:47","nodeType":"VariableDeclaration","scope":4505,"src":"1272:81:47","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3127,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1272:6:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":3128,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2521,"src":"1314:14:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2521_$","typeString":"type(contract IERC20Receiver)"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1329:15:47","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":2520,"src":"1314:30:47","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC20Receiver.onERC20Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1345:8:47","memberName":"selector","nodeType":"MemberAccess","src":"1314:39:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3139,"name":"Transfer","nameLocation":"1366:8:47","nodeType":"EventDefinition","parameters":{"id":3138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3133,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1391:4:47","nodeType":"VariableDeclaration","scope":3139,"src":"1375:20:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3132,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3135,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1413:2:47","nodeType":"VariableDeclaration","scope":3139,"src":"1397:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3134,"name":"address","nodeType":"ElementaryTypeName","src":"1397:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3137,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1425:5:47","nodeType":"VariableDeclaration","scope":3139,"src":"1417:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3136,"name":"uint256","nodeType":"ElementaryTypeName","src":"1417:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1374:57:47"},"src":"1360:72:47"},{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3147,"name":"Approval","nameLocation":"1443:8:47","nodeType":"EventDefinition","parameters":{"id":3146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3141,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1468:5:47","nodeType":"VariableDeclaration","scope":3147,"src":"1452:21:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3140,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3143,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"1491:7:47","nodeType":"VariableDeclaration","scope":3147,"src":"1475:23:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3142,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3145,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1508:5:47","nodeType":"VariableDeclaration","scope":3147,"src":"1500:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3144,"name":"uint256","nodeType":"ElementaryTypeName","src":"1500:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1451:63:47"},"src":"1437:78:47"},{"body":{"id":3180,"nodeType":"Block","src":"1639:268:47","statements":[{"assignments":[3155],"declarations":[{"constant":false,"id":3155,"mutability":"mutable","name":"erc165Layout","nameLocation":"1690:12:47","nodeType":"VariableDeclaration","scope":3180,"src":"1649:53:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":3154,"nodeType":"UserDefinedTypeName","pathNode":{"id":3153,"name":"InterfaceDetectionStorage.Layout","nameLocations":["1649:25:47","1675:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"1649:32:47"},"referencedDeclaration":734,"src":"1649:32:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"id":3159,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3156,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1705:25:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1731:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"1705:32:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1705:34:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1649:90:47"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":3164,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"1789:6:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2325_$","typeString":"type(contract IERC20)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20_$2325_$","typeString":"type(contract IERC20)"}],"id":3163,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1784:4:47","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1784:12:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20_$2325","typeString":"type(contract IERC20)"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1797:11:47","memberName":"interfaceId","nodeType":"MemberAccess","src":"1784:24:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1810:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3160,"name":"erc165Layout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"1749:12:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":3162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1762:21:47","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"1749:34:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1749:66:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3169,"nodeType":"ExpressionStatement","src":"1749:66:47"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":3174,"name":"IERC20Allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"1865:15:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Allowance_$2349_$","typeString":"type(contract IERC20Allowance)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Allowance_$2349_$","typeString":"type(contract IERC20Allowance)"}],"id":3173,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1860:4:47","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1860:21:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Allowance_$2349","typeString":"type(contract IERC20Allowance)"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1882:11:47","memberName":"interfaceId","nodeType":"MemberAccess","src":"1860:33:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1895:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3170,"name":"erc165Layout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"1825:12:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":3172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1838:21:47","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"1825:34:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1825:75:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3179,"nodeType":"ExpressionStatement","src":"1825:75:47"}]},"documentation":{"id":3148,"nodeType":"StructuredDocumentation","src":"1521:88:47","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance."},"id":3181,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1623:4:47","nodeType":"FunctionDefinition","parameters":{"id":3149,"nodeType":"ParameterList","parameters":[],"src":"1627:2:47"},"returnParameters":{"id":3150,"nodeType":"ParameterList","parameters":[],"src":"1639:0:47"},"scope":4505,"src":"1614:293:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3197,"nodeType":"Block","src":"2048:119:47","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":3191,"name":"IERC20BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"2120:20:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20BatchTransfers_$2379_$","typeString":"type(contract IERC20BatchTransfers)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20BatchTransfers_$2379_$","typeString":"type(contract IERC20BatchTransfers)"}],"id":3190,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2115:4:47","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2115:26:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20BatchTransfers_$2379","typeString":"type(contract IERC20BatchTransfers)"}},"id":3193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2142:11:47","memberName":"interfaceId","nodeType":"MemberAccess","src":"2115:38:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":3194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2155:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3185,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2058:25:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2084:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2058:32:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2058:34:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":3189,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2093:21:47","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2058:56:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2058:102:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3196,"nodeType":"ExpressionStatement","src":"2058:102:47"}]},"documentation":{"id":3182,"nodeType":"StructuredDocumentation","src":"1913:86:47","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers."},"id":3198,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20BatchTransfers","nameLocation":"2013:23:47","nodeType":"FunctionDefinition","parameters":{"id":3183,"nodeType":"ParameterList","parameters":[],"src":"2036:2:47"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[],"src":"2048:0:47"},"scope":4505,"src":"2004:163:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3214,"nodeType":"Block","src":"2306:118:47","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":3208,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"2378:19:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20SafeTransfers_$2551_$","typeString":"type(contract IERC20SafeTransfers)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20SafeTransfers_$2551_$","typeString":"type(contract IERC20SafeTransfers)"}],"id":3207,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2373:4:47","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2373:25:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20SafeTransfers_$2551","typeString":"type(contract IERC20SafeTransfers)"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2399:11:47","memberName":"interfaceId","nodeType":"MemberAccess","src":"2373:37:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":3211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2412:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3202,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2316:25:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2342:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2316:32:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:34:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":3206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2351:21:47","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2316:56:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:101:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3213,"nodeType":"ExpressionStatement","src":"2316:101:47"}]},"documentation":{"id":3199,"nodeType":"StructuredDocumentation","src":"2173:85:47","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers."},"id":3215,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20SafeTransfers","nameLocation":"2272:22:47","nodeType":"FunctionDefinition","parameters":{"id":3200,"nodeType":"ParameterList","parameters":[],"src":"2294:2:47"},"returnParameters":{"id":3201,"nodeType":"ParameterList","parameters":[],"src":"2306:0:47"},"scope":4505,"src":"2263:161:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3231,"nodeType":"Block","src":"2553:113:47","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":3225,"name":"IERC20Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"2625:14:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Mintable_$2467_$","typeString":"type(contract IERC20Mintable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Mintable_$2467_$","typeString":"type(contract IERC20Mintable)"}],"id":3224,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2620:4:47","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2620:20:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Mintable_$2467","typeString":"type(contract IERC20Mintable)"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2641:11:47","memberName":"interfaceId","nodeType":"MemberAccess","src":"2620:32:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2654:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3219,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2563:25:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2589:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2563:32:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:34:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":3223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2598:21:47","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2563:56:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:96:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3230,"nodeType":"ExpressionStatement","src":"2563:96:47"}]},"documentation":{"id":3216,"nodeType":"StructuredDocumentation","src":"2430:80:47","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Mintable."},"id":3232,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20Mintable","nameLocation":"2524:17:47","nodeType":"FunctionDefinition","parameters":{"id":3217,"nodeType":"ParameterList","parameters":[],"src":"2541:2:47"},"returnParameters":{"id":3218,"nodeType":"ParameterList","parameters":[],"src":"2553:0:47"},"scope":4505,"src":"2515:151:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3248,"nodeType":"Block","src":"2795:113:47","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":3242,"name":"IERC20Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"2867:14:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Burnable_$2413_$","typeString":"type(contract IERC20Burnable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Burnable_$2413_$","typeString":"type(contract IERC20Burnable)"}],"id":3241,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2862:4:47","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2862:20:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Burnable_$2413","typeString":"type(contract IERC20Burnable)"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2883:11:47","memberName":"interfaceId","nodeType":"MemberAccess","src":"2862:32:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":3245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2896:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3236,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2805:25:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$824_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2831:6:47","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":823,"src":"2805:32:47","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2805:34:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$734_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":3240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2840:21:47","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":777,"src":"2805:56:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$734_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$734_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2805:96:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3247,"nodeType":"ExpressionStatement","src":"2805:96:47"}]},"documentation":{"id":3233,"nodeType":"StructuredDocumentation","src":"2672:80:47","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Burnable."},"id":3249,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20Burnable","nameLocation":"2766:17:47","nodeType":"FunctionDefinition","parameters":{"id":3234,"nodeType":"ParameterList","parameters":[],"src":"2783:2:47"},"returnParameters":{"id":3235,"nodeType":"ParameterList","parameters":[],"src":"2795:0:47"},"scope":4505,"src":"2757:151:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3288,"nodeType":"Block","src":"3465:172:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3263,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"3483:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3502:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3494:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3264,"name":"address","nodeType":"ElementaryTypeName","src":"3494:7:47","typeDescriptions":{}}},"id":3267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3494:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3483:21:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76616c20746f2061646472657373283029","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3506:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af","typeString":"literal_string \"ERC20: approval to address(0)\""},"value":"ERC20: approval to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af","typeString":"literal_string \"ERC20: approval to address(0)\""}],"id":3262,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3475:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:63:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3271,"nodeType":"ExpressionStatement","src":"3475:63:47"},{"expression":{"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":3272,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"3548:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3276,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3550:10:47","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":3110,"src":"3548:12:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3277,"indexExpression":{"id":3274,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"3561:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3548:19:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3278,"indexExpression":{"id":3275,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"3568:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3548:28:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"3579:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3548:36:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3281,"nodeType":"ExpressionStatement","src":"3548:36:47"},{"eventCall":{"arguments":[{"id":3283,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"3608:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3284,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"3615:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"3624:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3282,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"3599:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3599:31:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3287,"nodeType":"EmitStatement","src":"3594:36:47"}]},"documentation":{"id":3250,"nodeType":"StructuredDocumentation","src":"2914:417:47","text":"@notice Sets the allowance to an account by an owner.\n @dev Note: This function implements {ERC20-approve(address,uint256)}.\n @dev Reverts if `spender` is the zero address.\n @dev Emits an {Approval} event.\n @param owner The account to set the allowance from.\n @param spender The account being granted the allowance by `owner`.\n @param value The allowance amount to grant."},"id":3289,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3345:7:47","nodeType":"FunctionDefinition","parameters":{"id":3260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"s","nameLocation":"3377:1:47","nodeType":"VariableDeclaration","scope":3289,"src":"3362:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3252,"nodeType":"UserDefinedTypeName","pathNode":{"id":3251,"name":"Layout","nameLocations":["3362:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"3362:6:47"},"referencedDeclaration":3113,"src":"3362:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3255,"mutability":"mutable","name":"owner","nameLocation":"3396:5:47","nodeType":"VariableDeclaration","scope":3289,"src":"3388:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3254,"name":"address","nodeType":"ElementaryTypeName","src":"3388:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3257,"mutability":"mutable","name":"spender","nameLocation":"3419:7:47","nodeType":"VariableDeclaration","scope":3289,"src":"3411:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3256,"name":"address","nodeType":"ElementaryTypeName","src":"3411:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3259,"mutability":"mutable","name":"value","nameLocation":"3444:5:47","nodeType":"VariableDeclaration","scope":3289,"src":"3436:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3258,"name":"uint256","nodeType":"ElementaryTypeName","src":"3436:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3352:103:47"},"returnParameters":{"id":3261,"nodeType":"ParameterList","parameters":[],"src":"3465:0:47"},"scope":4505,"src":"3336:301:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3360,"nodeType":"Block","src":"4357:508:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3303,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"4375:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4394:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4386:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3304,"name":"address","nodeType":"ElementaryTypeName","src":"4386:7:47","typeDescriptions":{}}},"id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4386:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4375:21:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76616c20746f2061646472657373283029","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4398:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af","typeString":"literal_string \"ERC20: approval to address(0)\""},"value":"ERC20: approval to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af","typeString":"literal_string \"ERC20: approval to address(0)\""}],"id":3302,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4367:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:63:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3311,"nodeType":"ExpressionStatement","src":"4367:63:47"},{"assignments":[3313],"declarations":[{"constant":false,"id":3313,"mutability":"mutable","name":"allowance_","nameLocation":"4448:10:47","nodeType":"VariableDeclaration","scope":3360,"src":"4440:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3312,"name":"uint256","nodeType":"ElementaryTypeName","src":"4440:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3320,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":3314,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4461:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4463:10:47","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":3110,"src":"4461:12:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3317,"indexExpression":{"id":3316,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"4474:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4461:19:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3319,"indexExpression":{"id":3318,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"4481:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4461:28:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4440:49:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3321,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"4503:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4512:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4503:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3353,"nodeType":"IfStatement","src":"4499:309:47","trueBody":{"id":3352,"nodeType":"Block","src":"4515:293:47","statements":[{"id":3351,"nodeType":"UncheckedBlock","src":"4529:269:47","statements":[{"assignments":[3325],"declarations":[{"constant":false,"id":3325,"mutability":"mutable","name":"newAllowance","nameLocation":"4565:12:47","nodeType":"VariableDeclaration","scope":3351,"src":"4557:20:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3324,"name":"uint256","nodeType":"ElementaryTypeName","src":"4557:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3329,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"4580:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"4593:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4580:18:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4557:41:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3331,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"4624:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3332,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"4639:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4624:25:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20616c6c6f77616e6365206f766572666c6f77","id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4651:27:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_357f75c7f4cdbe2492cf8e424be0b1f3fbf884416a3c5ab251c16e149296f9be","typeString":"literal_string \"ERC20: allowance overflow\""},"value":"ERC20: allowance overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_357f75c7f4cdbe2492cf8e424be0b1f3fbf884416a3c5ab251c16e149296f9be","typeString":"literal_string \"ERC20: allowance overflow\""}],"id":3330,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4616:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4616:63:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3336,"nodeType":"ExpressionStatement","src":"4616:63:47"},{"expression":{"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":3337,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"4697:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4699:10:47","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":3110,"src":"4697:12:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3342,"indexExpression":{"id":3339,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"4710:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4697:19:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3343,"indexExpression":{"id":3340,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"4717:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4697:28:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3344,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"4728:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4697:43:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3346,"nodeType":"ExpressionStatement","src":"4697:43:47"},{"expression":{"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3347,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"4758:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3348,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"4771:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4758:25:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3350,"nodeType":"ExpressionStatement","src":"4758:25:47"}]}]}},{"eventCall":{"arguments":[{"id":3355,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"4831:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3356,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"4838:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3357,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"4847:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3354,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"4822:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4822:36:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3359,"nodeType":"EmitStatement","src":"4817:41:47"}]},"documentation":{"id":3290,"nodeType":"StructuredDocumentation","src":"3643:570:47","text":"@notice Increases the allowance granted to an account by an owner.\n @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\n @dev Reverts if `spender` is the zero address.\n @dev Reverts if `spender`'s allowance by `owner` overflows.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n @param owner The account increasing the allowance.\n @param spender The account whose allowance is being increased.\n @param value The allowance amount increase."},"id":3361,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"4227:17:47","nodeType":"FunctionDefinition","parameters":{"id":3300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3293,"mutability":"mutable","name":"s","nameLocation":"4269:1:47","nodeType":"VariableDeclaration","scope":3361,"src":"4254:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3292,"nodeType":"UserDefinedTypeName","pathNode":{"id":3291,"name":"Layout","nameLocations":["4254:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"4254:6:47"},"referencedDeclaration":3113,"src":"4254:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3295,"mutability":"mutable","name":"owner","nameLocation":"4288:5:47","nodeType":"VariableDeclaration","scope":3361,"src":"4280:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3294,"name":"address","nodeType":"ElementaryTypeName","src":"4280:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3297,"mutability":"mutable","name":"spender","nameLocation":"4311:7:47","nodeType":"VariableDeclaration","scope":3361,"src":"4303:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3296,"name":"address","nodeType":"ElementaryTypeName","src":"4303:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3299,"mutability":"mutable","name":"value","nameLocation":"4336:5:47","nodeType":"VariableDeclaration","scope":3361,"src":"4328:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3298,"name":"uint256","nodeType":"ElementaryTypeName","src":"4328:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4244:103:47"},"returnParameters":{"id":3301,"nodeType":"ParameterList","parameters":[],"src":"4357:0:47"},"scope":4505,"src":"4218:647:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3440,"nodeType":"Block","src":"5607:671:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3375,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"5625:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5644:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5636:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3376,"name":"address","nodeType":"ElementaryTypeName","src":"5636:7:47","typeDescriptions":{}}},"id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5636:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5625:21:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76616c20746f2061646472657373283029","id":3381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5648:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af","typeString":"literal_string \"ERC20: approval to address(0)\""},"value":"ERC20: approval to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af","typeString":"literal_string \"ERC20: approval to address(0)\""}],"id":3374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5617:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5617:63:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3383,"nodeType":"ExpressionStatement","src":"5617:63:47"},{"assignments":[3385],"declarations":[{"constant":false,"id":3385,"mutability":"mutable","name":"allowance_","nameLocation":"5698:10:47","nodeType":"VariableDeclaration","scope":3440,"src":"5690:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3384,"name":"uint256","nodeType":"ElementaryTypeName","src":"5690:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3392,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":3386,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"5711:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3387,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5713:10:47","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":3110,"src":"5711:12:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3389,"indexExpression":{"id":3388,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"5724:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5711:19:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3391,"indexExpression":{"id":3390,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"5731:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5711:28:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5690:49:47"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3393,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"5754:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":3396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5773:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3395,"name":"uint256","nodeType":"ElementaryTypeName","src":"5773:7:47","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3394,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5768:4:47","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5768:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5782:3:47","memberName":"max","nodeType":"MemberAccess","src":"5768:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5754:31:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"5789:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5798:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5789:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5754:45:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3433,"nodeType":"IfStatement","src":"5750:471:47","trueBody":{"id":3432,"nodeType":"Block","src":"5801:420:47","statements":[{"id":3431,"nodeType":"UncheckedBlock","src":"5815:396:47","statements":[{"assignments":[3405],"declarations":[{"constant":false,"id":3405,"mutability":"mutable","name":"newAllowance","nameLocation":"5974:12:47","nodeType":"VariableDeclaration","scope":3431,"src":"5966:20:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3404,"name":"uint256","nodeType":"ElementaryTypeName","src":"5966:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3409,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3406,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"5989:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"6002:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5989:18:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5966:41:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3411,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"6033:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3412,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"6048:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6033:25:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6060:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":3410,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6025:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6025:67:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3416,"nodeType":"ExpressionStatement","src":"6025:67:47"},{"expression":{"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":3417,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"6110:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6112:10:47","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":3110,"src":"6110:12:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3422,"indexExpression":{"id":3419,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"6123:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6110:19:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3423,"indexExpression":{"id":3420,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"6130:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6110:28:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3424,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"6141:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6110:43:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3426,"nodeType":"ExpressionStatement","src":"6110:43:47"},{"expression":{"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3427,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"6171:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3428,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"6184:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6171:25:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3430,"nodeType":"ExpressionStatement","src":"6171:25:47"}]}]}},{"eventCall":{"arguments":[{"id":3435,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"6244:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3436,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"6251:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3437,"name":"allowance_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"6260:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3434,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3147,"src":"6235:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6235:36:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3439,"nodeType":"EmitStatement","src":"6230:41:47"}]},"documentation":{"id":3362,"nodeType":"StructuredDocumentation","src":"4871:592:47","text":"@notice Decreases the allowance granted to an account by an owner.\n @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\n @dev Reverts if `spender` is the zero address.\n @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n @param owner The account decreasing the allowance.\n @param spender The account whose allowance is being decreased.\n @param value The allowance amount decrease."},"id":3441,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"5477:17:47","nodeType":"FunctionDefinition","parameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"s","nameLocation":"5519:1:47","nodeType":"VariableDeclaration","scope":3441,"src":"5504:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3364,"nodeType":"UserDefinedTypeName","pathNode":{"id":3363,"name":"Layout","nameLocations":["5504:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"5504:6:47"},"referencedDeclaration":3113,"src":"5504:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3367,"mutability":"mutable","name":"owner","nameLocation":"5538:5:47","nodeType":"VariableDeclaration","scope":3441,"src":"5530:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3366,"name":"address","nodeType":"ElementaryTypeName","src":"5530:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"spender","nameLocation":"5561:7:47","nodeType":"VariableDeclaration","scope":3441,"src":"5553:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3368,"name":"address","nodeType":"ElementaryTypeName","src":"5553:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"value","nameLocation":"5586:5:47","nodeType":"VariableDeclaration","scope":3441,"src":"5578:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3370,"name":"uint256","nodeType":"ElementaryTypeName","src":"5578:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5494:103:47"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[],"src":"5607:0:47"},"scope":4505,"src":"5468:810:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3517,"nodeType":"Block","src":"6897:519:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3455,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"6915:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6929:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6921:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3456,"name":"address","nodeType":"ElementaryTypeName","src":"6921:7:47","typeDescriptions":{}}},"id":3459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6921:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6915:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f2061646472657373283029","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6933:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7","typeString":"literal_string \"ERC20: transfer to address(0)\""},"value":"ERC20: transfer to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7","typeString":"literal_string \"ERC20: transfer to address(0)\""}],"id":3454,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6907:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6907:58:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3463,"nodeType":"ExpressionStatement","src":"6907:58:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"6980:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6989:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6980:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3510,"nodeType":"IfStatement","src":"6976:393:47","trueBody":{"id":3509,"nodeType":"Block","src":"6992:377:47","statements":[{"assignments":[3468],"declarations":[{"constant":false,"id":3468,"mutability":"mutable","name":"balance","nameLocation":"7014:7:47","nodeType":"VariableDeclaration","scope":3509,"src":"7006:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"7006:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3473,"initialValue":{"baseExpression":{"expression":{"id":3469,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"7024:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7026:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"7024:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3472,"indexExpression":{"id":3471,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"7035:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7024:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7006:34:47"},{"id":3508,"nodeType":"UncheckedBlock","src":"7054:305:47","statements":[{"assignments":[3475],"declarations":[{"constant":false,"id":3475,"mutability":"mutable","name":"newBalance","nameLocation":"7090:10:47","nodeType":"VariableDeclaration","scope":3508,"src":"7082:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3474,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3479,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3476,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"7103:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3477,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"7113:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7103:15:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3481,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"7144:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3482,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"7157:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7144:20:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","id":3484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7166:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""},"value":"ERC20: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""}],"id":3480,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7136:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7136:60:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3486,"nodeType":"ExpressionStatement","src":"7136:60:47"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3487,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"7218:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3488,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"7226:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7218:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3507,"nodeType":"IfStatement","src":"7214:131:47","trueBody":{"id":3506,"nodeType":"Block","src":"7230:115:47","statements":[{"expression":{"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3490,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"7252:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3493,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7254:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"7252:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3494,"indexExpression":{"id":3492,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"7263:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7252:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3495,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"7271:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7252:29:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3497,"nodeType":"ExpressionStatement","src":"7252:29:47"},{"expression":{"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3498,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"7303:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3501,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7305:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"7303:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3502,"indexExpression":{"id":3500,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"7314:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7303:14:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"7321:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7303:23:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3505,"nodeType":"ExpressionStatement","src":"7303:23:47"}]}}]}]}},{"eventCall":{"arguments":[{"id":3512,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"7393:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3513,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"7399:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"7403:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3511,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7384:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7384:25:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3516,"nodeType":"EmitStatement","src":"7379:30:47"}]},"documentation":{"id":3442,"nodeType":"StructuredDocumentation","src":"6284:484:47","text":"@notice Transfers an amount of tokens from an account to a recipient.\n @dev Note: This function implements {ERC20-transfer(address,uint256)}.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Emits a {Transfer} event.\n @param from The account transferring the tokens.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer."},"id":3518,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"6782:8:47","nodeType":"FunctionDefinition","parameters":{"id":3452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"s","nameLocation":"6815:1:47","nodeType":"VariableDeclaration","scope":3518,"src":"6800:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3444,"nodeType":"UserDefinedTypeName","pathNode":{"id":3443,"name":"Layout","nameLocations":["6800:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"6800:6:47"},"referencedDeclaration":3113,"src":"6800:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3447,"mutability":"mutable","name":"from","nameLocation":"6834:4:47","nodeType":"VariableDeclaration","scope":3518,"src":"6826:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3446,"name":"address","nodeType":"ElementaryTypeName","src":"6826:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3449,"mutability":"mutable","name":"to","nameLocation":"6856:2:47","nodeType":"VariableDeclaration","scope":3518,"src":"6848:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3448,"name":"address","nodeType":"ElementaryTypeName","src":"6848:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3451,"mutability":"mutable","name":"value","nameLocation":"6876:5:47","nodeType":"VariableDeclaration","scope":3518,"src":"6868:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3450,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6790:97:47"},"returnParameters":{"id":3453,"nodeType":"ParameterList","parameters":[],"src":"6897:0:47"},"scope":4505,"src":"6773:643:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3554,"nodeType":"Block","src":"8322:138:47","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3533,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8336:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3534,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"8344:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8336:14:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3545,"nodeType":"IfStatement","src":"8332:85:47","trueBody":{"id":3544,"nodeType":"Block","src":"8352:65:47","statements":[{"expression":{"arguments":[{"id":3539,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8386:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3540,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"8392:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"8400:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3536,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"8366:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3538,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8368:17:47","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":3441,"src":"8366:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8366:40:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3543,"nodeType":"ExpressionStatement","src":"8366:40:47"}]}},{"expression":{"arguments":[{"id":3549,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8437:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3550,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"8443:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"8447:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3546,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"8426:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8428:8:47","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"8426:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:27:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3553,"nodeType":"ExpressionStatement","src":"8426:27:47"}]},"documentation":{"id":3519,"nodeType":"StructuredDocumentation","src":"7422:743:47","text":"@notice Transfers an amount of tokens from an account to a recipient by a sender.\n @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits a {Transfer} event.\n @dev Optionally emits an {Approval} event if `sender` is not `from`.\n @param sender The message sender.\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer."},"id":3555,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"8179:12:47","nodeType":"FunctionDefinition","parameters":{"id":3531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3522,"mutability":"mutable","name":"s","nameLocation":"8216:1:47","nodeType":"VariableDeclaration","scope":3555,"src":"8201:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3521,"nodeType":"UserDefinedTypeName","pathNode":{"id":3520,"name":"Layout","nameLocations":["8201:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"8201:6:47"},"referencedDeclaration":3113,"src":"8201:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3524,"mutability":"mutable","name":"sender","nameLocation":"8235:6:47","nodeType":"VariableDeclaration","scope":3555,"src":"8227:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3523,"name":"address","nodeType":"ElementaryTypeName","src":"8227:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3526,"mutability":"mutable","name":"from","nameLocation":"8259:4:47","nodeType":"VariableDeclaration","scope":3555,"src":"8251:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3525,"name":"address","nodeType":"ElementaryTypeName","src":"8251:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3528,"mutability":"mutable","name":"to","nameLocation":"8281:2:47","nodeType":"VariableDeclaration","scope":3555,"src":"8273:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3527,"name":"address","nodeType":"ElementaryTypeName","src":"8273:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3530,"mutability":"mutable","name":"value","nameLocation":"8301:5:47","nodeType":"VariableDeclaration","scope":3555,"src":"8293:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3529,"name":"uint256","nodeType":"ElementaryTypeName","src":"8293:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8191:121:47"},"returnParameters":{"id":3532,"nodeType":"ParameterList","parameters":[],"src":"8322:0:47"},"scope":4505,"src":"8170:290:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3720,"nodeType":"Block","src":"9443:1586:47","statements":[{"assignments":[3571],"declarations":[{"constant":false,"id":3571,"mutability":"mutable","name":"length","nameLocation":"9461:6:47","nodeType":"VariableDeclaration","scope":3720,"src":"9453:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3570,"name":"uint256","nodeType":"ElementaryTypeName","src":"9453:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3574,"initialValue":{"expression":{"id":3572,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"9470:10:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9481:6:47","memberName":"length","nodeType":"MemberAccess","src":"9470:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9453:34:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3576,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"9505:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3577,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"9515:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9522:6:47","memberName":"length","nodeType":"MemberAccess","src":"9515:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9505:23:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e636f6e73697374656e7420617272617973","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9530:28:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""},"value":"ERC20: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""}],"id":3575,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9497:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9497:62:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3582,"nodeType":"ExpressionStatement","src":"9497:62:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3583,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"9574:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9584:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9574:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3587,"nodeType":"IfStatement","src":"9570:24:47","trueBody":{"functionReturnParameters":3569,"id":3586,"nodeType":"Return","src":"9587:7:47"}},{"assignments":[3589],"declarations":[{"constant":false,"id":3589,"mutability":"mutable","name":"balance","nameLocation":"9612:7:47","nodeType":"VariableDeclaration","scope":3720,"src":"9604:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3588,"name":"uint256","nodeType":"ElementaryTypeName","src":"9604:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3594,"initialValue":{"baseExpression":{"expression":{"id":3590,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9622:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3591,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9624:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"9622:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3593,"indexExpression":{"id":3592,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"9633:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9622:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9604:34:47"},{"assignments":[3596],"declarations":[{"constant":false,"id":3596,"mutability":"mutable","name":"totalValue","nameLocation":"9657:10:47","nodeType":"VariableDeclaration","scope":3720,"src":"9649:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3595,"name":"uint256","nodeType":"ElementaryTypeName","src":"9649:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3597,"nodeType":"VariableDeclarationStatement","src":"9649:18:47"},{"assignments":[3599],"declarations":[{"constant":false,"id":3599,"mutability":"mutable","name":"selfTransferTotalValue","nameLocation":"9685:22:47","nodeType":"VariableDeclaration","scope":3720,"src":"9677:30:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3598,"name":"uint256","nodeType":"ElementaryTypeName","src":"9677:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3600,"nodeType":"VariableDeclarationStatement","src":"9677:30:47"},{"id":3719,"nodeType":"UncheckedBlock","src":"9717:1306:47","statements":[{"body":{"id":3685,"nodeType":"Block","src":"9775:827:47","statements":[{"assignments":[3611],"declarations":[{"constant":false,"id":3611,"mutability":"mutable","name":"to","nameLocation":"9801:2:47","nodeType":"VariableDeclaration","scope":3685,"src":"9793:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3610,"name":"address","nodeType":"ElementaryTypeName","src":"9793:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3615,"initialValue":{"baseExpression":{"id":3612,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"9806:10:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3614,"indexExpression":{"id":3613,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"9817:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9806:13:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9793:26:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3617,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"9845:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9859:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9851:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3618,"name":"address","nodeType":"ElementaryTypeName","src":"9851:7:47","typeDescriptions":{}}},"id":3621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9851:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9845:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f2061646472657373283029","id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9863:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7","typeString":"literal_string \"ERC20: transfer to address(0)\""},"value":"ERC20: transfer to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7","typeString":"literal_string \"ERC20: transfer to address(0)\""}],"id":3616,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9837:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9837:58:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3625,"nodeType":"ExpressionStatement","src":"9837:58:47"},{"assignments":[3627],"declarations":[{"constant":false,"id":3627,"mutability":"mutable","name":"value","nameLocation":"9922:5:47","nodeType":"VariableDeclaration","scope":3685,"src":"9914:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3626,"name":"uint256","nodeType":"ElementaryTypeName","src":"9914:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3631,"initialValue":{"baseExpression":{"id":3628,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"9930:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3630,"indexExpression":{"id":3629,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"9937:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9930:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9914:25:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3632,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"9961:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9970:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9961:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3678,"nodeType":"IfStatement","src":"9957:583:47","trueBody":{"id":3677,"nodeType":"Block","src":"9973:567:47","statements":[{"assignments":[3636],"declarations":[{"constant":false,"id":3636,"mutability":"mutable","name":"newTotalValue","nameLocation":"10003:13:47","nodeType":"VariableDeclaration","scope":3677,"src":"9995:21:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3635,"name":"uint256","nodeType":"ElementaryTypeName","src":"9995:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3640,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3637,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"10019:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"10032:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10019:18:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9995:42:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3642,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"10067:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3643,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"10083:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10067:26:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2076616c756573206f766572666c6f77","id":3645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10095:24:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1","typeString":"literal_string \"ERC20: values overflow\""},"value":"ERC20: values overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1","typeString":"literal_string \"ERC20: values overflow\""}],"id":3641,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10059:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10059:61:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3647,"nodeType":"ExpressionStatement","src":"10059:61:47"},{"expression":{"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3648,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"10142:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3649,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"10155:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10142:26:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3651,"nodeType":"ExpressionStatement","src":"10142:26:47"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"10194:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3653,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"10202:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10194:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3675,"nodeType":"Block","src":"10284:238:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"10318:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3666,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"10327:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10318:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10336:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""},"value":"ERC20: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""}],"id":3664,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10310:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10310:56:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3670,"nodeType":"ExpressionStatement","src":"10310:56:47"},{"expression":{"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3671,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"10392:22:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3672,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"10418:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10392:31:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3674,"nodeType":"ExpressionStatement","src":"10392:31:47"}]},"id":3676,"nodeType":"IfStatement","src":"10190:332:47","trueBody":{"id":3663,"nodeType":"Block","src":"10206:72:47","statements":[{"expression":{"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3655,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"10232:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3658,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10234:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"10232:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3659,"indexExpression":{"id":3657,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"10243:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10232:14:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"10250:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10232:23:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3662,"nodeType":"ExpressionStatement","src":"10232:23:47"}]}}]}},{"eventCall":{"arguments":[{"id":3680,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"10571:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3681,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"10577:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3682,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"10581:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3679,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"10562:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10562:25:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3684,"nodeType":"EmitStatement","src":"10557:30:47"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"9757:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3605,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"9762:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9757:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3686,"initializationExpression":{"assignments":[3602],"declarations":[{"constant":false,"id":3602,"mutability":"mutable","name":"i","nameLocation":"9754:1:47","nodeType":"VariableDeclaration","scope":3686,"src":"9746:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3601,"name":"uint256","nodeType":"ElementaryTypeName","src":"9746:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3603,"nodeType":"VariableDeclarationStatement","src":"9746:9:47"},"loopExpression":{"expression":{"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"9770:3:47","subExpression":{"id":3607,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"9772:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3609,"nodeType":"ExpressionStatement","src":"9770:3:47"},"nodeType":"ForStatement","src":"9741:861:47"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3687,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"10620:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10634:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10620:15:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3690,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"10639:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3691,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"10653:22:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10639:36:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10620:55:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3718,"nodeType":"IfStatement","src":"10616:397:47","trueBody":{"id":3717,"nodeType":"Block","src":"10677:336:47","statements":[{"assignments":[3695],"declarations":[{"constant":false,"id":3695,"mutability":"mutable","name":"newBalance","nameLocation":"10703:10:47","nodeType":"VariableDeclaration","scope":3717,"src":"10695:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3694,"name":"uint256","nodeType":"ElementaryTypeName","src":"10695:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3699,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3696,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"10716:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3697,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"10726:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10716:20:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10695:41:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3701,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"10762:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3702,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"10775:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10762:20:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10784:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""},"value":"ERC20: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""}],"id":3700,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10754:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10754:60:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3706,"nodeType":"ExpressionStatement","src":"10754:60:47"},{"expression":{"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3707,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"10888:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10890:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"10888:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3711,"indexExpression":{"id":3709,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"10899:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10888:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3712,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3695,"src":"10907:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3713,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"10920:22:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10907:35:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10888:54:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3716,"nodeType":"ExpressionStatement","src":"10888:54:47"}]}}]}]},"documentation":{"id":3556,"nodeType":"StructuredDocumentation","src":"8592:686:47","text":"@notice Transfers multiple amounts of tokens from an account to multiple recipients.\n @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if `from` does not have at least `sum(values)` of balance.\n @dev Emits a {Transfer} event for each transfer.\n @param from The account transferring the tokens.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`."},"id":3721,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransfer","nameLocation":"9292:13:47","nodeType":"FunctionDefinition","parameters":{"id":3568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"s","nameLocation":"9330:1:47","nodeType":"VariableDeclaration","scope":3721,"src":"9315:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3558,"nodeType":"UserDefinedTypeName","pathNode":{"id":3557,"name":"Layout","nameLocations":["9315:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"9315:6:47"},"referencedDeclaration":3113,"src":"9315:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3561,"mutability":"mutable","name":"from","nameLocation":"9349:4:47","nodeType":"VariableDeclaration","scope":3721,"src":"9341:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3560,"name":"address","nodeType":"ElementaryTypeName","src":"9341:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"recipients","nameLocation":"9382:10:47","nodeType":"VariableDeclaration","scope":3721,"src":"9363:29:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3562,"name":"address","nodeType":"ElementaryTypeName","src":"9363:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3563,"nodeType":"ArrayTypeName","src":"9363:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3567,"mutability":"mutable","name":"values","nameLocation":"9421:6:47","nodeType":"VariableDeclaration","scope":3721,"src":"9402:25:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3565,"name":"uint256","nodeType":"ElementaryTypeName","src":"9402:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3566,"nodeType":"ArrayTypeName","src":"9402:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9305:128:47"},"returnParameters":{"id":3569,"nodeType":"ParameterList","parameters":[],"src":"9443:0:47"},"scope":4505,"src":"9283:1746:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3901,"nodeType":"Block","src":"12184:1688:47","statements":[{"assignments":[3739],"declarations":[{"constant":false,"id":3739,"mutability":"mutable","name":"length","nameLocation":"12202:6:47","nodeType":"VariableDeclaration","scope":3901,"src":"12194:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3738,"name":"uint256","nodeType":"ElementaryTypeName","src":"12194:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3742,"initialValue":{"expression":{"id":3740,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"12211:10:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12222:6:47","memberName":"length","nodeType":"MemberAccess","src":"12211:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12194:34:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3744,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"12246:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3745,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"12256:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12263:6:47","memberName":"length","nodeType":"MemberAccess","src":"12256:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12246:23:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e636f6e73697374656e7420617272617973","id":3748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12271:28:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""},"value":"ERC20: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""}],"id":3743,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12238:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12238:62:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3750,"nodeType":"ExpressionStatement","src":"12238:62:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3751,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"12315:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12325:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12315:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3755,"nodeType":"IfStatement","src":"12311:24:47","trueBody":{"functionReturnParameters":3737,"id":3754,"nodeType":"Return","src":"12328:7:47"}},{"assignments":[3757],"declarations":[{"constant":false,"id":3757,"mutability":"mutable","name":"balance","nameLocation":"12353:7:47","nodeType":"VariableDeclaration","scope":3901,"src":"12345:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3756,"name":"uint256","nodeType":"ElementaryTypeName","src":"12345:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3762,"initialValue":{"baseExpression":{"expression":{"id":3758,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"12363:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12365:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"12363:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3761,"indexExpression":{"id":3760,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12374:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12363:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12345:34:47"},{"assignments":[3764],"declarations":[{"constant":false,"id":3764,"mutability":"mutable","name":"totalValue","nameLocation":"12398:10:47","nodeType":"VariableDeclaration","scope":3901,"src":"12390:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3763,"name":"uint256","nodeType":"ElementaryTypeName","src":"12390:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3765,"nodeType":"VariableDeclarationStatement","src":"12390:18:47"},{"assignments":[3767],"declarations":[{"constant":false,"id":3767,"mutability":"mutable","name":"selfTransferTotalValue","nameLocation":"12426:22:47","nodeType":"VariableDeclaration","scope":3901,"src":"12418:30:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3766,"name":"uint256","nodeType":"ElementaryTypeName","src":"12418:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3768,"nodeType":"VariableDeclarationStatement","src":"12418:30:47"},{"id":3887,"nodeType":"UncheckedBlock","src":"12458:1308:47","statements":[{"body":{"id":3853,"nodeType":"Block","src":"12516:829:47","statements":[{"assignments":[3779],"declarations":[{"constant":false,"id":3779,"mutability":"mutable","name":"to","nameLocation":"12542:2:47","nodeType":"VariableDeclaration","scope":3853,"src":"12534:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3778,"name":"address","nodeType":"ElementaryTypeName","src":"12534:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3783,"initialValue":{"baseExpression":{"id":3780,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"12547:10:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3782,"indexExpression":{"id":3781,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"12558:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12547:13:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12534:26:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3785,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"12586:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12600:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12592:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3786,"name":"address","nodeType":"ElementaryTypeName","src":"12592:7:47","typeDescriptions":{}}},"id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12592:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12586:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f2061646472657373283029","id":3791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12604:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7","typeString":"literal_string \"ERC20: transfer to address(0)\""},"value":"ERC20: transfer to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7","typeString":"literal_string \"ERC20: transfer to address(0)\""}],"id":3784,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12578:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12578:58:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3793,"nodeType":"ExpressionStatement","src":"12578:58:47"},{"assignments":[3795],"declarations":[{"constant":false,"id":3795,"mutability":"mutable","name":"value","nameLocation":"12663:5:47","nodeType":"VariableDeclaration","scope":3853,"src":"12655:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3794,"name":"uint256","nodeType":"ElementaryTypeName","src":"12655:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3799,"initialValue":{"baseExpression":{"id":3796,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"12671:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3798,"indexExpression":{"id":3797,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"12678:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12671:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12655:25:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"12703:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12712:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12703:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3846,"nodeType":"IfStatement","src":"12699:583:47","trueBody":{"id":3845,"nodeType":"Block","src":"12715:567:47","statements":[{"assignments":[3804],"declarations":[{"constant":false,"id":3804,"mutability":"mutable","name":"newTotalValue","nameLocation":"12745:13:47","nodeType":"VariableDeclaration","scope":3845,"src":"12737:21:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3803,"name":"uint256","nodeType":"ElementaryTypeName","src":"12737:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3808,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3805,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"12761:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3806,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"12774:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12761:18:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12737:42:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3810,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"12809:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3811,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"12825:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12809:26:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2076616c756573206f766572666c6f77","id":3813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12837:24:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1","typeString":"literal_string \"ERC20: values overflow\""},"value":"ERC20: values overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1","typeString":"literal_string \"ERC20: values overflow\""}],"id":3809,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12801:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12801:61:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3815,"nodeType":"ExpressionStatement","src":"12801:61:47"},{"expression":{"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3816,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"12884:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3817,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"12897:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12884:26:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3819,"nodeType":"ExpressionStatement","src":"12884:26:47"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3820,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"12936:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3821,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"12944:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12936:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3843,"nodeType":"Block","src":"13026:238:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"13060:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3834,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"13069:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13060:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","id":3836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13078:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""},"value":"ERC20: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""}],"id":3832,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13052:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13052:56:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3838,"nodeType":"ExpressionStatement","src":"13052:56:47"},{"expression":{"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3839,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"13134:22:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"13160:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13134:31:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3842,"nodeType":"ExpressionStatement","src":"13134:31:47"}]},"id":3844,"nodeType":"IfStatement","src":"12932:332:47","trueBody":{"id":3831,"nodeType":"Block","src":"12948:72:47","statements":[{"expression":{"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3823,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"12974:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3826,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12976:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"12974:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3827,"indexExpression":{"id":3825,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"12985:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12974:14:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"12992:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12974:23:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3830,"nodeType":"ExpressionStatement","src":"12974:23:47"}]}}]}},{"eventCall":{"arguments":[{"id":3848,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13314:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3849,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"13320:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3850,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"13324:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3847,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"13305:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13305:25:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"EmitStatement","src":"13300:30:47"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3772,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"12498:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3773,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"12503:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12498:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3854,"initializationExpression":{"assignments":[3770],"declarations":[{"constant":false,"id":3770,"mutability":"mutable","name":"i","nameLocation":"12495:1:47","nodeType":"VariableDeclaration","scope":3854,"src":"12487:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3769,"name":"uint256","nodeType":"ElementaryTypeName","src":"12487:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3771,"nodeType":"VariableDeclarationStatement","src":"12487:9:47"},"loopExpression":{"expression":{"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12511:3:47","subExpression":{"id":3775,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"12513:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3777,"nodeType":"ExpressionStatement","src":"12511:3:47"},"nodeType":"ForStatement","src":"12482:863:47"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3855,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"13363:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13377:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13363:15:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3858,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"13382:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3859,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"13396:22:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13382:36:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13363:55:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3886,"nodeType":"IfStatement","src":"13359:397:47","trueBody":{"id":3885,"nodeType":"Block","src":"13420:336:47","statements":[{"assignments":[3863],"declarations":[{"constant":false,"id":3863,"mutability":"mutable","name":"newBalance","nameLocation":"13446:10:47","nodeType":"VariableDeclaration","scope":3885,"src":"13438:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3862,"name":"uint256","nodeType":"ElementaryTypeName","src":"13438:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3867,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3864,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"13459:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3865,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"13469:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13459:20:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13438:41:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3869,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"13505:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3870,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"13518:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13505:20:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","id":3872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13527:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""},"value":"ERC20: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""}],"id":3868,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13497:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13497:60:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3874,"nodeType":"ExpressionStatement","src":"13497:60:47"},{"expression":{"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3875,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"13631:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3878,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13633:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"13631:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3879,"indexExpression":{"id":3877,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13642:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13631:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3880,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"13650:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3881,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"13663:22:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13650:35:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13631:54:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3884,"nodeType":"ExpressionStatement","src":"13631:54:47"}]}}]},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3888,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13780:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3889,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"13788:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13780:14:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3900,"nodeType":"IfStatement","src":"13776:90:47","trueBody":{"id":3899,"nodeType":"Block","src":"13796:70:47","statements":[{"expression":{"arguments":[{"id":3894,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13830:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3895,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"13836:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3896,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"13844:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3891,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"13810:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3893,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13812:17:47","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":3441,"src":"13810:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13810:45:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3898,"nodeType":"ExpressionStatement","src":"13810:45:47"}]}}]},"documentation":{"id":3722,"nodeType":"StructuredDocumentation","src":"11035:956:47","text":"@notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\n @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if `from` does not have at least `sum(values)` of balance.\n @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\n @dev Emits a {Transfer} event for each transfer.\n @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n @param sender The message sender.\n @param from The account transferring the tokens.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`."},"id":3902,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"12005:17:47","nodeType":"FunctionDefinition","parameters":{"id":3736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3725,"mutability":"mutable","name":"s","nameLocation":"12047:1:47","nodeType":"VariableDeclaration","scope":3902,"src":"12032:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3724,"nodeType":"UserDefinedTypeName","pathNode":{"id":3723,"name":"Layout","nameLocations":["12032:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"12032:6:47"},"referencedDeclaration":3113,"src":"12032:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3727,"mutability":"mutable","name":"sender","nameLocation":"12066:6:47","nodeType":"VariableDeclaration","scope":3902,"src":"12058:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3726,"name":"address","nodeType":"ElementaryTypeName","src":"12058:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3729,"mutability":"mutable","name":"from","nameLocation":"12090:4:47","nodeType":"VariableDeclaration","scope":3902,"src":"12082:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3728,"name":"address","nodeType":"ElementaryTypeName","src":"12082:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3732,"mutability":"mutable","name":"recipients","nameLocation":"12123:10:47","nodeType":"VariableDeclaration","scope":3902,"src":"12104:29:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3730,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3731,"nodeType":"ArrayTypeName","src":"12104:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3735,"mutability":"mutable","name":"values","nameLocation":"12162:6:47","nodeType":"VariableDeclaration","scope":3902,"src":"12143:25:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3733,"name":"uint256","nodeType":"ElementaryTypeName","src":"12143:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3734,"nodeType":"ArrayTypeName","src":"12143:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12022:152:47"},"returnParameters":{"id":3737,"nodeType":"ParameterList","parameters":[],"src":"12184:0:47"},"scope":4505,"src":"11996:1876:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3938,"nodeType":"Block","src":"15082:148:47","statements":[{"expression":{"arguments":[{"id":3920,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"15103:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3921,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"15109:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"15113:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3917,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"15092:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3919,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15094:8:47","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3518,"src":"15092:10:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15092:27:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3924,"nodeType":"ExpressionStatement","src":"15092:27:47"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3925,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"15133:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15136:10:47","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":5164,"src":"15133:13:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:15:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3937,"nodeType":"IfStatement","src":"15129:95:47","trueBody":{"id":3936,"nodeType":"Block","src":"15150:74:47","statements":[{"expression":{"arguments":[{"id":3929,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"15185:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3930,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"15191:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3931,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"15197:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"15201:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3933,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"15208:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3928,"name":"_callOnERC20Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4504,"src":"15164:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15164:49:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3935,"nodeType":"ExpressionStatement","src":"15164:49:47"}]}}]},"documentation":{"id":3903,"nodeType":"StructuredDocumentation","src":"14003:917:47","text":"@notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The account transferring the tokens.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract."},"id":3939,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"14934:12:47","nodeType":"FunctionDefinition","parameters":{"id":3915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3906,"mutability":"mutable","name":"s","nameLocation":"14971:1:47","nodeType":"VariableDeclaration","scope":3939,"src":"14956:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3905,"nodeType":"UserDefinedTypeName","pathNode":{"id":3904,"name":"Layout","nameLocations":["14956:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"14956:6:47"},"referencedDeclaration":3113,"src":"14956:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3908,"mutability":"mutable","name":"from","nameLocation":"14990:4:47","nodeType":"VariableDeclaration","scope":3939,"src":"14982:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3907,"name":"address","nodeType":"ElementaryTypeName","src":"14982:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3910,"mutability":"mutable","name":"to","nameLocation":"15012:2:47","nodeType":"VariableDeclaration","scope":3939,"src":"15004:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3909,"name":"address","nodeType":"ElementaryTypeName","src":"15004:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3912,"mutability":"mutable","name":"value","nameLocation":"15032:5:47","nodeType":"VariableDeclaration","scope":3939,"src":"15024:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3911,"name":"uint256","nodeType":"ElementaryTypeName","src":"15024:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3914,"mutability":"mutable","name":"data","nameLocation":"15062:4:47","nodeType":"VariableDeclaration","scope":3939,"src":"15047:19:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3913,"name":"bytes","nodeType":"ElementaryTypeName","src":"15047:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14946:126:47"},"returnParameters":{"id":3916,"nodeType":"ParameterList","parameters":[],"src":"15082:0:47"},"scope":4505,"src":"14925:305:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3978,"nodeType":"Block","src":"16635:162:47","statements":[{"expression":{"arguments":[{"id":3959,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"16660:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3960,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"16668:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3961,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"16674:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"16678:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3956,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"16645:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3958,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16647:12:47","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3555,"src":"16645:14:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,address,uint256)"}},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16645:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3964,"nodeType":"ExpressionStatement","src":"16645:39:47"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3965,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"16698:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16701:10:47","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":5164,"src":"16698:13:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16698:15:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3977,"nodeType":"IfStatement","src":"16694:97:47","trueBody":{"id":3976,"nodeType":"Block","src":"16715:76:47","statements":[{"expression":{"arguments":[{"id":3969,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"16750:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3970,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"16758:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3971,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"16764:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3972,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"16768:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3973,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"16775:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3968,"name":"_callOnERC20Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4504,"src":"16729:20:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16729:51:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3975,"nodeType":"ExpressionStatement","src":"16729:51:47"}]}}]},"documentation":{"id":3940,"nodeType":"StructuredDocumentation","src":"15236:1209:47","text":"@notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n @param sender The message sender.\n @param from The account transferring the tokens.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract."},"id":3979,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"16459:16:47","nodeType":"FunctionDefinition","parameters":{"id":3954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"s","nameLocation":"16500:1:47","nodeType":"VariableDeclaration","scope":3979,"src":"16485:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3942,"nodeType":"UserDefinedTypeName","pathNode":{"id":3941,"name":"Layout","nameLocations":["16485:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"16485:6:47"},"referencedDeclaration":3113,"src":"16485:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3945,"mutability":"mutable","name":"sender","nameLocation":"16519:6:47","nodeType":"VariableDeclaration","scope":3979,"src":"16511:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3944,"name":"address","nodeType":"ElementaryTypeName","src":"16511:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3947,"mutability":"mutable","name":"from","nameLocation":"16543:4:47","nodeType":"VariableDeclaration","scope":3979,"src":"16535:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3946,"name":"address","nodeType":"ElementaryTypeName","src":"16535:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3949,"mutability":"mutable","name":"to","nameLocation":"16565:2:47","nodeType":"VariableDeclaration","scope":3979,"src":"16557:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3948,"name":"address","nodeType":"ElementaryTypeName","src":"16557:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3951,"mutability":"mutable","name":"value","nameLocation":"16585:5:47","nodeType":"VariableDeclaration","scope":3979,"src":"16577:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3950,"name":"uint256","nodeType":"ElementaryTypeName","src":"16577:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3953,"mutability":"mutable","name":"data","nameLocation":"16615:4:47","nodeType":"VariableDeclaration","scope":3979,"src":"16600:19:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3952,"name":"bytes","nodeType":"ElementaryTypeName","src":"16600:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16475:150:47"},"returnParameters":{"id":3955,"nodeType":"ParameterList","parameters":[],"src":"16635:0:47"},"scope":4505,"src":"16450:347:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4047,"nodeType":"Block","src":"17470:478:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3991,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"17488:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17502:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17494:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3992,"name":"address","nodeType":"ElementaryTypeName","src":"17494:7:47","typeDescriptions":{}}},"id":3995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17494:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17488:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f2061646472657373283029","id":3997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17506:27:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_32cace037c0659d6f07eeb77b1740914591f2b0927e7b227d741fbb03823b40d","typeString":"literal_string \"ERC20: mint to address(0)\""},"value":"ERC20: mint to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_32cace037c0659d6f07eeb77b1740914591f2b0927e7b227d741fbb03823b40d","typeString":"literal_string \"ERC20: mint to address(0)\""}],"id":3990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17480:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17480:54:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3999,"nodeType":"ExpressionStatement","src":"17480:54:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4000,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"17548:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17557:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17548:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4037,"nodeType":"IfStatement","src":"17544:352:47","trueBody":{"id":4036,"nodeType":"Block","src":"17560:336:47","statements":[{"assignments":[4004],"declarations":[{"constant":false,"id":4004,"mutability":"mutable","name":"supply","nameLocation":"17582:6:47","nodeType":"VariableDeclaration","scope":4036,"src":"17574:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4003,"name":"uint256","nodeType":"ElementaryTypeName","src":"17574:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4007,"initialValue":{"expression":{"id":4005,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"17591:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4006,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17593:6:47","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":3112,"src":"17591:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17574:25:47"},{"id":4035,"nodeType":"UncheckedBlock","src":"17613:273:47","statements":[{"assignments":[4009],"declarations":[{"constant":false,"id":4009,"mutability":"mutable","name":"newSupply","nameLocation":"17649:9:47","nodeType":"VariableDeclaration","scope":4035,"src":"17641:17:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4008,"name":"uint256","nodeType":"ElementaryTypeName","src":"17641:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4013,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4010,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"17661:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"17670:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17661:14:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17641:34:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4015,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"17701:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4016,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"17713:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17701:18:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20737570706c79206f766572666c6f77","id":4018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17721:24:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_555ebf03264be25a26b5120044887f13a64477e19db4facbaaee717abfa82472","typeString":"literal_string \"ERC20: supply overflow\""},"value":"ERC20: supply overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_555ebf03264be25a26b5120044887f13a64477e19db4facbaaee717abfa82472","typeString":"literal_string \"ERC20: supply overflow\""}],"id":4014,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17693:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17693:53:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4020,"nodeType":"ExpressionStatement","src":"17693:53:47"},{"expression":{"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4021,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"17764:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4023,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"17766:6:47","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":3112,"src":"17764:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4024,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"17775:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17764:20:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4026,"nodeType":"ExpressionStatement","src":"17764:20:47"},{"expression":{"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4027,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"17802:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4030,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17804:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"17802:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4031,"indexExpression":{"id":4029,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"17813:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17802:14:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"17820:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17802:23:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4034,"nodeType":"ExpressionStatement","src":"17802:23:47"}]}]}},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17927:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17919:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4039,"name":"address","nodeType":"ElementaryTypeName","src":"17919:7:47","typeDescriptions":{}}},"id":4042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17919:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4043,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"17931:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4044,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"17935:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4038,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"17910:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17910:31:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4046,"nodeType":"EmitStatement","src":"17905:36:47"}]},"documentation":{"id":3980,"nodeType":"StructuredDocumentation","src":"16921:446:47","text":"@notice Mints an amount of tokens to a recipient, increasing the total supply.\n @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits a {Transfer} event with `from` set to the zero address.\n @param to The account to mint the tokens to.\n @param value The amount of tokens to mint."},"id":4048,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"17381:4:47","nodeType":"FunctionDefinition","parameters":{"id":3988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3983,"mutability":"mutable","name":"s","nameLocation":"17410:1:47","nodeType":"VariableDeclaration","scope":4048,"src":"17395:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3982,"nodeType":"UserDefinedTypeName","pathNode":{"id":3981,"name":"Layout","nameLocations":["17395:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"17395:6:47"},"referencedDeclaration":3113,"src":"17395:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3985,"mutability":"mutable","name":"to","nameLocation":"17429:2:47","nodeType":"VariableDeclaration","scope":4048,"src":"17421:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3984,"name":"address","nodeType":"ElementaryTypeName","src":"17421:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3987,"mutability":"mutable","name":"value","nameLocation":"17449:5:47","nodeType":"VariableDeclaration","scope":4048,"src":"17441:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3986,"name":"uint256","nodeType":"ElementaryTypeName","src":"17441:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17385:75:47"},"returnParameters":{"id":3989,"nodeType":"ParameterList","parameters":[],"src":"17470:0:47"},"scope":4505,"src":"17372:576:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4184,"nodeType":"Block","src":"18717:1089:47","statements":[{"assignments":[4062],"declarations":[{"constant":false,"id":4062,"mutability":"mutable","name":"length","nameLocation":"18735:6:47","nodeType":"VariableDeclaration","scope":4184,"src":"18727:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4061,"name":"uint256","nodeType":"ElementaryTypeName","src":"18727:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4065,"initialValue":{"expression":{"id":4063,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"18744:10:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18755:6:47","memberName":"length","nodeType":"MemberAccess","src":"18744:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18727:34:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4067,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"18779:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4068,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4058,"src":"18789:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18796:6:47","memberName":"length","nodeType":"MemberAccess","src":"18789:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18779:23:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e636f6e73697374656e7420617272617973","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18804:28:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""},"value":"ERC20: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""}],"id":4066,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18771:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18771:62:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4073,"nodeType":"ExpressionStatement","src":"18771:62:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4074,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"18848:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18858:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18848:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4078,"nodeType":"IfStatement","src":"18844:24:47","trueBody":{"functionReturnParameters":4060,"id":4077,"nodeType":"Return","src":"18861:7:47"}},{"assignments":[4080],"declarations":[{"constant":false,"id":4080,"mutability":"mutable","name":"totalValue","nameLocation":"18886:10:47","nodeType":"VariableDeclaration","scope":4184,"src":"18878:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4079,"name":"uint256","nodeType":"ElementaryTypeName","src":"18878:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4081,"nodeType":"VariableDeclarationStatement","src":"18878:18:47"},{"id":4183,"nodeType":"UncheckedBlock","src":"18906:894:47","statements":[{"body":{"id":4152,"nodeType":"Block","src":"18964:567:47","statements":[{"assignments":[4092],"declarations":[{"constant":false,"id":4092,"mutability":"mutable","name":"to","nameLocation":"18990:2:47","nodeType":"VariableDeclaration","scope":4152,"src":"18982:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4091,"name":"address","nodeType":"ElementaryTypeName","src":"18982:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4096,"initialValue":{"baseExpression":{"id":4093,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"18995:10:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4095,"indexExpression":{"id":4094,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"19006:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18995:13:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"18982:26:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4098,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4092,"src":"19034:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19048:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19040:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4099,"name":"address","nodeType":"ElementaryTypeName","src":"19040:7:47","typeDescriptions":{}}},"id":4102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19040:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19034:16:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f2061646472657373283029","id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19052:27:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_32cace037c0659d6f07eeb77b1740914591f2b0927e7b227d741fbb03823b40d","typeString":"literal_string \"ERC20: mint to address(0)\""},"value":"ERC20: mint to address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_32cace037c0659d6f07eeb77b1740914591f2b0927e7b227d741fbb03823b40d","typeString":"literal_string \"ERC20: mint to address(0)\""}],"id":4097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19026:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19026:54:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4106,"nodeType":"ExpressionStatement","src":"19026:54:47"},{"assignments":[4108],"declarations":[{"constant":false,"id":4108,"mutability":"mutable","name":"value","nameLocation":"19107:5:47","nodeType":"VariableDeclaration","scope":4152,"src":"19099:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4107,"name":"uint256","nodeType":"ElementaryTypeName","src":"19099:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4112,"initialValue":{"baseExpression":{"id":4109,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4058,"src":"19115:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4111,"indexExpression":{"id":4110,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"19122:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19115:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19099:25:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4113,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"19146:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19155:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19146:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4142,"nodeType":"IfStatement","src":"19142:321:47","trueBody":{"id":4141,"nodeType":"Block","src":"19158:305:47","statements":[{"assignments":[4117],"declarations":[{"constant":false,"id":4117,"mutability":"mutable","name":"newTotalValue","nameLocation":"19188:13:47","nodeType":"VariableDeclaration","scope":4141,"src":"19180:21:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4116,"name":"uint256","nodeType":"ElementaryTypeName","src":"19180:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4121,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4118,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"19204:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4119,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"19217:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19204:18:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19180:42:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4123,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4117,"src":"19252:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4124,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"19268:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19252:26:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2076616c756573206f766572666c6f77","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19280:24:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1","typeString":"literal_string \"ERC20: values overflow\""},"value":"ERC20: values overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1","typeString":"literal_string \"ERC20: values overflow\""}],"id":4122,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19244:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19244:61:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4128,"nodeType":"ExpressionStatement","src":"19244:61:47"},{"expression":{"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4129,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"19327:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4130,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4117,"src":"19340:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19327:26:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4132,"nodeType":"ExpressionStatement","src":"19327:26:47"},{"expression":{"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4133,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"19375:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19377:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"19375:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4137,"indexExpression":{"id":4135,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4092,"src":"19386:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19375:14:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4138,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"19393:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19375:23:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4140,"nodeType":"ExpressionStatement","src":"19375:23:47"}]}},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19502:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19494:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4144,"name":"address","nodeType":"ElementaryTypeName","src":"19494:7:47","typeDescriptions":{}}},"id":4147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19494:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4148,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4092,"src":"19506:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"19510:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4143,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"19485:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19485:31:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4151,"nodeType":"EmitStatement","src":"19480:36:47"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4085,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"18946:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4086,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"18951:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18946:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4153,"initializationExpression":{"assignments":[4083],"declarations":[{"constant":false,"id":4083,"mutability":"mutable","name":"i","nameLocation":"18943:1:47","nodeType":"VariableDeclaration","scope":4153,"src":"18935:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4082,"name":"uint256","nodeType":"ElementaryTypeName","src":"18935:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4084,"nodeType":"VariableDeclarationStatement","src":"18935:9:47"},"loopExpression":{"expression":{"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"18959:3:47","subExpression":{"id":4088,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"18961:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4090,"nodeType":"ExpressionStatement","src":"18959:3:47"},"nodeType":"ForStatement","src":"18930:601:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4154,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"19549:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19563:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19549:15:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4182,"nodeType":"IfStatement","src":"19545:245:47","trueBody":{"id":4181,"nodeType":"Block","src":"19566:224:47","statements":[{"assignments":[4158],"declarations":[{"constant":false,"id":4158,"mutability":"mutable","name":"supply","nameLocation":"19592:6:47","nodeType":"VariableDeclaration","scope":4181,"src":"19584:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4157,"name":"uint256","nodeType":"ElementaryTypeName","src":"19584:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4161,"initialValue":{"expression":{"id":4159,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"19601:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4160,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19603:6:47","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":3112,"src":"19601:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19584:25:47"},{"assignments":[4163],"declarations":[{"constant":false,"id":4163,"mutability":"mutable","name":"newSupply","nameLocation":"19635:9:47","nodeType":"VariableDeclaration","scope":4181,"src":"19627:17:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4162,"name":"uint256","nodeType":"ElementaryTypeName","src":"19627:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4167,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4164,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"19647:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4165,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4080,"src":"19656:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19647:19:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19627:39:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4169,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"19692:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4170,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"19704:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19692:18:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20737570706c79206f766572666c6f77","id":4172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19712:24:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_555ebf03264be25a26b5120044887f13a64477e19db4facbaaee717abfa82472","typeString":"literal_string \"ERC20: supply overflow\""},"value":"ERC20: supply overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_555ebf03264be25a26b5120044887f13a64477e19db4facbaaee717abfa82472","typeString":"literal_string \"ERC20: supply overflow\""}],"id":4168,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19684:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19684:53:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4174,"nodeType":"ExpressionStatement","src":"19684:53:47"},{"expression":{"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4175,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"19755:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4177,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19757:6:47","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":3112,"src":"19755:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4178,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"19766:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19755:20:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4180,"nodeType":"ExpressionStatement","src":"19755:20:47"}]}}]}]},"documentation":{"id":4049,"nodeType":"StructuredDocumentation","src":"17954:628:47","text":"@notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\n @param recipients The list of accounts to mint the tokens to.\n @param values The list of amounts of tokens to mint to each of `recipients`."},"id":4185,"implemented":true,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"18596:9:47","nodeType":"FunctionDefinition","parameters":{"id":4059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4052,"mutability":"mutable","name":"s","nameLocation":"18630:1:47","nodeType":"VariableDeclaration","scope":4185,"src":"18615:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4051,"nodeType":"UserDefinedTypeName","pathNode":{"id":4050,"name":"Layout","nameLocations":["18615:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"18615:6:47"},"referencedDeclaration":3113,"src":"18615:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":4055,"mutability":"mutable","name":"recipients","nameLocation":"18658:10:47","nodeType":"VariableDeclaration","scope":4185,"src":"18641:27:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4053,"name":"address","nodeType":"ElementaryTypeName","src":"18641:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4054,"nodeType":"ArrayTypeName","src":"18641:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4058,"mutability":"mutable","name":"values","nameLocation":"18695:6:47","nodeType":"VariableDeclaration","scope":4185,"src":"18678:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4056,"name":"uint256","nodeType":"ElementaryTypeName","src":"18678:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4057,"nodeType":"ArrayTypeName","src":"18678:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"18605:102:47"},"returnParameters":{"id":4060,"nodeType":"ParameterList","parameters":[],"src":"18717:0:47"},"scope":4505,"src":"18587:1219:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4245,"nodeType":"Block","src":"20443:434:47","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"20457:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20466:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20457:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4235,"nodeType":"IfStatement","src":"20453:369:47","trueBody":{"id":4234,"nodeType":"Block","src":"20469:353:47","statements":[{"assignments":[4200],"declarations":[{"constant":false,"id":4200,"mutability":"mutable","name":"balance","nameLocation":"20491:7:47","nodeType":"VariableDeclaration","scope":4234,"src":"20483:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4199,"name":"uint256","nodeType":"ElementaryTypeName","src":"20483:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4205,"initialValue":{"baseExpression":{"expression":{"id":4201,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"20501:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20503:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"20501:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4204,"indexExpression":{"id":4203,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"20512:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20501:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20483:34:47"},{"id":4233,"nodeType":"UncheckedBlock","src":"20531:281:47","statements":[{"assignments":[4207],"declarations":[{"constant":false,"id":4207,"mutability":"mutable","name":"newBalance","nameLocation":"20567:10:47","nodeType":"VariableDeclaration","scope":4233,"src":"20559:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4206,"name":"uint256","nodeType":"ElementaryTypeName","src":"20559:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4211,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4208,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"20580:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4209,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"20590:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20580:15:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20559:36:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4213,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"20621:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4214,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"20634:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20621:20:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","id":4216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20643:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""},"value":"ERC20: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""}],"id":4212,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20613:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20613:60:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4218,"nodeType":"ExpressionStatement","src":"20613:60:47"},{"expression":{"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4219,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"20691:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20693:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"20691:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4223,"indexExpression":{"id":4221,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"20702:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20691:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4224,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"20710:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20691:29:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4226,"nodeType":"ExpressionStatement","src":"20691:29:47"},{"expression":{"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4227,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"20738:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20740:6:47","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":3112,"src":"20738:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"20750:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20738:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4232,"nodeType":"ExpressionStatement","src":"20738:17:47"}]}]}},{"eventCall":{"arguments":[{"id":4237,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"20846:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20860:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20852:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4238,"name":"address","nodeType":"ElementaryTypeName","src":"20852:7:47","typeDescriptions":{}}},"id":4241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20852:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4242,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"20864:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4236,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"20837:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20837:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4244,"nodeType":"EmitStatement","src":"20832:38:47"}]},"documentation":{"id":4186,"nodeType":"StructuredDocumentation","src":"19930:408:47","text":"@notice Burns an amount of tokens from an account, decreasing the total supply.\n @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Emits a {Transfer} event with `to` set to the zero address.\n @param from The account burning the tokens.\n @param value The amount of tokens to burn."},"id":4246,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"20352:4:47","nodeType":"FunctionDefinition","parameters":{"id":4194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4189,"mutability":"mutable","name":"s","nameLocation":"20381:1:47","nodeType":"VariableDeclaration","scope":4246,"src":"20366:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4188,"nodeType":"UserDefinedTypeName","pathNode":{"id":4187,"name":"Layout","nameLocations":["20366:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"20366:6:47"},"referencedDeclaration":3113,"src":"20366:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":4191,"mutability":"mutable","name":"from","nameLocation":"20400:4:47","nodeType":"VariableDeclaration","scope":4246,"src":"20392:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4190,"name":"address","nodeType":"ElementaryTypeName","src":"20392:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4193,"mutability":"mutable","name":"value","nameLocation":"20422:5:47","nodeType":"VariableDeclaration","scope":4246,"src":"20414:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4192,"name":"uint256","nodeType":"ElementaryTypeName","src":"20414:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20356:77:47"},"returnParameters":{"id":4195,"nodeType":"ParameterList","parameters":[],"src":"20443:0:47"},"scope":4505,"src":"20343:534:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4279,"nodeType":"Block","src":"21693:130:47","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4259,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"21707:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4260,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"21715:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21707:14:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4271,"nodeType":"IfStatement","src":"21703:85:47","trueBody":{"id":4270,"nodeType":"Block","src":"21723:65:47","statements":[{"expression":{"arguments":[{"id":4265,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"21757:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4266,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"21763:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"21771:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4262,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4250,"src":"21737:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21739:17:47","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":3441,"src":"21737:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":4268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21737:40:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4269,"nodeType":"ExpressionStatement","src":"21737:40:47"}]}},{"expression":{"arguments":[{"id":4275,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"21804:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"21810:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4272,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4250,"src":"21797:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21799:4:47","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":4246,"src":"21797:6:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,uint256)"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21797:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4278,"nodeType":"ExpressionStatement","src":"21797:19:47"}]},"documentation":{"id":4247,"nodeType":"StructuredDocumentation","src":"20883:677:47","text":"@notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\n @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits a {Transfer} event with `to` set to the zero address.\n @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n @param sender The message sender.\n @param from The account to burn the tokens from.\n @param value The amount of tokens to burn."},"id":4280,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"21574:8:47","nodeType":"FunctionDefinition","parameters":{"id":4257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4250,"mutability":"mutable","name":"s","nameLocation":"21607:1:47","nodeType":"VariableDeclaration","scope":4280,"src":"21592:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4249,"nodeType":"UserDefinedTypeName","pathNode":{"id":4248,"name":"Layout","nameLocations":["21592:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"21592:6:47"},"referencedDeclaration":3113,"src":"21592:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":4252,"mutability":"mutable","name":"sender","nameLocation":"21626:6:47","nodeType":"VariableDeclaration","scope":4280,"src":"21618:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4251,"name":"address","nodeType":"ElementaryTypeName","src":"21618:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4254,"mutability":"mutable","name":"from","nameLocation":"21650:4:47","nodeType":"VariableDeclaration","scope":4280,"src":"21642:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4253,"name":"address","nodeType":"ElementaryTypeName","src":"21642:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4256,"mutability":"mutable","name":"value","nameLocation":"21672:5:47","nodeType":"VariableDeclaration","scope":4280,"src":"21664:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4255,"name":"uint256","nodeType":"ElementaryTypeName","src":"21664:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21582:101:47"},"returnParameters":{"id":4258,"nodeType":"ParameterList","parameters":[],"src":"21693:0:47"},"scope":4505,"src":"21565:258:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4410,"nodeType":"Block","src":"22869:1101:47","statements":[{"assignments":[4296],"declarations":[{"constant":false,"id":4296,"mutability":"mutable","name":"length","nameLocation":"22887:6:47","nodeType":"VariableDeclaration","scope":4410,"src":"22879:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4295,"name":"uint256","nodeType":"ElementaryTypeName","src":"22879:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4299,"initialValue":{"expression":{"id":4297,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"22896:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22903:6:47","memberName":"length","nodeType":"MemberAccess","src":"22896:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22879:30:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4301,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"22927:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4302,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4292,"src":"22937:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22944:6:47","memberName":"length","nodeType":"MemberAccess","src":"22937:13:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22927:23:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e636f6e73697374656e7420617272617973","id":4305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22952:28:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""},"value":"ERC20: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5","typeString":"literal_string \"ERC20: inconsistent arrays\""}],"id":4300,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22919:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22919:62:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4307,"nodeType":"ExpressionStatement","src":"22919:62:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4308,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"22996:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23006:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22996:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4312,"nodeType":"IfStatement","src":"22992:24:47","trueBody":{"functionReturnParameters":4294,"id":4311,"nodeType":"Return","src":"23009:7:47"}},{"assignments":[4314],"declarations":[{"constant":false,"id":4314,"mutability":"mutable","name":"totalValue","nameLocation":"23034:10:47","nodeType":"VariableDeclaration","scope":4410,"src":"23026:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4313,"name":"uint256","nodeType":"ElementaryTypeName","src":"23026:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4315,"nodeType":"VariableDeclarationStatement","src":"23026:18:47"},{"id":4409,"nodeType":"UncheckedBlock","src":"23054:910:47","statements":[{"body":{"id":4396,"nodeType":"Block","src":"23112:691:47","statements":[{"assignments":[4326],"declarations":[{"constant":false,"id":4326,"mutability":"mutable","name":"from","nameLocation":"23138:4:47","nodeType":"VariableDeclaration","scope":4396,"src":"23130:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4325,"name":"address","nodeType":"ElementaryTypeName","src":"23130:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4330,"initialValue":{"baseExpression":{"id":4327,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"23145:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":4329,"indexExpression":{"id":4328,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"23152:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23145:9:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"23130:24:47"},{"assignments":[4332],"declarations":[{"constant":false,"id":4332,"mutability":"mutable","name":"value","nameLocation":"23180:5:47","nodeType":"VariableDeclaration","scope":4396,"src":"23172:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4331,"name":"uint256","nodeType":"ElementaryTypeName","src":"23172:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4336,"initialValue":{"baseExpression":{"id":4333,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4292,"src":"23188:6:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":4335,"indexExpression":{"id":4334,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"23195:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23188:9:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23172:25:47"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4337,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"23220:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4338,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4286,"src":"23228:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"23220:14:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4349,"nodeType":"IfStatement","src":"23216:101:47","trueBody":{"id":4348,"nodeType":"Block","src":"23236:81:47","statements":[{"expression":{"arguments":[{"id":4343,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"23278:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4344,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4286,"src":"23284:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"23292:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4340,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"23258:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4342,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23260:17:47","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":3441,"src":"23258:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3113_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_struct$_Layout_$3113_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23258:40:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4347,"nodeType":"ExpressionStatement","src":"23258:40:47"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"23339:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23348:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23339:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4386,"nodeType":"IfStatement","src":"23335:397:47","trueBody":{"id":4385,"nodeType":"Block","src":"23351:381:47","statements":[{"assignments":[4354],"declarations":[{"constant":false,"id":4354,"mutability":"mutable","name":"balance","nameLocation":"23381:7:47","nodeType":"VariableDeclaration","scope":4385,"src":"23373:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4353,"name":"uint256","nodeType":"ElementaryTypeName","src":"23373:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4359,"initialValue":{"baseExpression":{"expression":{"id":4355,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"23391:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23393:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"23391:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4358,"indexExpression":{"id":4357,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"23402:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23391:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23373:34:47"},{"assignments":[4361],"declarations":[{"constant":false,"id":4361,"mutability":"mutable","name":"newBalance","nameLocation":"23437:10:47","nodeType":"VariableDeclaration","scope":4385,"src":"23429:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4360,"name":"uint256","nodeType":"ElementaryTypeName","src":"23429:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4365,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4362,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"23450:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"23460:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23450:15:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23429:36:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4367,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"23495:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4368,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"23508:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23495:20:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","id":4370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23517:29:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""},"value":"ERC20: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63","typeString":"literal_string \"ERC20: insufficient balance\""}],"id":4366,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23487:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23487:60:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4372,"nodeType":"ExpressionStatement","src":"23487:60:47"},{"expression":{"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":4373,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"23569:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4376,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23571:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"23569:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4377,"indexExpression":{"id":4375,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"23580:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23569:16:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4378,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"23588:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23569:29:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4380,"nodeType":"ExpressionStatement","src":"23569:29:47"},{"expression":{"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4381,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"23620:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"23634:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23620:19:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4384,"nodeType":"ExpressionStatement","src":"23620:19:47"}]}},{"eventCall":{"arguments":[{"id":4388,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"23764:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23778:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23770:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4389,"name":"address","nodeType":"ElementaryTypeName","src":"23770:7:47","typeDescriptions":{}}},"id":4392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23770:10:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"23782:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4387,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"23755:8:47","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23755:33:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4395,"nodeType":"EmitStatement","src":"23750:38:47"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4319,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"23094:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4320,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"23099:6:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23094:11:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4397,"initializationExpression":{"assignments":[4317],"declarations":[{"constant":false,"id":4317,"mutability":"mutable","name":"i","nameLocation":"23091:1:47","nodeType":"VariableDeclaration","scope":4397,"src":"23083:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4316,"name":"uint256","nodeType":"ElementaryTypeName","src":"23083:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4318,"nodeType":"VariableDeclarationStatement","src":"23083:9:47"},"loopExpression":{"expression":{"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"23107:3:47","subExpression":{"id":4322,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"23109:1:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4324,"nodeType":"ExpressionStatement","src":"23107:3:47"},"nodeType":"ForStatement","src":"23078:725:47"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4398,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"23821:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23835:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23821:15:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4408,"nodeType":"IfStatement","src":"23817:137:47","trueBody":{"id":4407,"nodeType":"Block","src":"23838:116:47","statements":[{"expression":{"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4401,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"23856:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"23858:6:47","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":3112,"src":"23856:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4404,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"23868:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23856:22:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4406,"nodeType":"ExpressionStatement","src":"23856:22:47"}]}}]}]},"documentation":{"id":4281,"nodeType":"StructuredDocumentation","src":"21829:877:47","text":"@notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\n @dev Reverts if `owners` and `values` have different lengths.\n @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\n @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\n @param sender The message sender.\n @param owners The list of accounts to burn the tokens from.\n @param values The list of amounts of tokens to burn."},"id":4411,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"22720:13:47","nodeType":"FunctionDefinition","parameters":{"id":4293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4284,"mutability":"mutable","name":"s","nameLocation":"22758:1:47","nodeType":"VariableDeclaration","scope":4411,"src":"22743:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4283,"nodeType":"UserDefinedTypeName","pathNode":{"id":4282,"name":"Layout","nameLocations":["22743:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"22743:6:47"},"referencedDeclaration":3113,"src":"22743:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":4286,"mutability":"mutable","name":"sender","nameLocation":"22777:6:47","nodeType":"VariableDeclaration","scope":4411,"src":"22769:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4285,"name":"address","nodeType":"ElementaryTypeName","src":"22769:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4289,"mutability":"mutable","name":"owners","nameLocation":"22812:6:47","nodeType":"VariableDeclaration","scope":4411,"src":"22793:25:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4287,"name":"address","nodeType":"ElementaryTypeName","src":"22793:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4288,"nodeType":"ArrayTypeName","src":"22793:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4292,"mutability":"mutable","name":"values","nameLocation":"22847:6:47","nodeType":"VariableDeclaration","scope":4411,"src":"22828:25:47","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4290,"name":"uint256","nodeType":"ElementaryTypeName","src":"22828:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4291,"nodeType":"ArrayTypeName","src":"22828:9:47","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22733:126:47"},"returnParameters":{"id":4294,"nodeType":"ParameterList","parameters":[],"src":"22869:0:47"},"scope":4505,"src":"22711:1259:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4423,"nodeType":"Block","src":"24213:32:47","statements":[{"expression":{"expression":{"id":4420,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"24230:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24232:6:47","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":3112,"src":"24230:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4419,"id":4422,"nodeType":"Return","src":"24223:15:47"}]},"documentation":{"id":4412,"nodeType":"StructuredDocumentation","src":"23976:154:47","text":"@notice Gets the total token supply.\n @dev Note: This function implements {ERC20-totalSupply()}.\n @return supply The total token supply."},"id":4424,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"24144:11:47","nodeType":"FunctionDefinition","parameters":{"id":4416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4415,"mutability":"mutable","name":"s","nameLocation":"24171:1:47","nodeType":"VariableDeclaration","scope":4424,"src":"24156:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4414,"nodeType":"UserDefinedTypeName","pathNode":{"id":4413,"name":"Layout","nameLocations":["24156:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"24156:6:47"},"referencedDeclaration":3113,"src":"24156:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"}],"src":"24155:18:47"},"returnParameters":{"id":4419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4418,"mutability":"mutable","name":"supply","nameLocation":"24205:6:47","nodeType":"VariableDeclaration","scope":4424,"src":"24197:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4417,"name":"uint256","nodeType":"ElementaryTypeName","src":"24197:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24196:16:47"},"scope":4505,"src":"24135:110:47","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4440,"nodeType":"Block","src":"24566:41:47","statements":[{"expression":{"baseExpression":{"expression":{"id":4435,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4428,"src":"24583:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24585:8:47","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":3104,"src":"24583:10:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4438,"indexExpression":{"id":4437,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4430,"src":"24594:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24583:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4434,"id":4439,"nodeType":"Return","src":"24576:24:47"}]},"documentation":{"id":4425,"nodeType":"StructuredDocumentation","src":"24251:218:47","text":"@notice Gets an account balance.\n @dev Note: This function implements {ERC20-balanceOf(address)}.\n @param owner The account whose balance will be returned.\n @return balance The account balance."},"id":4441,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"24483:9:47","nodeType":"FunctionDefinition","parameters":{"id":4431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4428,"mutability":"mutable","name":"s","nameLocation":"24508:1:47","nodeType":"VariableDeclaration","scope":4441,"src":"24493:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4427,"nodeType":"UserDefinedTypeName","pathNode":{"id":4426,"name":"Layout","nameLocations":["24493:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"24493:6:47"},"referencedDeclaration":3113,"src":"24493:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":4430,"mutability":"mutable","name":"owner","nameLocation":"24519:5:47","nodeType":"VariableDeclaration","scope":4441,"src":"24511:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4429,"name":"address","nodeType":"ElementaryTypeName","src":"24511:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"24492:33:47"},"returnParameters":{"id":4434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4433,"mutability":"mutable","name":"balance","nameLocation":"24557:7:47","nodeType":"VariableDeclaration","scope":4441,"src":"24549:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4432,"name":"uint256","nodeType":"ElementaryTypeName","src":"24549:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24548:17:47"},"scope":4505,"src":"24474:133:47","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4461,"nodeType":"Block","src":"25165:52:47","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":4454,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4445,"src":"25182:1:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":4455,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25184:10:47","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":3110,"src":"25182:12:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4457,"indexExpression":{"id":4456,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"25195:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25182:19:47","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4459,"indexExpression":{"id":4458,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4449,"src":"25202:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25182:28:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4453,"id":4460,"nodeType":"Return","src":"25175:35:47"}]},"documentation":{"id":4442,"nodeType":"StructuredDocumentation","src":"24613:410:47","text":"@notice Gets the amount that an account is allowed to spend on behalf of another.\n @dev Note: This function implements {ERC20-allowance(address,address)}.\n @param owner The account that has granted an allowance to `spender`.\n @param spender The account that was granted an allowance by `owner`.\n @return value The amount which `spender` is allowed to spend on behalf of `owner`."},"id":4462,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"25037:9:47","nodeType":"FunctionDefinition","parameters":{"id":4450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4445,"mutability":"mutable","name":"s","nameLocation":"25071:1:47","nodeType":"VariableDeclaration","scope":4462,"src":"25056:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4444,"nodeType":"UserDefinedTypeName","pathNode":{"id":4443,"name":"Layout","nameLocations":["25056:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"25056:6:47"},"referencedDeclaration":3113,"src":"25056:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":4447,"mutability":"mutable","name":"owner","nameLocation":"25090:5:47","nodeType":"VariableDeclaration","scope":4462,"src":"25082:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4446,"name":"address","nodeType":"ElementaryTypeName","src":"25082:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4449,"mutability":"mutable","name":"spender","nameLocation":"25113:7:47","nodeType":"VariableDeclaration","scope":4462,"src":"25105:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4448,"name":"address","nodeType":"ElementaryTypeName","src":"25105:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"25046:80:47"},"returnParameters":{"id":4453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4452,"mutability":"mutable","name":"value","nameLocation":"25158:5:47","nodeType":"VariableDeclaration","scope":4462,"src":"25150:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"25150:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25149:15:47"},"scope":4505,"src":"25028:189:47","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4473,"nodeType":"Block","src":"25282:115:47","statements":[{"assignments":[4469],"declarations":[{"constant":false,"id":4469,"mutability":"mutable","name":"position","nameLocation":"25300:8:47","nodeType":"VariableDeclaration","scope":4473,"src":"25292:16:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25292:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4471,"initialValue":{"id":4470,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"25311:19:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"25292:38:47"},{"AST":{"nodeType":"YulBlock","src":"25349:42:47","statements":[{"nodeType":"YulAssignment","src":"25363:18:47","value":{"name":"position","nodeType":"YulIdentifier","src":"25373:8:47"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"25363:6:47"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4469,"isOffset":false,"isSlot":false,"src":"25373:8:47","valueSize":1},{"declaration":4466,"isOffset":false,"isSlot":true,"src":"25363:6:47","suffix":"slot","valueSize":1}],"id":4472,"nodeType":"InlineAssembly","src":"25340:51:47"}]},"id":4474,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"25232:6:47","nodeType":"FunctionDefinition","parameters":{"id":4463,"nodeType":"ParameterList","parameters":[],"src":"25238:2:47"},"returnParameters":{"id":4467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4466,"mutability":"mutable","name":"s","nameLocation":"25279:1:47","nodeType":"VariableDeclaration","scope":4474,"src":"25264:16:47","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":4465,"nodeType":"UserDefinedTypeName","pathNode":{"id":4464,"name":"Layout","nameLocations":["25264:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"25264:6:47"},"referencedDeclaration":3113,"src":"25264:6:47","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3113_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"}],"src":"25263:18:47"},"scope":4505,"src":"25223:174:47","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4503,"nodeType":"Block","src":"25962:138:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4493,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4477,"src":"26015:6:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4494,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"26023:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"26029:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4496,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4485,"src":"26036:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4490,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"25995:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4489,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2521,"src":"25980:14:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2521_$","typeString":"type(contract IERC20Receiver)"}},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25980:18:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Receiver_$2521","typeString":"contract IERC20Receiver"}},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25999:15:47","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":2520,"src":"25980:34:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25980:61:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4498,"name":"ERC20_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"26045:14:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25980:79:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2073616665207472616e736665722072656a6563746564","id":4500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26061:31:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_06533093aac81b304d828c29fba4bcc9a9242c05998beeb0c6637f18930d9235","typeString":"literal_string \"ERC20: safe transfer rejected\""},"value":"ERC20: safe transfer rejected"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06533093aac81b304d828c29fba4bcc9a9242c05998beeb0c6637f18930d9235","typeString":"literal_string \"ERC20: safe transfer rejected\""}],"id":4488,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25972:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25972:121:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4502,"nodeType":"ExpressionStatement","src":"25972:121:47"}]},"documentation":{"id":4475,"nodeType":"StructuredDocumentation","src":"25403:394:47","text":"@notice Calls {IERC20Receiver-onERC20Received} on a target contract.\n @dev Reverts if the call to the target fails, reverts or is rejected.\n @param sender The message sender.\n @param from Previous token owner.\n @param to New token owner.\n @param value The value transferred.\n @param data Optional data to send along with the receiver contract call."},"id":4504,"implemented":true,"kind":"function","modifiers":[],"name":"_callOnERC20Received","nameLocation":"25811:20:47","nodeType":"FunctionDefinition","parameters":{"id":4486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4477,"mutability":"mutable","name":"sender","nameLocation":"25849:6:47","nodeType":"VariableDeclaration","scope":4504,"src":"25841:14:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4476,"name":"address","nodeType":"ElementaryTypeName","src":"25841:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4479,"mutability":"mutable","name":"from","nameLocation":"25873:4:47","nodeType":"VariableDeclaration","scope":4504,"src":"25865:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4478,"name":"address","nodeType":"ElementaryTypeName","src":"25865:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4481,"mutability":"mutable","name":"to","nameLocation":"25895:2:47","nodeType":"VariableDeclaration","scope":4504,"src":"25887:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4480,"name":"address","nodeType":"ElementaryTypeName","src":"25887:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4483,"mutability":"mutable","name":"value","nameLocation":"25915:5:47","nodeType":"VariableDeclaration","scope":4504,"src":"25907:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4482,"name":"uint256","nodeType":"ElementaryTypeName","src":"25907:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4485,"mutability":"mutable","name":"data","nameLocation":"25943:4:47","nodeType":"VariableDeclaration","scope":4504,"src":"25930:17:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4484,"name":"bytes","nodeType":"ElementaryTypeName","src":"25930:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"25831:122:47"},"returnParameters":{"id":4487,"nodeType":"ParameterList","parameters":[],"src":"25962:0:47"},"scope":4505,"src":"25802:298:47","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4506,"src":"798:25304:47","usedErrors":[]}],"src":"32:26071:47"},"id":47},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[4591]},"id":4592,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4507,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:48"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":4508,"nodeType":"StructuredDocumentation","src":"57:296:48","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":4591,"linearizedBaseContracts":[4591],"name":"IERC721","nameLocation":"363:7:48","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4509,"nodeType":"StructuredDocumentation","src":"377:684:48","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":4516,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1075:7:48","nodeType":"FunctionDefinition","parameters":{"id":4514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4511,"mutability":"mutable","name":"to","nameLocation":"1091:2:48","nodeType":"VariableDeclaration","scope":4516,"src":"1083:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4510,"name":"address","nodeType":"ElementaryTypeName","src":"1083:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4513,"mutability":"mutable","name":"tokenId","nameLocation":"1103:7:48","nodeType":"VariableDeclaration","scope":4516,"src":"1095:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1095:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1082:29:48"},"returnParameters":{"id":4515,"nodeType":"ParameterList","parameters":[],"src":"1120:0:48"},"scope":4591,"src":"1066:55:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4517,"nodeType":"StructuredDocumentation","src":"1127:341:48","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":4524,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1482:17:48","nodeType":"FunctionDefinition","parameters":{"id":4522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4519,"mutability":"mutable","name":"operator","nameLocation":"1508:8:48","nodeType":"VariableDeclaration","scope":4524,"src":"1500:16:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4518,"name":"address","nodeType":"ElementaryTypeName","src":"1500:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4521,"mutability":"mutable","name":"approved","nameLocation":"1523:8:48","nodeType":"VariableDeclaration","scope":4524,"src":"1518:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4520,"name":"bool","nodeType":"ElementaryTypeName","src":"1518:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1499:33:48"},"returnParameters":{"id":4523,"nodeType":"ParameterList","parameters":[],"src":"1541:0:48"},"scope":4591,"src":"1473:69:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4525,"nodeType":"StructuredDocumentation","src":"1548:667:48","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":4534,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2229:12:48","nodeType":"FunctionDefinition","parameters":{"id":4532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4527,"mutability":"mutable","name":"from","nameLocation":"2259:4:48","nodeType":"VariableDeclaration","scope":4534,"src":"2251:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4526,"name":"address","nodeType":"ElementaryTypeName","src":"2251:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4529,"mutability":"mutable","name":"to","nameLocation":"2281:2:48","nodeType":"VariableDeclaration","scope":4534,"src":"2273:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4528,"name":"address","nodeType":"ElementaryTypeName","src":"2273:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4531,"mutability":"mutable","name":"tokenId","nameLocation":"2301:7:48","nodeType":"VariableDeclaration","scope":4534,"src":"2293:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4530,"name":"uint256","nodeType":"ElementaryTypeName","src":"2293:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2241:73:48"},"returnParameters":{"id":4533,"nodeType":"ParameterList","parameters":[],"src":"2323:0:48"},"scope":4591,"src":"2220:104:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4535,"nodeType":"StructuredDocumentation","src":"2330:663:48","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":4544,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3007:16:48","nodeType":"FunctionDefinition","parameters":{"id":4542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4537,"mutability":"mutable","name":"from","nameLocation":"3041:4:48","nodeType":"VariableDeclaration","scope":4544,"src":"3033:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4536,"name":"address","nodeType":"ElementaryTypeName","src":"3033:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4539,"mutability":"mutable","name":"to","nameLocation":"3063:2:48","nodeType":"VariableDeclaration","scope":4544,"src":"3055:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4538,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4541,"mutability":"mutable","name":"tokenId","nameLocation":"3083:7:48","nodeType":"VariableDeclaration","scope":4544,"src":"3075:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4540,"name":"uint256","nodeType":"ElementaryTypeName","src":"3075:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3023:73:48"},"returnParameters":{"id":4543,"nodeType":"ParameterList","parameters":[],"src":"3105:0:48"},"scope":4591,"src":"2998:108:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4545,"nodeType":"StructuredDocumentation","src":"3112:735:48","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":4556,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3861:16:48","nodeType":"FunctionDefinition","parameters":{"id":4554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4547,"mutability":"mutable","name":"from","nameLocation":"3895:4:48","nodeType":"VariableDeclaration","scope":4556,"src":"3887:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4546,"name":"address","nodeType":"ElementaryTypeName","src":"3887:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4549,"mutability":"mutable","name":"to","nameLocation":"3917:2:48","nodeType":"VariableDeclaration","scope":4556,"src":"3909:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4548,"name":"address","nodeType":"ElementaryTypeName","src":"3909:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4551,"mutability":"mutable","name":"tokenId","nameLocation":"3937:7:48","nodeType":"VariableDeclaration","scope":4556,"src":"3929:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4550,"name":"uint256","nodeType":"ElementaryTypeName","src":"3929:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4553,"mutability":"mutable","name":"data","nameLocation":"3969:4:48","nodeType":"VariableDeclaration","scope":4556,"src":"3954:19:48","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4552,"name":"bytes","nodeType":"ElementaryTypeName","src":"3954:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3877:102:48"},"returnParameters":{"id":4555,"nodeType":"ParameterList","parameters":[],"src":"3988:0:48"},"scope":4591,"src":"3852:137:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4557,"nodeType":"StructuredDocumentation","src":"3995:209:48","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":4564,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4218:9:48","nodeType":"FunctionDefinition","parameters":{"id":4560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4559,"mutability":"mutable","name":"owner","nameLocation":"4236:5:48","nodeType":"VariableDeclaration","scope":4564,"src":"4228:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4558,"name":"address","nodeType":"ElementaryTypeName","src":"4228:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4227:15:48"},"returnParameters":{"id":4563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4562,"mutability":"mutable","name":"balance","nameLocation":"4274:7:48","nodeType":"VariableDeclaration","scope":4564,"src":"4266:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4561,"name":"uint256","nodeType":"ElementaryTypeName","src":"4266:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4265:17:48"},"scope":4591,"src":"4209:74:48","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4565,"nodeType":"StructuredDocumentation","src":"4289:217:48","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":4572,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4520:7:48","nodeType":"FunctionDefinition","parameters":{"id":4568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4567,"mutability":"mutable","name":"tokenId","nameLocation":"4536:7:48","nodeType":"VariableDeclaration","scope":4572,"src":"4528:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4566,"name":"uint256","nodeType":"ElementaryTypeName","src":"4528:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4527:17:48"},"returnParameters":{"id":4571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4570,"mutability":"mutable","name":"tokenOwner","nameLocation":"4576:10:48","nodeType":"VariableDeclaration","scope":4572,"src":"4568:18:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4569,"name":"address","nodeType":"ElementaryTypeName","src":"4568:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4567:20:48"},"scope":4591,"src":"4511:77:48","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4573,"nodeType":"StructuredDocumentation","src":"4594:285:48","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":4580,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4893:11:48","nodeType":"FunctionDefinition","parameters":{"id":4576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4575,"mutability":"mutable","name":"tokenId","nameLocation":"4913:7:48","nodeType":"VariableDeclaration","scope":4580,"src":"4905:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4574,"name":"uint256","nodeType":"ElementaryTypeName","src":"4905:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4904:17:48"},"returnParameters":{"id":4579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4578,"mutability":"mutable","name":"approved","nameLocation":"4953:8:48","nodeType":"VariableDeclaration","scope":4580,"src":"4945:16:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4577,"name":"address","nodeType":"ElementaryTypeName","src":"4945:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4944:18:48"},"scope":4591,"src":"4884:79:48","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4581,"nodeType":"StructuredDocumentation","src":"4969:323:48","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":4590,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5306:16:48","nodeType":"FunctionDefinition","parameters":{"id":4586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4583,"mutability":"mutable","name":"owner","nameLocation":"5331:5:48","nodeType":"VariableDeclaration","scope":4590,"src":"5323:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4582,"name":"address","nodeType":"ElementaryTypeName","src":"5323:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4585,"mutability":"mutable","name":"operator","nameLocation":"5346:8:48","nodeType":"VariableDeclaration","scope":4590,"src":"5338:16:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4584,"name":"address","nodeType":"ElementaryTypeName","src":"5338:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5322:33:48"},"returnParameters":{"id":4589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4588,"mutability":"mutable","name":"approvedForAll","nameLocation":"5384:14:48","nodeType":"VariableDeclaration","scope":4590,"src":"5379:19:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4587,"name":"bool","nodeType":"ElementaryTypeName","src":"5379:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5378:21:48"},"scope":4591,"src":"5297:103:48","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4592,"src":"353:5049:48","usedErrors":[]}],"src":"32:5371:48"},"id":48},"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol","exportedSymbols":{"Bytes32":[4748]},"id":4749,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4593,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:49"},{"abstract":false,"baseContracts":[],"canonicalName":"Bytes32","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4748,"linearizedBaseContracts":[4748],"name":"Bytes32","nameLocation":"65:7:49","nodeType":"ContractDefinition","nodes":[{"body":{"id":4670,"nodeType":"Block","src":"291:553:49","statements":[{"id":4669,"nodeType":"UncheckedBlock","src":"301:537:49","statements":[{"assignments":[4602],"declarations":[{"constant":false,"id":4602,"mutability":"mutable","name":"base32Alphabet","nameLocation":"333:14:49","nodeType":"VariableDeclaration","scope":4669,"src":"325:22:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"325:7:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4604,"initialValue":{"hexValue":"307836313632363336343635363636373638363936413642364336443645364637303731373237333734373537363737373837393741333233333334333533363337","id":4603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"350:66:49","typeDescriptions":{"typeIdentifier":"t_rational_44048183304486788312148433451363384677562265908331949128489393199232333461047_by_1","typeString":"int_const 4404...(69 digits omitted)...1047"},"value":"0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637"},"nodeType":"VariableDeclarationStatement","src":"325:91:49"},{"assignments":[4606],"declarations":[{"constant":false,"id":4606,"mutability":"mutable","name":"i","nameLocation":"438:1:49","nodeType":"VariableDeclaration","scope":4669,"src":"430:9:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4605,"name":"uint256","nodeType":"ElementaryTypeName","src":"430:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4611,"initialValue":{"arguments":[{"id":4609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4596,"src":"450:5:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"442:7:49","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4607,"name":"uint256","nodeType":"ElementaryTypeName","src":"442:7:49","typeDescriptions":{}}},"id":4610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"442:14:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"430:26:49"},{"assignments":[4613],"declarations":[{"constant":false,"id":4613,"mutability":"mutable","name":"k","nameLocation":"478:1:49","nodeType":"VariableDeclaration","scope":4669,"src":"470:9:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4612,"name":"uint256","nodeType":"ElementaryTypeName","src":"470:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4615,"initialValue":{"hexValue":"3532","id":4614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"482:2:49","typeDescriptions":{"typeIdentifier":"t_rational_52_by_1","typeString":"int_const 52"},"value":"52"},"nodeType":"VariableDeclarationStatement","src":"470:14:49"},{"assignments":[4617],"declarations":[{"constant":false,"id":4617,"mutability":"mutable","name":"bstr","nameLocation":"511:4:49","nodeType":"VariableDeclaration","scope":4669,"src":"498:17:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4616,"name":"bytes","nodeType":"ElementaryTypeName","src":"498:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4622,"initialValue":{"arguments":[{"id":4620,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"528:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"518:9:49","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4618,"name":"bytes","nodeType":"ElementaryTypeName","src":"522:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"518:12:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"498:32:49"},{"expression":{"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4623,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"544:4:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4626,"indexExpression":{"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"549:3:49","subExpression":{"id":4624,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"551:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"544:9:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4627,"name":"base32Alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"556:14:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4637,"indexExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4630,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"578:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"38","id":4631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"582:1:49","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"578:5:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4633,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"577:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":4634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"588:1:49","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"577:12:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"571:5:49","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4628,"name":"uint8","nodeType":"ElementaryTypeName","src":"571:5:49","typeDescriptions":{}}},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"571:19:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"556:35:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"544:47:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4639,"nodeType":"ExpressionStatement","src":"544:47:49"},{"expression":{"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4640,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"669:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"38","id":4641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"674:1:49","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"669:6:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4643,"nodeType":"ExpressionStatement","src":"669:6:49"},{"body":{"id":4662,"nodeType":"Block","src":"703:92:49","statements":[{"expression":{"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4647,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"721:4:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4650,"indexExpression":{"id":4649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"726:3:49","subExpression":{"id":4648,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"728:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"721:9:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4651,"name":"base32Alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4602,"src":"733:14:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4655,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4652,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"748:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":4653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:2:49","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"748:6:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"733:22:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"721:34:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4657,"nodeType":"ExpressionStatement","src":"721:34:49"},{"expression":{"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4658,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"773:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3332","id":4659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"778:2:49","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"773:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4661,"nodeType":"ExpressionStatement","src":"773:7:49"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4644,"name":"k","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"696:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"700:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"696:5:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4663,"nodeType":"WhileStatement","src":"689:106:49"},{"expression":{"arguments":[{"id":4666,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"822:4:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"815:6:49","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4664,"name":"string","nodeType":"ElementaryTypeName","src":"815:6:49","typeDescriptions":{}}},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"815:12:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4600,"id":4668,"nodeType":"Return","src":"808:19:49"}]}]},"documentation":{"id":4594,"nodeType":"StructuredDocumentation","src":"79:130:49","text":"@notice Converts bytes32 to base32 string.\n @param value value to convert.\n @return the converted base32 string."},"id":4671,"implemented":true,"kind":"function","modifiers":[],"name":"toBase32String","nameLocation":"223:14:49","nodeType":"FunctionDefinition","parameters":{"id":4597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4596,"mutability":"mutable","name":"value","nameLocation":"246:5:49","nodeType":"VariableDeclaration","scope":4671,"src":"238:13:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"238:7:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"237:15:49"},"returnParameters":{"id":4600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4671,"src":"276:13:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4598,"name":"string","nodeType":"ElementaryTypeName","src":"276:6:49","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"275:15:49"},"scope":4748,"src":"214:630:49","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4746,"nodeType":"Block","src":"1098:501:49","statements":[{"id":4745,"nodeType":"UncheckedBlock","src":"1108:485:49","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"1136:5:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783030","id":4680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1145:4:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"src":"1136:13:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4684,"nodeType":"IfStatement","src":"1132:28:49","trueBody":{"expression":{"hexValue":"","id":4682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1158:2:49","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":4678,"id":4683,"nodeType":"Return","src":"1151:9:49"}},{"assignments":[4686],"declarations":[{"constant":false,"id":4686,"mutability":"mutable","name":"bytesString","nameLocation":"1187:11:49","nodeType":"VariableDeclaration","scope":4745,"src":"1174:24:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4685,"name":"bytes","nodeType":"ElementaryTypeName","src":"1174:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4694,"initialValue":{"arguments":[{"arguments":[{"id":4691,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"1224:5:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4689,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1207:3:49","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1211:12:49","memberName":"encodePacked","nodeType":"MemberAccess","src":"1207:16:49","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1207:23:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1201:5:49","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4687,"name":"bytes","nodeType":"ElementaryTypeName","src":"1201:5:49","typeDescriptions":{}}},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1201:30:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1174:57:49"},{"assignments":[4696],"declarations":[{"constant":false,"id":4696,"mutability":"mutable","name":"pos","nameLocation":"1253:3:49","nodeType":"VariableDeclaration","scope":4745,"src":"1245:11:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4695,"name":"uint256","nodeType":"ElementaryTypeName","src":"1245:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4698,"initialValue":{"hexValue":"3331","id":4697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:2:49","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"nodeType":"VariableDeclarationStatement","src":"1245:16:49"},{"body":{"id":4710,"nodeType":"Block","src":"1288:88:49","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4700,"name":"bytesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"1310:11:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4702,"indexExpression":{"id":4701,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4696,"src":"1322:3:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1310:16:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1330:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1310:21:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4706,"nodeType":"IfStatement","src":"1306:32:49","trueBody":{"id":4705,"nodeType":"Break","src":"1333:5:49"}},{"expression":{"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1356:5:49","subExpression":{"id":4707,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4696,"src":"1358:3:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4709,"nodeType":"ExpressionStatement","src":"1356:5:49"}]},"condition":{"hexValue":"74727565","id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1282:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":4711,"nodeType":"WhileStatement","src":"1275:101:49"},{"assignments":[4713],"declarations":[{"constant":false,"id":4713,"mutability":"mutable","name":"asciiString","nameLocation":"1402:11:49","nodeType":"VariableDeclaration","scope":4745,"src":"1389:24:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4712,"name":"bytes","nodeType":"ElementaryTypeName","src":"1389:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4720,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4716,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4696,"src":"1426:3:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1432:1:49","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1426:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1416:9:49","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4714,"name":"bytes","nodeType":"ElementaryTypeName","src":"1420:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1416:18:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1389:45:49"},{"body":{"id":4738,"nodeType":"Block","src":"1479:64:49","statements":[{"expression":{"id":4736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4730,"name":"asciiString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"1497:11:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4732,"indexExpression":{"id":4731,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"1509:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1497:14:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4733,"name":"bytesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"1514:11:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4735,"indexExpression":{"id":4734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"1526:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1514:14:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1497:31:49","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4737,"nodeType":"ExpressionStatement","src":"1497:31:49"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4724,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"1464:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4725,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4696,"src":"1469:3:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1464:8:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4739,"initializationExpression":{"assignments":[4722],"declarations":[{"constant":false,"id":4722,"mutability":"mutable","name":"i","nameLocation":"1461:1:49","nodeType":"VariableDeclaration","scope":4739,"src":"1453:9:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4721,"name":"uint256","nodeType":"ElementaryTypeName","src":"1453:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4723,"nodeType":"VariableDeclarationStatement","src":"1453:9:49"},"loopExpression":{"expression":{"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1474:3:49","subExpression":{"id":4727,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"1476:1:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4729,"nodeType":"ExpressionStatement","src":"1474:3:49"},"nodeType":"ForStatement","src":"1448:95:49"},{"expression":{"arguments":[{"id":4742,"name":"asciiString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"1570:11:49","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1563:6:49","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4740,"name":"string","nodeType":"ElementaryTypeName","src":"1563:6:49","typeDescriptions":{}}},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1563:19:49","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4678,"id":4744,"nodeType":"Return","src":"1556:26:49"}]}]},"documentation":{"id":4672,"nodeType":"StructuredDocumentation","src":"850:167:49","text":"@notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\n @param value value to convert.\n @return the converted ASCII string."},"id":4747,"implemented":true,"kind":"function","modifiers":[],"name":"toASCIIString","nameLocation":"1031:13:49","nodeType":"FunctionDefinition","parameters":{"id":4675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4674,"mutability":"mutable","name":"value","nameLocation":"1053:5:49","nodeType":"VariableDeclaration","scope":4747,"src":"1045:13:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1045:7:49","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1044:15:49"},"returnParameters":{"id":4678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4677,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4747,"src":"1083:13:49","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4676,"name":"string","nodeType":"ElementaryTypeName","src":"1083:6:49","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1082:15:49"},"scope":4748,"src":"1022:577:49","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4749,"src":"57:1544:49","usedErrors":[]}],"src":"32:1570:49"},"id":49},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[4829]},"id":4752,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4750,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:50"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":4751,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4752,"sourceUnit":4830,"src":"115:35:50","symbolAliases":[],"unitAlias":""}],"src":"90:61:50"},"id":50},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[4829]},"id":4830,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4753,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:51"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":4754,"nodeType":"StructuredDocumentation","src":"131:70:51","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":4829,"linearizedBaseContracts":[4829],"name":"IERC20","nameLocation":"212:6:51","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4755,"nodeType":"StructuredDocumentation","src":"225:158:51","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":4763,"name":"Transfer","nameLocation":"394:8:51","nodeType":"EventDefinition","parameters":{"id":4762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4757,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:51","nodeType":"VariableDeclaration","scope":4763,"src":"403:20:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4756,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4759,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:51","nodeType":"VariableDeclaration","scope":4763,"src":"425:18:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4758,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4761,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:51","nodeType":"VariableDeclaration","scope":4763,"src":"445:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4760,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:51"},"src":"388:72:51"},{"anonymous":false,"documentation":{"id":4764,"nodeType":"StructuredDocumentation","src":"466:148:51","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":4772,"name":"Approval","nameLocation":"625:8:51","nodeType":"EventDefinition","parameters":{"id":4771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4766,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:51","nodeType":"VariableDeclaration","scope":4772,"src":"634:21:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4765,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4768,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:51","nodeType":"VariableDeclaration","scope":4772,"src":"657:23:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4767,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4770,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:51","nodeType":"VariableDeclaration","scope":4772,"src":"682:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4769,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:51"},"src":"619:78:51"},{"documentation":{"id":4773,"nodeType":"StructuredDocumentation","src":"703:66:51","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":4778,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:51","nodeType":"FunctionDefinition","parameters":{"id":4774,"nodeType":"ParameterList","parameters":[],"src":"794:2:51"},"returnParameters":{"id":4777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4776,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4778,"src":"820:7:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4775,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:51"},"scope":4829,"src":"774:55:51","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4779,"nodeType":"StructuredDocumentation","src":"835:72:51","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":4786,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:51","nodeType":"FunctionDefinition","parameters":{"id":4782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4781,"mutability":"mutable","name":"account","nameLocation":"939:7:51","nodeType":"VariableDeclaration","scope":4786,"src":"931:15:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4780,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:51"},"returnParameters":{"id":4785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4786,"src":"971:7:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4783,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:51"},"scope":4829,"src":"912:68:51","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4787,"nodeType":"StructuredDocumentation","src":"986:202:51","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":4796,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:51","nodeType":"FunctionDefinition","parameters":{"id":4792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"to","nameLocation":"1219:2:51","nodeType":"VariableDeclaration","scope":4796,"src":"1211:10:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4788,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4791,"mutability":"mutable","name":"amount","nameLocation":"1231:6:51","nodeType":"VariableDeclaration","scope":4796,"src":"1223:14:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4790,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:51"},"returnParameters":{"id":4795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4796,"src":"1257:4:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4793,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:51"},"scope":4829,"src":"1193:70:51","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4797,"nodeType":"StructuredDocumentation","src":"1269:264:51","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":4806,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:51","nodeType":"FunctionDefinition","parameters":{"id":4802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4799,"mutability":"mutable","name":"owner","nameLocation":"1565:5:51","nodeType":"VariableDeclaration","scope":4806,"src":"1557:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4798,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4801,"mutability":"mutable","name":"spender","nameLocation":"1580:7:51","nodeType":"VariableDeclaration","scope":4806,"src":"1572:15:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4800,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:51"},"returnParameters":{"id":4805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4806,"src":"1612:7:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:51"},"scope":4829,"src":"1538:83:51","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4807,"nodeType":"StructuredDocumentation","src":"1627:642:51","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":4816,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:51","nodeType":"FunctionDefinition","parameters":{"id":4812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4809,"mutability":"mutable","name":"spender","nameLocation":"2299:7:51","nodeType":"VariableDeclaration","scope":4816,"src":"2291:15:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4808,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4811,"mutability":"mutable","name":"amount","nameLocation":"2316:6:51","nodeType":"VariableDeclaration","scope":4816,"src":"2308:14:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4810,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:51"},"returnParameters":{"id":4815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4816,"src":"2342:4:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4813,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:51"},"scope":4829,"src":"2274:74:51","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4817,"nodeType":"StructuredDocumentation","src":"2354:287:51","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":4828,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:51","nodeType":"FunctionDefinition","parameters":{"id":4824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4819,"mutability":"mutable","name":"from","nameLocation":"2685:4:51","nodeType":"VariableDeclaration","scope":4828,"src":"2677:12:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4818,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4821,"mutability":"mutable","name":"to","nameLocation":"2707:2:51","nodeType":"VariableDeclaration","scope":4828,"src":"2699:10:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4820,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4823,"mutability":"mutable","name":"amount","nameLocation":"2727:6:51","nodeType":"VariableDeclaration","scope":4828,"src":"2719:14:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4822,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:51"},"returnParameters":{"id":4827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4826,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4828,"src":"2758:4:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4825,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:51"},"scope":4829,"src":"2646:118:51","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4830,"src":"202:2564:51","usedErrors":[]}],"src":"106:2661:51"},"id":51},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[4865]},"id":4866,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4831,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:52"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":4832,"nodeType":"StructuredDocumentation","src":"139:480:52","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":4865,"linearizedBaseContracts":[4865],"name":"IERC20Permit","nameLocation":"630:12:52","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4833,"nodeType":"StructuredDocumentation","src":"649:792:52","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":4850,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1455:6:52","nodeType":"FunctionDefinition","parameters":{"id":4848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4835,"mutability":"mutable","name":"owner","nameLocation":"1479:5:52","nodeType":"VariableDeclaration","scope":4850,"src":"1471:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4834,"name":"address","nodeType":"ElementaryTypeName","src":"1471:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4837,"mutability":"mutable","name":"spender","nameLocation":"1502:7:52","nodeType":"VariableDeclaration","scope":4850,"src":"1494:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4836,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4839,"mutability":"mutable","name":"value","nameLocation":"1527:5:52","nodeType":"VariableDeclaration","scope":4850,"src":"1519:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1519:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4841,"mutability":"mutable","name":"deadline","nameLocation":"1550:8:52","nodeType":"VariableDeclaration","scope":4850,"src":"1542:16:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4840,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4843,"mutability":"mutable","name":"v","nameLocation":"1574:1:52","nodeType":"VariableDeclaration","scope":4850,"src":"1568:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4842,"name":"uint8","nodeType":"ElementaryTypeName","src":"1568:5:52","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4845,"mutability":"mutable","name":"r","nameLocation":"1593:1:52","nodeType":"VariableDeclaration","scope":4850,"src":"1585:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4844,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1585:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4847,"mutability":"mutable","name":"s","nameLocation":"1612:1:52","nodeType":"VariableDeclaration","scope":4850,"src":"1604:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4846,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1461:158:52"},"returnParameters":{"id":4849,"nodeType":"ParameterList","parameters":[],"src":"1628:0:52"},"scope":4865,"src":"1446:183:52","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4851,"nodeType":"StructuredDocumentation","src":"1635:294:52","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":4858,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1943:6:52","nodeType":"FunctionDefinition","parameters":{"id":4854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4853,"mutability":"mutable","name":"owner","nameLocation":"1958:5:52","nodeType":"VariableDeclaration","scope":4858,"src":"1950:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4852,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1949:15:52"},"returnParameters":{"id":4857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4858,"src":"1988:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1987:9:52"},"scope":4865,"src":"1934:63:52","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4859,"nodeType":"StructuredDocumentation","src":"2003:128:52","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":4864,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2198:16:52","nodeType":"FunctionDefinition","parameters":{"id":4860,"nodeType":"ParameterList","parameters":[],"src":"2214:2:52"},"returnParameters":{"id":4863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4864,"src":"2240:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4861,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2240:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2239:9:52"},"scope":4865,"src":"2189:60:52","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4866,"src":"620:1631:52","usedErrors":[]}],"src":"114:2138:52"},"id":52},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[5476],"IERC20":[4829],"IERC20Permit":[4865],"SafeERC20":[5146]},"id":5147,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4867,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:53"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":4868,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5147,"sourceUnit":4830,"src":"140:23:53","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","file":"../extensions/draft-IERC20Permit.sol","id":4869,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5147,"sourceUnit":4866,"src":"164:46:53","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":4870,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5147,"sourceUnit":5477,"src":"211:36:53","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":4871,"nodeType":"StructuredDocumentation","src":"249:457:53","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":5146,"linearizedBaseContracts":[5146],"name":"SafeERC20","nameLocation":"715:9:53","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4874,"libraryName":{"id":4872,"name":"Address","nameLocations":["737:7:53"],"nodeType":"IdentifierPath","referencedDeclaration":5476,"src":"737:7:53"},"nodeType":"UsingForDirective","src":"731:26:53","typeName":{"id":4873,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":4896,"nodeType":"Block","src":"865:103:53","statements":[{"expression":{"arguments":[{"id":4885,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"895:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4888,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"925:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":4889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"931:8:53","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":4796,"src":"925:14:53","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"940:8:53","memberName":"selector","nodeType":"MemberAccess","src":"925:23:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4891,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4879,"src":"950:2:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4892,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"954:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4886,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"902:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"906:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"902:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"902:58:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4884,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"875:19:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4829_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"875:86:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4895,"nodeType":"ExpressionStatement","src":"875:86:53"}]},"id":4897,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"772:12:53","nodeType":"FunctionDefinition","parameters":{"id":4882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4877,"mutability":"mutable","name":"token","nameLocation":"801:5:53","nodeType":"VariableDeclaration","scope":4897,"src":"794:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},"typeName":{"id":4876,"nodeType":"UserDefinedTypeName","pathNode":{"id":4875,"name":"IERC20","nameLocations":["794:6:53"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"794:6:53"},"referencedDeclaration":4829,"src":"794:6:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4879,"mutability":"mutable","name":"to","nameLocation":"824:2:53","nodeType":"VariableDeclaration","scope":4897,"src":"816:10:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4878,"name":"address","nodeType":"ElementaryTypeName","src":"816:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4881,"mutability":"mutable","name":"value","nameLocation":"844:5:53","nodeType":"VariableDeclaration","scope":4897,"src":"836:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4880,"name":"uint256","nodeType":"ElementaryTypeName","src":"836:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"784:71:53"},"returnParameters":{"id":4883,"nodeType":"ParameterList","parameters":[],"src":"865:0:53"},"scope":5146,"src":"763:205:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4922,"nodeType":"Block","src":"1102:113:53","statements":[{"expression":{"arguments":[{"id":4910,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4900,"src":"1132:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4913,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4900,"src":"1162:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1168:12:53","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":4828,"src":"1162:18:53","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:8:53","memberName":"selector","nodeType":"MemberAccess","src":"1162:27:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4916,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4902,"src":"1191:4:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4917,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4904,"src":"1197:2:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4918,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"1201:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4911,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1139:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1143:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1139:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:68:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4909,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"1112:19:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4829_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:96:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4921,"nodeType":"ExpressionStatement","src":"1112:96:53"}]},"id":4923,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"983:16:53","nodeType":"FunctionDefinition","parameters":{"id":4907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4900,"mutability":"mutable","name":"token","nameLocation":"1016:5:53","nodeType":"VariableDeclaration","scope":4923,"src":"1009:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},"typeName":{"id":4899,"nodeType":"UserDefinedTypeName","pathNode":{"id":4898,"name":"IERC20","nameLocations":["1009:6:53"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"1009:6:53"},"referencedDeclaration":4829,"src":"1009:6:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4902,"mutability":"mutable","name":"from","nameLocation":"1039:4:53","nodeType":"VariableDeclaration","scope":4923,"src":"1031:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4901,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4904,"mutability":"mutable","name":"to","nameLocation":"1061:2:53","nodeType":"VariableDeclaration","scope":4923,"src":"1053:10:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4903,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4906,"mutability":"mutable","name":"value","nameLocation":"1081:5:53","nodeType":"VariableDeclaration","scope":4923,"src":"1073:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4905,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"999:93:53"},"returnParameters":{"id":4908,"nodeType":"ParameterList","parameters":[],"src":"1102:0:53"},"scope":5146,"src":"974:241:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4966,"nodeType":"Block","src":"1581:497:53","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4935,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"1830:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1839:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1830:10:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4938,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1829:12:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4943,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1870:4:53","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$5146","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$5146","typeString":"library SafeERC20"}],"id":4942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1862:7:53","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4941,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:53","typeDescriptions":{}}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1862:13:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4945,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"1877:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4939,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4927,"src":"1846:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":4940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1852:9:53","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":4806,"src":"1846:15:53","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1846:39:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1889:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1846:44:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4949,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1845:46:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1829:62:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":4951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1905:56:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":4934,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1808:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:163:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4953,"nodeType":"ExpressionStatement","src":"1808:163:53"},{"expression":{"arguments":[{"id":4955,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4927,"src":"2001:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4958,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4927,"src":"2031:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2037:7:53","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4816,"src":"2031:13:53","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2045:8:53","memberName":"selector","nodeType":"MemberAccess","src":"2031:22:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4961,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4929,"src":"2055:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"2064:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4956,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2008:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2012:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2008:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2008:62:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4954,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"1981:19:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4829_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1981:90:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4965,"nodeType":"ExpressionStatement","src":"1981:90:53"}]},"documentation":{"id":4924,"nodeType":"StructuredDocumentation","src":"1221:249:53","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":4967,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1484:11:53","nodeType":"FunctionDefinition","parameters":{"id":4932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4927,"mutability":"mutable","name":"token","nameLocation":"1512:5:53","nodeType":"VariableDeclaration","scope":4967,"src":"1505:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},"typeName":{"id":4926,"nodeType":"UserDefinedTypeName","pathNode":{"id":4925,"name":"IERC20","nameLocations":["1505:6:53"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"1505:6:53"},"referencedDeclaration":4829,"src":"1505:6:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4929,"mutability":"mutable","name":"spender","nameLocation":"1535:7:53","nodeType":"VariableDeclaration","scope":4967,"src":"1527:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4928,"name":"address","nodeType":"ElementaryTypeName","src":"1527:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4931,"mutability":"mutable","name":"value","nameLocation":"1560:5:53","nodeType":"VariableDeclaration","scope":4967,"src":"1552:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4930,"name":"uint256","nodeType":"ElementaryTypeName","src":"1552:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:76:53"},"returnParameters":{"id":4933,"nodeType":"ParameterList","parameters":[],"src":"1581:0:53"},"scope":5146,"src":"1475:603:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5002,"nodeType":"Block","src":"2200:194:53","statements":[{"assignments":[4978],"declarations":[{"constant":false,"id":4978,"mutability":"mutable","name":"newAllowance","nameLocation":"2218:12:53","nodeType":"VariableDeclaration","scope":5002,"src":"2210:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4977,"name":"uint256","nodeType":"ElementaryTypeName","src":"2210:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4989,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4983,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2257:4:53","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$5146","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$5146","typeString":"library SafeERC20"}],"id":4982,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2249:7:53","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4981,"name":"address","nodeType":"ElementaryTypeName","src":"2249:7:53","typeDescriptions":{}}},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2249:13:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4985,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"2264:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4979,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"2233:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":4980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2239:9:53","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":4806,"src":"2233:15:53","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2233:39:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"2275:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2233:47:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2210:70:53"},{"expression":{"arguments":[{"id":4991,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"2310:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4994,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"2340:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2346:7:53","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4816,"src":"2340:13:53","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2354:8:53","memberName":"selector","nodeType":"MemberAccess","src":"2340:22:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4997,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"2364:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4998,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"2373:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4992,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2317:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2321:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2317:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2317:69:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4990,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"2290:19:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4829_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:97:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5001,"nodeType":"ExpressionStatement","src":"2290:97:53"}]},"id":5003,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2093:21:53","nodeType":"FunctionDefinition","parameters":{"id":4975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4970,"mutability":"mutable","name":"token","nameLocation":"2131:5:53","nodeType":"VariableDeclaration","scope":5003,"src":"2124:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},"typeName":{"id":4969,"nodeType":"UserDefinedTypeName","pathNode":{"id":4968,"name":"IERC20","nameLocations":["2124:6:53"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"2124:6:53"},"referencedDeclaration":4829,"src":"2124:6:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4972,"mutability":"mutable","name":"spender","nameLocation":"2154:7:53","nodeType":"VariableDeclaration","scope":5003,"src":"2146:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4971,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4974,"mutability":"mutable","name":"value","nameLocation":"2179:5:53","nodeType":"VariableDeclaration","scope":5003,"src":"2171:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4973,"name":"uint256","nodeType":"ElementaryTypeName","src":"2171:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2114:76:53"},"returnParameters":{"id":4976,"nodeType":"ParameterList","parameters":[],"src":"2200:0:53"},"scope":5146,"src":"2084:310:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5050,"nodeType":"Block","src":"2516:370:53","statements":[{"id":5049,"nodeType":"UncheckedBlock","src":"2526:354:53","statements":[{"assignments":[5014],"declarations":[{"constant":false,"id":5014,"mutability":"mutable","name":"oldAllowance","nameLocation":"2558:12:53","nodeType":"VariableDeclaration","scope":5049,"src":"2550:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5013,"name":"uint256","nodeType":"ElementaryTypeName","src":"2550:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5023,"initialValue":{"arguments":[{"arguments":[{"id":5019,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2597:4:53","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$5146","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$5146","typeString":"library SafeERC20"}],"id":5018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2589:7:53","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5017,"name":"address","nodeType":"ElementaryTypeName","src":"2589:7:53","typeDescriptions":{}}},"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:13:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5021,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"2604:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5015,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"2573:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":5016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2579:9:53","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":4806,"src":"2573:15:53","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":5022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:39:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2550:62:53"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5025,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5014,"src":"2634:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5010,"src":"2650:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2634:21:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":5028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2657:43:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":5024,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2626:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2626:75:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5030,"nodeType":"ExpressionStatement","src":"2626:75:53"},{"assignments":[5032],"declarations":[{"constant":false,"id":5032,"mutability":"mutable","name":"newAllowance","nameLocation":"2723:12:53","nodeType":"VariableDeclaration","scope":5049,"src":"2715:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5031,"name":"uint256","nodeType":"ElementaryTypeName","src":"2715:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5036,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5033,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5014,"src":"2738:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5010,"src":"2753:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2738:20:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2715:43:53"},{"expression":{"arguments":[{"id":5038,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"2792:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":5041,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"2822:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2828:7:53","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4816,"src":"2822:13:53","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2836:8:53","memberName":"selector","nodeType":"MemberAccess","src":"2822:22:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":5044,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"2846:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5045,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"2855:12:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5039,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2799:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2803:18:53","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2799:22:53","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":5046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:69:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5037,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"2772:19:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4829_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2772:97:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5048,"nodeType":"ExpressionStatement","src":"2772:97:53"}]}]},"id":5051,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2409:21:53","nodeType":"FunctionDefinition","parameters":{"id":5011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5006,"mutability":"mutable","name":"token","nameLocation":"2447:5:53","nodeType":"VariableDeclaration","scope":5051,"src":"2440:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},"typeName":{"id":5005,"nodeType":"UserDefinedTypeName","pathNode":{"id":5004,"name":"IERC20","nameLocations":["2440:6:53"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"2440:6:53"},"referencedDeclaration":4829,"src":"2440:6:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":5008,"mutability":"mutable","name":"spender","nameLocation":"2470:7:53","nodeType":"VariableDeclaration","scope":5051,"src":"2462:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5007,"name":"address","nodeType":"ElementaryTypeName","src":"2462:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5010,"mutability":"mutable","name":"value","nameLocation":"2495:5:53","nodeType":"VariableDeclaration","scope":5051,"src":"2487:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5009,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:76:53"},"returnParameters":{"id":5012,"nodeType":"ParameterList","parameters":[],"src":"2516:0:53"},"scope":5146,"src":"2400:486:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5106,"nodeType":"Block","src":"3107:257:53","statements":[{"assignments":[5072],"declarations":[{"constant":false,"id":5072,"mutability":"mutable","name":"nonceBefore","nameLocation":"3125:11:53","nodeType":"VariableDeclaration","scope":5106,"src":"3117:19:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5071,"name":"uint256","nodeType":"ElementaryTypeName","src":"3117:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5077,"initialValue":{"arguments":[{"id":5075,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"3152:5:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5073,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"3139:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4865","typeString":"contract IERC20Permit"}},"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3145:6:53","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":4858,"src":"3139:12:53","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:19:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3117:41:53"},{"expression":{"arguments":[{"id":5081,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"3181:5:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5082,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5058,"src":"3188:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5060,"src":"3197:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5084,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5062,"src":"3204:8:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5085,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5064,"src":"3214:1:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":5086,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5066,"src":"3217:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5087,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5068,"src":"3220:1:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5078,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"3168:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4865","typeString":"contract IERC20Permit"}},"id":5080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3174:6:53","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":4850,"src":"3168:12:53","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3168:54:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5089,"nodeType":"ExpressionStatement","src":"3168:54:53"},{"assignments":[5091],"declarations":[{"constant":false,"id":5091,"mutability":"mutable","name":"nonceAfter","nameLocation":"3240:10:53","nodeType":"VariableDeclaration","scope":5106,"src":"3232:18:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5090,"name":"uint256","nodeType":"ElementaryTypeName","src":"3232:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5096,"initialValue":{"arguments":[{"id":5094,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"3266:5:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5092,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"3253:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4865","typeString":"contract IERC20Permit"}},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:6:53","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":4858,"src":"3253:12:53","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3253:19:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3232:40:53"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5098,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"3290:10:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5099,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5072,"src":"3304:11:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3318:1:53","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3304:15:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3290:29:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":5103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3321:35:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":5097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3282:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:75:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5105,"nodeType":"ExpressionStatement","src":"3282:75:53"}]},"id":5107,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"2901:10:53","nodeType":"FunctionDefinition","parameters":{"id":5069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5054,"mutability":"mutable","name":"token","nameLocation":"2934:5:53","nodeType":"VariableDeclaration","scope":5107,"src":"2921:18:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4865","typeString":"contract IERC20Permit"},"typeName":{"id":5053,"nodeType":"UserDefinedTypeName","pathNode":{"id":5052,"name":"IERC20Permit","nameLocations":["2921:12:53"],"nodeType":"IdentifierPath","referencedDeclaration":4865,"src":"2921:12:53"},"referencedDeclaration":4865,"src":"2921:12:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4865","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":5056,"mutability":"mutable","name":"owner","nameLocation":"2957:5:53","nodeType":"VariableDeclaration","scope":5107,"src":"2949:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5055,"name":"address","nodeType":"ElementaryTypeName","src":"2949:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5058,"mutability":"mutable","name":"spender","nameLocation":"2980:7:53","nodeType":"VariableDeclaration","scope":5107,"src":"2972:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5057,"name":"address","nodeType":"ElementaryTypeName","src":"2972:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5060,"mutability":"mutable","name":"value","nameLocation":"3005:5:53","nodeType":"VariableDeclaration","scope":5107,"src":"2997:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5059,"name":"uint256","nodeType":"ElementaryTypeName","src":"2997:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5062,"mutability":"mutable","name":"deadline","nameLocation":"3028:8:53","nodeType":"VariableDeclaration","scope":5107,"src":"3020:16:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5061,"name":"uint256","nodeType":"ElementaryTypeName","src":"3020:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5064,"mutability":"mutable","name":"v","nameLocation":"3052:1:53","nodeType":"VariableDeclaration","scope":5107,"src":"3046:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5063,"name":"uint8","nodeType":"ElementaryTypeName","src":"3046:5:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5066,"mutability":"mutable","name":"r","nameLocation":"3071:1:53","nodeType":"VariableDeclaration","scope":5107,"src":"3063:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5065,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3063:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5068,"mutability":"mutable","name":"s","nameLocation":"3090:1:53","nodeType":"VariableDeclaration","scope":5107,"src":"3082:9:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3082:7:53","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2911:186:53"},"returnParameters":{"id":5070,"nodeType":"ParameterList","parameters":[],"src":"3107:0:53"},"scope":5146,"src":"2892:472:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5144,"nodeType":"Block","src":"3817:636:53","statements":[{"assignments":[5117],"declarations":[{"constant":false,"id":5117,"mutability":"mutable","name":"returndata","nameLocation":"4179:10:53","nodeType":"VariableDeclaration","scope":5144,"src":"4166:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5116,"name":"bytes","nodeType":"ElementaryTypeName","src":"4166:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5126,"initialValue":{"arguments":[{"id":5123,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"4220:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":5124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4226:34:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":5120,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"4200:5:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}],"id":5119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4192:7:53","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5118,"name":"address","nodeType":"ElementaryTypeName","src":"4192:7:53","typeDescriptions":{}}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:14:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4207:12:53","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":5236,"src":"4192:27:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":5125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:69:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4166:95:53"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5127,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5117,"src":"4275:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4286:6:53","memberName":"length","nodeType":"MemberAccess","src":"4275:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4295:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4275:21:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5143,"nodeType":"IfStatement","src":"4271:176:53","trueBody":{"id":5142,"nodeType":"Block","src":"4298:149:53","statements":[{"expression":{"arguments":[{"arguments":[{"id":5134,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5117,"src":"4370:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":5136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4383:4:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":5135,"name":"bool","nodeType":"ElementaryTypeName","src":"4383:4:53","typeDescriptions":{}}}],"id":5137,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4382:6:53","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":5132,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4359:3:53","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4363:6:53","memberName":"decode","nodeType":"MemberAccess","src":"4359:10:53","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4359:30:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":5139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4391:44:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":5131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4351:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4351:85:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5141,"nodeType":"ExpressionStatement","src":"4351:85:53"}]}}]},"documentation":{"id":5108,"nodeType":"StructuredDocumentation","src":"3370:372:53","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":5145,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3756:19:53","nodeType":"FunctionDefinition","parameters":{"id":5114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5111,"mutability":"mutable","name":"token","nameLocation":"3783:5:53","nodeType":"VariableDeclaration","scope":5145,"src":"3776:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"},"typeName":{"id":5110,"nodeType":"UserDefinedTypeName","pathNode":{"id":5109,"name":"IERC20","nameLocations":["3776:6:53"],"nodeType":"IdentifierPath","referencedDeclaration":4829,"src":"3776:6:53"},"referencedDeclaration":4829,"src":"3776:6:53","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4829","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":5113,"mutability":"mutable","name":"data","nameLocation":"3803:4:53","nodeType":"VariableDeclaration","scope":5145,"src":"3790:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5112,"name":"bytes","nodeType":"ElementaryTypeName","src":"3790:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:33:53"},"returnParameters":{"id":5115,"nodeType":"ParameterList","parameters":[],"src":"3817:0:53"},"scope":5146,"src":"3747:706:53","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":5147,"src":"707:3748:53","usedErrors":[]}],"src":"115:4341:53"},"id":53},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[5476]},"id":5477,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5148,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:54"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":5149,"nodeType":"StructuredDocumentation","src":"126:67:54","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":5476,"linearizedBaseContracts":[5476],"name":"Address","nameLocation":"202:7:54","nodeType":"ContractDefinition","nodes":[{"body":{"id":5163,"nodeType":"Block","src":"1241:254:54","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5157,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"1465:7:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:54","memberName":"code","nodeType":"MemberAccess","src":"1465:12:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:54","memberName":"length","nodeType":"MemberAccess","src":"1465:19:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:54","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5156,"id":5162,"nodeType":"Return","src":"1458:30:54"}]},"documentation":{"id":5150,"nodeType":"StructuredDocumentation","src":"216:954:54","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":5164,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:54","nodeType":"FunctionDefinition","parameters":{"id":5153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5152,"mutability":"mutable","name":"account","nameLocation":"1203:7:54","nodeType":"VariableDeclaration","scope":5164,"src":"1195:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5151,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:54"},"returnParameters":{"id":5156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5164,"src":"1235:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5154,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:54"},"scope":5476,"src":"1175:320:54","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5197,"nodeType":"Block","src":"2483:241:54","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5175,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:54","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$5476","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$5476","typeString":"library Address"}],"id":5174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:54","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5173,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:54","typeDescriptions":{}}},"id":5176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:54","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5178,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"2526:6:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":5180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":5172,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:54","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5182,"nodeType":"ExpressionStatement","src":"2493:73:54"},{"assignments":[5184,null],"declarations":[{"constant":false,"id":5184,"mutability":"mutable","name":"success","nameLocation":"2583:7:54","nodeType":"VariableDeclaration","scope":5197,"src":"2578:12:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5183,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5191,"initialValue":{"arguments":[{"hexValue":"","id":5189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":5185,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"2596:9:54","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:54","memberName":"call","nodeType":"MemberAccess","src":"2596:14:54","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5187,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"2618:6:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:54","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:54"},{"expression":{"arguments":[{"id":5193,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5184,"src":"2647:7:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":5194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":5192,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:54","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5196,"nodeType":"ExpressionStatement","src":"2639:78:54"}]},"documentation":{"id":5165,"nodeType":"StructuredDocumentation","src":"1501:906:54","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":5198,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:54","nodeType":"FunctionDefinition","parameters":{"id":5170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5167,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:54","nodeType":"VariableDeclaration","scope":5198,"src":"2431:25:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5166,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:54","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":5169,"mutability":"mutable","name":"amount","nameLocation":"2466:6:54","nodeType":"VariableDeclaration","scope":5198,"src":"2458:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5168,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:54"},"returnParameters":{"id":5171,"nodeType":"ParameterList","parameters":[],"src":"2483:0:54"},"scope":5476,"src":"2412:312:54","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5215,"nodeType":"Block","src":"3555:96:54","statements":[{"expression":{"arguments":[{"id":5209,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5201,"src":"3594:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5210,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"3602:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":5211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:54","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":5212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":5208,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5256,5300],"referencedDeclaration":5300,"src":"3572:21:54","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":5213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5207,"id":5214,"nodeType":"Return","src":"3565:79:54"}]},"documentation":{"id":5199,"nodeType":"StructuredDocumentation","src":"2730:731:54","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":5216,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:54","nodeType":"FunctionDefinition","parameters":{"id":5204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5201,"mutability":"mutable","name":"target","nameLocation":"3496:6:54","nodeType":"VariableDeclaration","scope":5216,"src":"3488:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5200,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5203,"mutability":"mutable","name":"data","nameLocation":"3517:4:54","nodeType":"VariableDeclaration","scope":5216,"src":"3504:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5202,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:54"},"returnParameters":{"id":5207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5216,"src":"3541:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5205,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:54"},"scope":5476,"src":"3466:185:54","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5235,"nodeType":"Block","src":"4020:76:54","statements":[{"expression":{"arguments":[{"id":5229,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5219,"src":"4059:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5230,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"4067:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":5231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:54","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5232,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"4076:12:54","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5228,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5256,5300],"referencedDeclaration":5300,"src":"4037:21:54","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":5233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5227,"id":5234,"nodeType":"Return","src":"4030:59:54"}]},"documentation":{"id":5217,"nodeType":"StructuredDocumentation","src":"3657:211:54","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":5236,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:54","nodeType":"FunctionDefinition","parameters":{"id":5224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5219,"mutability":"mutable","name":"target","nameLocation":"3912:6:54","nodeType":"VariableDeclaration","scope":5236,"src":"3904:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5218,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5221,"mutability":"mutable","name":"data","nameLocation":"3941:4:54","nodeType":"VariableDeclaration","scope":5236,"src":"3928:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5220,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5223,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:54","nodeType":"VariableDeclaration","scope":5236,"src":"3955:26:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5222,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:54"},"returnParameters":{"id":5227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5236,"src":"4006:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5225,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:54"},"scope":5476,"src":"3873:223:54","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5255,"nodeType":"Block","src":"4601:111:54","statements":[{"expression":{"arguments":[{"id":5249,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5239,"src":"4640:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5250,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5241,"src":"4648:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5251,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5243,"src":"4654:5:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":5252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":5248,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5256,5300],"referencedDeclaration":5300,"src":"4618:21:54","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":5253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5247,"id":5254,"nodeType":"Return","src":"4611:94:54"}]},"documentation":{"id":5237,"nodeType":"StructuredDocumentation","src":"4102:351:54","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":5256,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:54","nodeType":"FunctionDefinition","parameters":{"id":5244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5239,"mutability":"mutable","name":"target","nameLocation":"4506:6:54","nodeType":"VariableDeclaration","scope":5256,"src":"4498:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5238,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5241,"mutability":"mutable","name":"data","nameLocation":"4535:4:54","nodeType":"VariableDeclaration","scope":5256,"src":"4522:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5240,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5243,"mutability":"mutable","name":"value","nameLocation":"4557:5:54","nodeType":"VariableDeclaration","scope":5256,"src":"4549:13:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5242,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:54"},"returnParameters":{"id":5247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5256,"src":"4587:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5245,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:54"},"scope":5476,"src":"4458:254:54","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5299,"nodeType":"Block","src":"5139:267:54","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5273,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:54","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$5476","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$5476","typeString":"library Address"}],"id":5272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:54","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5271,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:54","typeDescriptions":{}}},"id":5274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:54","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"5182:5:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":5278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":5270,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:54","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5280,"nodeType":"ExpressionStatement","src":"5149:81:54"},{"assignments":[5282,5284],"declarations":[{"constant":false,"id":5282,"mutability":"mutable","name":"success","nameLocation":"5246:7:54","nodeType":"VariableDeclaration","scope":5299,"src":"5241:12:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5281,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5284,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:54","nodeType":"VariableDeclaration","scope":5299,"src":"5255:23:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5283,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5291,"initialValue":{"arguments":[{"id":5289,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5261,"src":"5308:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5285,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"5282:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:54","memberName":"call","nodeType":"MemberAccess","src":"5282:11:54","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5287,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"5301:5:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:54","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:54"},{"expression":{"arguments":[{"id":5293,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"5357:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5294,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5282,"src":"5365:7:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5295,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5284,"src":"5374:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5296,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"5386:12:54","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5292,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5431,"src":"5330:26:54","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5269,"id":5298,"nodeType":"Return","src":"5323:76:54"}]},"documentation":{"id":5257,"nodeType":"StructuredDocumentation","src":"4718:237:54","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":5300,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:54","nodeType":"FunctionDefinition","parameters":{"id":5266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5259,"mutability":"mutable","name":"target","nameLocation":"5008:6:54","nodeType":"VariableDeclaration","scope":5300,"src":"5000:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5258,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5261,"mutability":"mutable","name":"data","nameLocation":"5037:4:54","nodeType":"VariableDeclaration","scope":5300,"src":"5024:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5260,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5263,"mutability":"mutable","name":"value","nameLocation":"5059:5:54","nodeType":"VariableDeclaration","scope":5300,"src":"5051:13:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5262,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5265,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:54","nodeType":"VariableDeclaration","scope":5300,"src":"5074:26:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5264,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:54"},"returnParameters":{"id":5269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5300,"src":"5125:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5267,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:54"},"scope":5476,"src":"4960:446:54","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5316,"nodeType":"Block","src":"5683:97:54","statements":[{"expression":{"arguments":[{"id":5311,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"5719:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5312,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5305,"src":"5727:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":5313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":5310,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[5317,5346],"referencedDeclaration":5346,"src":"5700:18:54","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":5314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5309,"id":5315,"nodeType":"Return","src":"5693:80:54"}]},"documentation":{"id":5301,"nodeType":"StructuredDocumentation","src":"5412:166:54","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":5317,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:54","nodeType":"FunctionDefinition","parameters":{"id":5306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5303,"mutability":"mutable","name":"target","nameLocation":"5619:6:54","nodeType":"VariableDeclaration","scope":5317,"src":"5611:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5302,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5305,"mutability":"mutable","name":"data","nameLocation":"5640:4:54","nodeType":"VariableDeclaration","scope":5317,"src":"5627:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5304,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:54"},"returnParameters":{"id":5309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5317,"src":"5669:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5307,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:54"},"scope":5476,"src":"5583:197:54","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5345,"nodeType":"Block","src":"6122:168:54","statements":[{"assignments":[5330,5332],"declarations":[{"constant":false,"id":5330,"mutability":"mutable","name":"success","nameLocation":"6138:7:54","nodeType":"VariableDeclaration","scope":5345,"src":"6133:12:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5329,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5332,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:54","nodeType":"VariableDeclaration","scope":5345,"src":"6147:23:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5331,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5337,"initialValue":{"arguments":[{"id":5335,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5322,"src":"6192:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5333,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"6174:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:54","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:54","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":5336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:54"},{"expression":{"arguments":[{"id":5339,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"6241:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5340,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5330,"src":"6249:7:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5341,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5332,"src":"6258:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5342,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"6270:12:54","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5338,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5431,"src":"6214:26:54","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5328,"id":5344,"nodeType":"Return","src":"6207:76:54"}]},"documentation":{"id":5318,"nodeType":"StructuredDocumentation","src":"5786:173:54","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":5346,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:54","nodeType":"FunctionDefinition","parameters":{"id":5325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5320,"mutability":"mutable","name":"target","nameLocation":"6009:6:54","nodeType":"VariableDeclaration","scope":5346,"src":"6001:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5319,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5322,"mutability":"mutable","name":"data","nameLocation":"6038:4:54","nodeType":"VariableDeclaration","scope":5346,"src":"6025:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5321,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5324,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:54","nodeType":"VariableDeclaration","scope":5346,"src":"6052:26:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5323,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:54"},"returnParameters":{"id":5328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5346,"src":"6108:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5326,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:54"},"scope":5476,"src":"5964:326:54","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5362,"nodeType":"Block","src":"6566:101:54","statements":[{"expression":{"arguments":[{"id":5357,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5349,"src":"6604:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5358,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5351,"src":"6612:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":5359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":5356,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[5363,5392],"referencedDeclaration":5392,"src":"6583:20:54","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":5360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5355,"id":5361,"nodeType":"Return","src":"6576:84:54"}]},"documentation":{"id":5347,"nodeType":"StructuredDocumentation","src":"6296:168:54","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":5363,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:54","nodeType":"FunctionDefinition","parameters":{"id":5352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5349,"mutability":"mutable","name":"target","nameLocation":"6507:6:54","nodeType":"VariableDeclaration","scope":5363,"src":"6499:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5348,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5351,"mutability":"mutable","name":"data","nameLocation":"6528:4:54","nodeType":"VariableDeclaration","scope":5363,"src":"6515:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5350,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:54"},"returnParameters":{"id":5355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5363,"src":"6552:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5353,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:54"},"scope":5476,"src":"6469:198:54","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5391,"nodeType":"Block","src":"7008:170:54","statements":[{"assignments":[5376,5378],"declarations":[{"constant":false,"id":5376,"mutability":"mutable","name":"success","nameLocation":"7024:7:54","nodeType":"VariableDeclaration","scope":5391,"src":"7019:12:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5375,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5378,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:54","nodeType":"VariableDeclaration","scope":5391,"src":"7033:23:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5377,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5383,"initialValue":{"arguments":[{"id":5381,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5368,"src":"7080:4:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5379,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"7060:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:54","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:54","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:54"},{"expression":{"arguments":[{"id":5385,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"7129:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5386,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5376,"src":"7137:7:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5387,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5378,"src":"7146:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5388,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5370,"src":"7158:12:54","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5384,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5431,"src":"7102:26:54","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5374,"id":5390,"nodeType":"Return","src":"7095:76:54"}]},"documentation":{"id":5364,"nodeType":"StructuredDocumentation","src":"6673:175:54","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":5392,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:54","nodeType":"FunctionDefinition","parameters":{"id":5371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5366,"mutability":"mutable","name":"target","nameLocation":"6900:6:54","nodeType":"VariableDeclaration","scope":5392,"src":"6892:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5365,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5368,"mutability":"mutable","name":"data","nameLocation":"6929:4:54","nodeType":"VariableDeclaration","scope":5392,"src":"6916:17:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5367,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5370,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:54","nodeType":"VariableDeclaration","scope":5392,"src":"6943:26:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5369,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:54"},"returnParameters":{"id":5374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5392,"src":"6994:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5372,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:54"},"scope":5476,"src":"6853:325:54","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5430,"nodeType":"Block","src":"7660:434:54","statements":[{"condition":{"id":5406,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"7674:7:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5428,"nodeType":"Block","src":"8030:58:54","statements":[{"expression":{"arguments":[{"id":5424,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"8052:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5425,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5401,"src":"8064:12:54","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5423,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5475,"src":"8044:7:54","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":5426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5427,"nodeType":"ExpressionStatement","src":"8044:33:54"}]},"id":5429,"nodeType":"IfStatement","src":"7670:418:54","trueBody":{"id":5422,"nodeType":"Block","src":"7683:341:54","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5407,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"7701:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:54","memberName":"length","nodeType":"MemberAccess","src":"7701:17:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:54","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5419,"nodeType":"IfStatement","src":"7697:286:54","trueBody":{"id":5418,"nodeType":"Block","src":"7725:258:54","statements":[{"expression":{"arguments":[{"arguments":[{"id":5413,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5395,"src":"7927:6:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5412,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5164,"src":"7916:10:54","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":5415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:54","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":5411,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:54","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5417,"nodeType":"ExpressionStatement","src":"7908:60:54"}]}},{"expression":{"id":5420,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5399,"src":"8003:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5405,"id":5421,"nodeType":"Return","src":"7996:17:54"}]}}]},"documentation":{"id":5393,"nodeType":"StructuredDocumentation","src":"7184:277:54","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":5431,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:54","nodeType":"FunctionDefinition","parameters":{"id":5402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5395,"mutability":"mutable","name":"target","nameLocation":"7519:6:54","nodeType":"VariableDeclaration","scope":5431,"src":"7511:14:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5394,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5397,"mutability":"mutable","name":"success","nameLocation":"7540:7:54","nodeType":"VariableDeclaration","scope":5431,"src":"7535:12:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5396,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5399,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:54","nodeType":"VariableDeclaration","scope":5431,"src":"7557:23:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5398,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5401,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:54","nodeType":"VariableDeclaration","scope":5431,"src":"7590:26:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5400,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:54"},"returnParameters":{"id":5405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5431,"src":"7646:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5403,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:54"},"scope":5476,"src":"7466:628:54","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5454,"nodeType":"Block","src":"8475:135:54","statements":[{"condition":{"id":5443,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"8489:7:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5452,"nodeType":"Block","src":"8546:58:54","statements":[{"expression":{"arguments":[{"id":5448,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5436,"src":"8568:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5449,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5438,"src":"8580:12:54","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5447,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5475,"src":"8560:7:54","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5451,"nodeType":"ExpressionStatement","src":"8560:33:54"}]},"id":5453,"nodeType":"IfStatement","src":"8485:119:54","trueBody":{"id":5446,"nodeType":"Block","src":"8498:42:54","statements":[{"expression":{"id":5444,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5436,"src":"8519:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5442,"id":5445,"nodeType":"Return","src":"8512:17:54"}]}}]},"documentation":{"id":5432,"nodeType":"StructuredDocumentation","src":"8100:210:54","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":5455,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:54","nodeType":"FunctionDefinition","parameters":{"id":5439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5434,"mutability":"mutable","name":"success","nameLocation":"8355:7:54","nodeType":"VariableDeclaration","scope":5455,"src":"8350:12:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5433,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5436,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:54","nodeType":"VariableDeclaration","scope":5455,"src":"8372:23:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5435,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5438,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:54","nodeType":"VariableDeclaration","scope":5455,"src":"8405:26:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5437,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:54"},"returnParameters":{"id":5442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5455,"src":"8461:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5440,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:54"},"scope":5476,"src":"8315:295:54","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5474,"nodeType":"Block","src":"8699:457:54","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5462,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5457,"src":"8775:10:54","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:54","memberName":"length","nodeType":"MemberAccess","src":"8775:17:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:54","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5472,"nodeType":"Block","src":"9105:45:54","statements":[{"expression":{"arguments":[{"id":5469,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5459,"src":"9126:12:54","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5468,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:54","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:54","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5471,"nodeType":"ExpressionStatement","src":"9119:20:54"}]},"id":5473,"nodeType":"IfStatement","src":"8771:379:54","trueBody":{"id":5467,"nodeType":"Block","src":"8798:301:54","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:54","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:54","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:54"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:54"},"nodeType":"YulFunctionCall","src":"8997:17:54"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:54","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:54","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:54"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:54"},"nodeType":"YulFunctionCall","src":"9038:19:54"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:54"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:54"},"nodeType":"YulFunctionCall","src":"9031:44:54"},"nodeType":"YulExpressionStatement","src":"9031:44:54"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5457,"isOffset":false,"isSlot":false,"src":"9003:10:54","valueSize":1},{"declaration":5457,"isOffset":false,"isSlot":false,"src":"9046:10:54","valueSize":1}],"id":5466,"nodeType":"InlineAssembly","src":"8947:142:54"}]}}]},"id":5475,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:54","nodeType":"FunctionDefinition","parameters":{"id":5460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5457,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:54","nodeType":"VariableDeclaration","scope":5475,"src":"8633:23:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5456,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5459,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:54","nodeType":"VariableDeclaration","scope":5475,"src":"8658:26:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5458,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:54","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:54"},"returnParameters":{"id":5461,"nodeType":"ParameterList","parameters":[],"src":"8699:0:54"},"scope":5476,"src":"8616:540:54","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":5477,"src":"194:8964:54","usedErrors":[]}],"src":"101:9058:54"},"id":54},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[5498]},"id":5499,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5478,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:55"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":5479,"nodeType":"StructuredDocumentation","src":"111:496:55","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":5498,"linearizedBaseContracts":[5498],"name":"Context","nameLocation":"626:7:55","nodeType":"ContractDefinition","nodes":[{"body":{"id":5487,"nodeType":"Block","src":"702:34:55","statements":[{"expression":{"expression":{"id":5484,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:55","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:55","memberName":"sender","nodeType":"MemberAccess","src":"719:10:55","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5483,"id":5486,"nodeType":"Return","src":"712:17:55"}]},"id":5488,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:55","nodeType":"FunctionDefinition","parameters":{"id":5480,"nodeType":"ParameterList","parameters":[],"src":"659:2:55"},"returnParameters":{"id":5483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5488,"src":"693:7:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5481,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:55"},"scope":5498,"src":"640:96:55","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":5496,"nodeType":"Block","src":"809:32:55","statements":[{"expression":{"expression":{"id":5493,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:55","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:55","memberName":"data","nodeType":"MemberAccess","src":"826:8:55","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":5492,"id":5495,"nodeType":"Return","src":"819:15:55"}]},"id":5497,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:55","nodeType":"FunctionDefinition","parameters":{"id":5489,"nodeType":"ParameterList","parameters":[],"src":"759:2:55"},"returnParameters":{"id":5492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5497,"src":"793:14:55","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5490,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:55","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:55"},"scope":5498,"src":"742:99:55","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":5499,"src":"608:235:55","usedErrors":[]}],"src":"86:758:55"},"id":55},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[5558]},"id":5559,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5500,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:56"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":5501,"nodeType":"StructuredDocumentation","src":"130:1148:56","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":5558,"linearizedBaseContracts":[5558],"name":"StorageSlot","nameLocation":"1287:11:56","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":5504,"members":[{"constant":false,"id":5503,"mutability":"mutable","name":"value","nameLocation":"1342:5:56","nodeType":"VariableDeclaration","scope":5504,"src":"1334:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5502,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:56","nodeType":"StructDefinition","scope":5558,"src":"1305:49:56","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":5507,"members":[{"constant":false,"id":5506,"mutability":"mutable","name":"value","nameLocation":"1394:5:56","nodeType":"VariableDeclaration","scope":5507,"src":"1389:10:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5505,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:56","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:56","nodeType":"StructDefinition","scope":5558,"src":"1360:46:56","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":5510,"members":[{"constant":false,"id":5509,"mutability":"mutable","name":"value","nameLocation":"1449:5:56","nodeType":"VariableDeclaration","scope":5510,"src":"1441:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:56","nodeType":"StructDefinition","scope":5558,"src":"1412:49:56","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":5513,"members":[{"constant":false,"id":5512,"mutability":"mutable","name":"value","nameLocation":"1504:5:56","nodeType":"VariableDeclaration","scope":5513,"src":"1496:13:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5511,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:56","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:56","nodeType":"StructDefinition","scope":5558,"src":"1467:49:56","visibility":"public"},{"body":{"id":5523,"nodeType":"Block","src":"1698:106:56","statements":[{"AST":{"nodeType":"YulBlock","src":"1760:38:56","statements":[{"nodeType":"YulAssignment","src":"1774:14:56","value":{"name":"slot","nodeType":"YulIdentifier","src":"1784:4:56"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1774:6:56"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5520,"isOffset":false,"isSlot":true,"src":"1774:6:56","suffix":"slot","valueSize":1},{"declaration":5516,"isOffset":false,"isSlot":false,"src":"1784:4:56","valueSize":1}],"id":5522,"nodeType":"InlineAssembly","src":"1751:47:56"}]},"documentation":{"id":5514,"nodeType":"StructuredDocumentation","src":"1522:87:56","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":5524,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:56","nodeType":"FunctionDefinition","parameters":{"id":5517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5516,"mutability":"mutable","name":"slot","nameLocation":"1646:4:56","nodeType":"VariableDeclaration","scope":5524,"src":"1638:12:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:56"},"returnParameters":{"id":5521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5520,"mutability":"mutable","name":"r","nameLocation":"1695:1:56","nodeType":"VariableDeclaration","scope":5524,"src":"1675:21:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5504_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":5519,"nodeType":"UserDefinedTypeName","pathNode":{"id":5518,"name":"AddressSlot","nameLocations":["1675:11:56"],"nodeType":"IdentifierPath","referencedDeclaration":5504,"src":"1675:11:56"},"referencedDeclaration":5504,"src":"1675:11:56","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$5504_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:56"},"scope":5558,"src":"1614:190:56","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5534,"nodeType":"Block","src":"1986:106:56","statements":[{"AST":{"nodeType":"YulBlock","src":"2048:38:56","statements":[{"nodeType":"YulAssignment","src":"2062:14:56","value":{"name":"slot","nodeType":"YulIdentifier","src":"2072:4:56"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2062:6:56"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5531,"isOffset":false,"isSlot":true,"src":"2062:6:56","suffix":"slot","valueSize":1},{"declaration":5527,"isOffset":false,"isSlot":false,"src":"2072:4:56","valueSize":1}],"id":5533,"nodeType":"InlineAssembly","src":"2039:47:56"}]},"documentation":{"id":5525,"nodeType":"StructuredDocumentation","src":"1810:87:56","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":5535,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:56","nodeType":"FunctionDefinition","parameters":{"id":5528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5527,"mutability":"mutable","name":"slot","nameLocation":"1934:4:56","nodeType":"VariableDeclaration","scope":5535,"src":"1926:12:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:56"},"returnParameters":{"id":5532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5531,"mutability":"mutable","name":"r","nameLocation":"1983:1:56","nodeType":"VariableDeclaration","scope":5535,"src":"1963:21:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$5507_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":5530,"nodeType":"UserDefinedTypeName","pathNode":{"id":5529,"name":"BooleanSlot","nameLocations":["1963:11:56"],"nodeType":"IdentifierPath","referencedDeclaration":5507,"src":"1963:11:56"},"referencedDeclaration":5507,"src":"1963:11:56","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$5507_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:56"},"scope":5558,"src":"1902:190:56","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5545,"nodeType":"Block","src":"2274:106:56","statements":[{"AST":{"nodeType":"YulBlock","src":"2336:38:56","statements":[{"nodeType":"YulAssignment","src":"2350:14:56","value":{"name":"slot","nodeType":"YulIdentifier","src":"2360:4:56"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2350:6:56"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5542,"isOffset":false,"isSlot":true,"src":"2350:6:56","suffix":"slot","valueSize":1},{"declaration":5538,"isOffset":false,"isSlot":false,"src":"2360:4:56","valueSize":1}],"id":5544,"nodeType":"InlineAssembly","src":"2327:47:56"}]},"documentation":{"id":5536,"nodeType":"StructuredDocumentation","src":"2098:87:56","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":5546,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:56","nodeType":"FunctionDefinition","parameters":{"id":5539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5538,"mutability":"mutable","name":"slot","nameLocation":"2222:4:56","nodeType":"VariableDeclaration","scope":5546,"src":"2214:12:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:56"},"returnParameters":{"id":5543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5542,"mutability":"mutable","name":"r","nameLocation":"2271:1:56","nodeType":"VariableDeclaration","scope":5546,"src":"2251:21:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$5510_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":5541,"nodeType":"UserDefinedTypeName","pathNode":{"id":5540,"name":"Bytes32Slot","nameLocations":["2251:11:56"],"nodeType":"IdentifierPath","referencedDeclaration":5510,"src":"2251:11:56"},"referencedDeclaration":5510,"src":"2251:11:56","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$5510_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:56"},"scope":5558,"src":"2190:190:56","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5556,"nodeType":"Block","src":"2562:106:56","statements":[{"AST":{"nodeType":"YulBlock","src":"2624:38:56","statements":[{"nodeType":"YulAssignment","src":"2638:14:56","value":{"name":"slot","nodeType":"YulIdentifier","src":"2648:4:56"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2638:6:56"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5553,"isOffset":false,"isSlot":true,"src":"2638:6:56","suffix":"slot","valueSize":1},{"declaration":5549,"isOffset":false,"isSlot":false,"src":"2648:4:56","valueSize":1}],"id":5555,"nodeType":"InlineAssembly","src":"2615:47:56"}]},"documentation":{"id":5547,"nodeType":"StructuredDocumentation","src":"2386:87:56","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":5557,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:56","nodeType":"FunctionDefinition","parameters":{"id":5550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5549,"mutability":"mutable","name":"slot","nameLocation":"2510:4:56","nodeType":"VariableDeclaration","scope":5557,"src":"2502:12:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:56","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:56"},"returnParameters":{"id":5554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5553,"mutability":"mutable","name":"r","nameLocation":"2559:1:56","nodeType":"VariableDeclaration","scope":5557,"src":"2539:21:56","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5513_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":5552,"nodeType":"UserDefinedTypeName","pathNode":{"id":5551,"name":"Uint256Slot","nameLocations":["2539:11:56"],"nodeType":"IdentifierPath","referencedDeclaration":5513,"src":"2539:11:56"},"referencedDeclaration":5513,"src":"2539:11:56","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$5513_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:56"},"scope":5558,"src":"2478:190:56","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5559,"src":"1279:1391:56","usedErrors":[]}],"src":"105:2566:56"},"id":56},"contracts/token/erc20/PRIMATEv2.sol":{"ast":{"absolutePath":"contracts/token/erc20/PRIMATEv2.sol","exportedSymbols":{"Context":[5498],"ContractOwnership":[44],"ERC20":[1343],"ERC20BatchTransfers":[1363],"ERC20Burnable":[1383],"ERC20Detailed":[1418],"ERC20Metadata":[1446],"ERC20Mintable":[1470],"ERC20Permit":[1496],"ERC20SafeTransfers":[1516],"ForwarderRegistryContext":[874],"ForwarderRegistryContextBase":[994],"IForwarderRegistry":[1020],"PRIMATEv2":[5664],"TokenRecovery":[1100]},"id":5665,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5560,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"32:23:57"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":5562,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1021,"src":"57:114:57","symbolAliases":[{"foreign":{"id":5561,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"65:18:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol","id":5564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1344,"src":"172:82:57","symbolAliases":[{"foreign":{"id":5563,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"180:5:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol","id":5566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1419,"src":"255:98:57","symbolAliases":[{"foreign":{"id":5565,"name":"ERC20Detailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"263:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol","id":5568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1447,"src":"354:98:57","symbolAliases":[{"foreign":{"id":5567,"name":"ERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"362:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol","id":5570,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1497,"src":"453:94:57","symbolAliases":[{"foreign":{"id":5569,"name":"ERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"461:11:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol","id":5572,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1517,"src":"548:108:57","symbolAliases":[{"foreign":{"id":5571,"name":"ERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"556:18:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol","id":5574,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1364,"src":"657:110:57","symbolAliases":[{"foreign":{"id":5573,"name":"ERC20BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"665:19:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol","id":5576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1471,"src":"768:98:57","symbolAliases":[{"foreign":{"id":5575,"name":"ERC20Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"776:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol","id":5578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1384,"src":"867:98:57","symbolAliases":[{"foreign":{"id":5577,"name":"ERC20Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"875:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","id":5580,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":1101,"src":"966:95:57","symbolAliases":[{"foreign":{"id":5579,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"974:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":5582,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":45,"src":"1062:101:57","symbolAliases":[{"foreign":{"id":5581,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1070:17:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":5584,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":5499,"src":"1164:66:57","symbolAliases":[{"foreign":{"id":5583,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5498,"src":"1172:7:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":5586,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":995,"src":"1231:128:57","symbolAliases":[{"foreign":{"id":5585,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"1239:28:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":5588,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5665,"sourceUnit":875,"src":"1360:115:57","symbolAliases":[{"foreign":{"id":5587,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"1368:24:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5589,"name":"ERC20","nameLocations":["1503:5:57"],"nodeType":"IdentifierPath","referencedDeclaration":1343,"src":"1503:5:57"},"id":5590,"nodeType":"InheritanceSpecifier","src":"1503:5:57"},{"baseName":{"id":5591,"name":"ERC20Detailed","nameLocations":["1514:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1418,"src":"1514:13:57"},"id":5592,"nodeType":"InheritanceSpecifier","src":"1514:13:57"},{"baseName":{"id":5593,"name":"ERC20Metadata","nameLocations":["1533:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1446,"src":"1533:13:57"},"id":5594,"nodeType":"InheritanceSpecifier","src":"1533:13:57"},{"baseName":{"id":5595,"name":"ERC20Mintable","nameLocations":["1552:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"1552:13:57"},"id":5596,"nodeType":"InheritanceSpecifier","src":"1552:13:57"},{"baseName":{"id":5597,"name":"ERC20Burnable","nameLocations":["1571:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1383,"src":"1571:13:57"},"id":5598,"nodeType":"InheritanceSpecifier","src":"1571:13:57"},{"baseName":{"id":5599,"name":"ERC20SafeTransfers","nameLocations":["1590:18:57"],"nodeType":"IdentifierPath","referencedDeclaration":1516,"src":"1590:18:57"},"id":5600,"nodeType":"InheritanceSpecifier","src":"1590:18:57"},{"baseName":{"id":5601,"name":"ERC20BatchTransfers","nameLocations":["1614:19:57"],"nodeType":"IdentifierPath","referencedDeclaration":1363,"src":"1614:19:57"},"id":5602,"nodeType":"InheritanceSpecifier","src":"1614:19:57"},{"baseName":{"id":5603,"name":"ERC20Permit","nameLocations":["1639:11:57"],"nodeType":"IdentifierPath","referencedDeclaration":1496,"src":"1639:11:57"},"id":5604,"nodeType":"InheritanceSpecifier","src":"1639:11:57"},{"baseName":{"id":5605,"name":"ForwarderRegistryContext","nameLocations":["1656:24:57"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"1656:24:57"},"id":5606,"nodeType":"InheritanceSpecifier","src":"1656:24:57"},{"baseName":{"id":5607,"name":"TokenRecovery","nameLocations":["1686:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1100,"src":"1686:13:57"},"id":5608,"nodeType":"InheritanceSpecifier","src":"1686:13:57"}],"canonicalName":"PRIMATEv2","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5664,"linearizedBaseContracts":[5664,1100,874,1006,994,1496,2170,2503,1363,1792,2379,1516,2247,2551,1383,1884,2413,1470,11,1446,44,1418,1940,2435,1343,713,725,232,255,1319,182,2089,2467,2002,2445,1717,2349,2325,5498],"name":"PRIMATEv2","nameLocation":"1486:9:57","nodeType":"ContractDefinition","nodes":[{"body":{"id":5636,"nodeType":"Block","src":"2062:2:57","statements":[]},"id":5637,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[],"id":5620,"kind":"baseConstructorSpecifier","modifierName":{"id":5619,"name":"ERC20","nameLocations":["1875:5:57"],"nodeType":"IdentifierPath","referencedDeclaration":1343,"src":"1875:5:57"},"nodeType":"ModifierInvocation","src":"1875:7:57"},{"arguments":[{"id":5622,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5610,"src":"1905:9:57","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5623,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5612,"src":"1916:11:57","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5624,"name":"tokenDecimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5614,"src":"1929:13:57","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5625,"kind":"baseConstructorSpecifier","modifierName":{"id":5621,"name":"ERC20Detailed","nameLocations":["1891:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1418,"src":"1891:13:57"},"nodeType":"ModifierInvocation","src":"1891:52:57"},{"arguments":[],"id":5627,"kind":"baseConstructorSpecifier","modifierName":{"id":5626,"name":"ERC20Metadata","nameLocations":["1952:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1446,"src":"1952:13:57"},"nodeType":"ModifierInvocation","src":"1952:15:57"},{"arguments":[{"id":5629,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"2001:17:57","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}}],"id":5630,"kind":"baseConstructorSpecifier","modifierName":{"id":5628,"name":"ForwarderRegistryContext","nameLocations":["1976:24:57"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"1976:24:57"},"nodeType":"ModifierInvocation","src":"1976:43:57"},{"arguments":[{"expression":{"id":5632,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2046:3:57","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2050:6:57","memberName":"sender","nodeType":"MemberAccess","src":"2046:10:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5634,"kind":"baseConstructorSpecifier","modifierName":{"id":5631,"name":"ContractOwnership","nameLocations":["2028:17:57"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"2028:17:57"},"nodeType":"ModifierInvocation","src":"2028:29:57"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5610,"mutability":"mutable","name":"tokenName","nameLocation":"1741:9:57","nodeType":"VariableDeclaration","scope":5637,"src":"1727:23:57","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5609,"name":"string","nodeType":"ElementaryTypeName","src":"1727:6:57","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5612,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1774:11:57","nodeType":"VariableDeclaration","scope":5637,"src":"1760:25:57","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5611,"name":"string","nodeType":"ElementaryTypeName","src":"1760:6:57","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5614,"mutability":"mutable","name":"tokenDecimals","nameLocation":"1801:13:57","nodeType":"VariableDeclaration","scope":5637,"src":"1795:19:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5613,"name":"uint8","nodeType":"ElementaryTypeName","src":"1795:5:57","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5617,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"1843:17:57","nodeType":"VariableDeclaration","scope":5637,"src":"1824:36:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"},"typeName":{"id":5616,"nodeType":"UserDefinedTypeName","pathNode":{"id":5615,"name":"IForwarderRegistry","nameLocations":["1824:18:57"],"nodeType":"IdentifierPath","referencedDeclaration":1020,"src":"1824:18:57"},"referencedDeclaration":1020,"src":"1824:18:57","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1020","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"1717:149:57"},"returnParameters":{"id":5635,"nodeType":"ParameterList","parameters":[],"src":"2062:0:57"},"scope":5664,"src":"1706:358:57","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[945,5488],"body":{"id":5649,"nodeType":"Block","src":"2180:65:57","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5645,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"2197:28:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$994_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":5646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2226:10:57","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":945,"src":"2197:39:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2197:41:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5644,"id":5648,"nodeType":"Return","src":"2190:48:57"}]},"id":5650,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"2079:10:57","nodeType":"FunctionDefinition","overrides":{"id":5641,"nodeType":"OverrideSpecifier","overrides":[{"id":5639,"name":"Context","nameLocations":["2123:7:57"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"2123:7:57"},{"id":5640,"name":"ForwarderRegistryContextBase","nameLocations":["2132:28:57"],"nodeType":"IdentifierPath","referencedDeclaration":994,"src":"2132:28:57"}],"src":"2114:47:57"},"parameters":{"id":5638,"nodeType":"ParameterList","parameters":[],"src":"2089:2:57"},"returnParameters":{"id":5644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5650,"src":"2171:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5642,"name":"address","nodeType":"ElementaryTypeName","src":"2171:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2170:9:57"},"scope":5664,"src":"2070:175:57","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[993,5497],"body":{"id":5662,"nodeType":"Block","src":"2366:63:57","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5658,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"2383:28:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$994_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":5659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2412:8:57","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":993,"src":"2383:37:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2383:39:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":5657,"id":5661,"nodeType":"Return","src":"2376:46:57"}]},"id":5663,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"2260:8:57","nodeType":"FunctionDefinition","overrides":{"id":5654,"nodeType":"OverrideSpecifier","overrides":[{"id":5652,"name":"Context","nameLocations":["2302:7:57"],"nodeType":"IdentifierPath","referencedDeclaration":5498,"src":"2302:7:57"},{"id":5653,"name":"ForwarderRegistryContextBase","nameLocations":["2311:28:57"],"nodeType":"IdentifierPath","referencedDeclaration":994,"src":"2311:28:57"}],"src":"2293:47:57"},"parameters":{"id":5651,"nodeType":"ParameterList","parameters":[],"src":"2268:2:57"},"returnParameters":{"id":5657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5663,"src":"2350:14:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5655,"name":"bytes","nodeType":"ElementaryTypeName","src":"2350:5:57","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2349:16:57"},"scope":5664,"src":"2251:178:57","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":5665,"src":"1477:954:57","usedErrors":[]}],"src":"32:2400:57"},"id":57}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xad30286210b6693b212a323037dde404939d7745e4578ee1a899cce60b3aa216\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(\\n        Layout storage s,\\n        address sender,\\n        bytes32 role\\n    ) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40e5d3ab6520371a3631dd21841ece33ebb1137663c1557d8b566abe50cd0710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"the account granted with the role.","operator":"the initiator of the grant.","role":"the granted role."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"the account losing the role.","operator":"the initiator of the revocation, or identical to `account` for a renouncement.","role":"the revoked or renounced role."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"the account granted with the role.\",\"operator\":\"the initiator of the grant.\",\"role\":\"the granted role.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"the account losing the role.\",\"operator\":\"the initiator of the revocation, or identical to `account` for a renouncement.\",\"role\":\"the revoked or renounced role.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(\\n        Layout storage s,\\n        address sender,\\n        bytes32 role\\n    ) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40e5d3ab6520371a3631dd21841ece33ebb1137663c1557d8b566abe50cd0710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006fcefad644a7f42f71d041c61dc03ec102f2bdfe19fddfde7d9ac222e61948c64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xFC 0xEF 0xAD PUSH5 0x4A7F42F71D DIV SHR PUSH2 0xDC03 0xEC LT 0x2F 0x2B 0xDF 0xE1 SWAP16 0xDD REVERT 0xE7 0xD9 0xAC 0x22 0x2E PUSH2 0x948C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"119:3292:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;119:3292:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006fcefad644a7f42f71d041c61dc03ec102f2bdfe19fddfde7d9ac222e61948c64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xFC 0xEF 0xAD PUSH5 0x4A7F42F71D DIV SHR PUSH2 0xDC03 0xEC LT 0x2F 0x2B 0xDF 0xE1 SWAP16 0xDD REVERT 0xE7 0xD9 0xAC 0x22 0x2E PUSH2 0x948C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"119:3292:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(\\n        Layout storage s,\\n        address sender,\\n        bytes32 role\\n    ) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40e5d3ab6520371a3631dd21841ece33ebb1137663c1557d8b566abe50cd0710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122058e862007f1ec5206220ff727f9b50df4fb5c78796bde6f74c343be7fb6d7c2364736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xE8 PUSH3 0x7F1E 0xC5 KECCAK256 PUSH3 0x20FF72 PUSH32 0x9B50DF4FB5C78796BDE6F74C343BE7FB6D7C2364736F6C634300081100330000 ","sourceMap":"301:3612:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;301:3612:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122058e862007f1ec5206220ff727f9b50df4fb5c78796bde6f74c343be7fb6d7c2364736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xE8 PUSH3 0x7F1E 0xC5 KECCAK256 PUSH3 0x20FF72 PUSH32 0x9B50DF4FB5C78796BDE6F74C343BE7FB6D7C2364736F6C634300081100330000 ","sourceMap":"301:3612:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ca865a1842b03cf53fa389e806109ef9945cda97c5c763bb82cd0fbf5120c50564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA DUP7 GAS XOR TIMESTAMP 0xB0 EXTCODECOPY CREATE2 EXTCODEHASH LOG3 DUP10 0xE8 MOD LT SWAP15 0xF9 SWAP5 0x5C 0xDA SWAP8 0xC5 0xC7 PUSH4 0xBB82CD0F 0xBF MLOAD KECCAK256 0xC5 SDIV PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"111:1708:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;111:1708:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ca865a1842b03cf53fa389e806109ef9945cda97c5c763bb82cd0fbf5120c50564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA DUP7 GAS XOR TIMESTAMP 0xB0 EXTCODECOPY CREATE2 EXTCODEHASH LOG3 DUP10 0xE8 MOD LT SWAP15 0xF9 SWAP5 0x5C 0xDA SWAP8 0xC5 0xC7 PUSH4 0xBB82CD0F 0xBF MLOAD KECCAK256 0xC5 SDIV PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"111:1708:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbd7b2882eff82d3e06d4c27857e3b2256fa2e542a2347aedabb422a54d6481564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xD7 0xB2 DUP9 0x2E SELFDESTRUCT DUP3 0xD3 0xE0 PUSH14 0x4C27857E3B2256FA2E542A2347AE 0xDA 0xBB TIMESTAMP 0x2A SLOAD 0xD6 BASEFEE ISZERO PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"201:568:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;201:568:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbd7b2882eff82d3e06d4c27857e3b2256fa2e542a2347aedabb422a54d6481564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xD7 0xB2 DUP9 0x2E SELFDESTRUCT DUP3 0xD3 0xE0 PUSH14 0x4C27857E3B2256FA2E542A2347AE 0xDA 0xBB TIMESTAMP 0x2A SLOAD 0xD6 BASEFEE ISZERO PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"201:568:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc94e7a6a3360beeb1586f37beebb947c6d4d1325d736e78773bc4b68bcd18bf64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP5 0xE7 0xA6 LOG3 CALLDATASIZE SIGNEXTEND 0xEE 0xB1 PC PUSH16 0x37BEEBB947C6D4D1325D736E78773BC4 0xB6 DUP12 0xCD XOR 0xBF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"225:593:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;225:593:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc94e7a6a3360beeb1586f37beebb947c6d4d1325d736e78773bc4b68bcd18bf64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP5 0xE7 0xA6 LOG3 CALLDATASIZE SIGNEXTEND 0xEE 0xB1 PC PUSH16 0x37BEEBB947C6D4D1325D736E78773BC4 0xB6 DUP12 0xCD XOR 0xBF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"225:593:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(\\n        address[] calldata accounts,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(\\n        address[] calldata accounts,\\n        IERC721[] calldata contracts,\\n        uint256[] calldata tokenIds\\n    ) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb7a7e313881a8a1e982d22f39e5d58fc13f6a73484a89af03891f62af6259cc3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x715b3aa1e8452ad6320e6aeb1cb0dbc1dfc93f906c258f05431b6c572ba21348\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610cef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806373c8a95814610046578063c3666c361461005b578063f7ba94bd1461006e575b600080fd5b610059610054366004610a4e565b610081565b005b610059610069366004610a4e565b6101b1565b61005961007c366004610ae8565b610354565b610094335b61008e610440565b90610474565b8483811480156100a357508082145b61010e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064015b60405180910390fd5b60005b8181146101a75761019f88888381811061012d5761012d610b54565b90506020020160208101906101429190610ba8565b85858481811061015457610154610b54565b9050602002013588888581811061016d5761016d610b54565b90506020020160208101906101829190610ba8565b73ffffffffffffffffffffffffffffffffffffffff1691906104fb565b600101610111565b5050505050505050565b6101ba33610086565b8483811480156101c957508082145b61022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b8181146101a75785858281811061024b5761024b610b54565b90506020020160208101906102609190610ba8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a8581811061028e5761028e610b54565b90506020020160208101906102a39190610ba8565b8787868181106102b5576102b5610b54565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b50505050806001019050610232565b61035d33610086565b828181146103c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b818114610438576104308484838181106103e6576103e6610b54565b905060200201358787848181106103ff576103ff610b54565b90506020020160208101906104149190610ba8565b73ffffffffffffffffffffffffffffffffffffffff169061058d565b6001016103ca565b505050505050565b60008061046e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610bcc565b92915050565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146104f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e657200000000000000006044820152606401610105565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105889084906106e7565b505050565b804710156105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610105565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610105565b6000610749826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107f39092919063ffffffff16565b80519091501561058857808060200190518101906107679190610c06565b610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610105565b6060610802848460008561080a565b949350505050565b60608247101561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610105565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108c59190610c4c565b60006040518083038185875af1925050503d8060008114610902576040519150601f19603f3d011682016040523d82523d6000602084013e610907565b606091505b509150915061091887838387610923565b979650505050505050565b606083156109b95782516000036109b25773ffffffffffffffffffffffffffffffffffffffff85163b6109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610105565b5081610802565b61080283838151156109ce5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101059190610c68565b60008083601f840112610a1457600080fd5b50813567ffffffffffffffff811115610a2c57600080fd5b6020830191508360208260051b8501011115610a4757600080fd5b9250929050565b60008060008060008060608789031215610a6757600080fd5b863567ffffffffffffffff80821115610a7f57600080fd5b610a8b8a838b01610a02565b90985096506020890135915080821115610aa457600080fd5b610ab08a838b01610a02565b90965094506040890135915080821115610ac957600080fd5b50610ad689828a01610a02565b979a9699509497509295939492505050565b60008060008060408587031215610afe57600080fd5b843567ffffffffffffffff80821115610b1657600080fd5b610b2288838901610a02565b90965094506020870135915080821115610b3b57600080fd5b50610b4887828801610a02565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ba557600080fd5b50565b600060208284031215610bba57600080fd5b8135610bc581610b83565b9392505050565b8181038181111561046e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610c1857600080fd5b81518015158114610bc557600080fd5b60005b83811015610c43578181015183820152602001610c2b565b50506000910152565b60008251610c5e818460208701610c28565b9190910192915050565b6020815260008251806020840152610c87816040850160208701610c28565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220fc0ad5e15c40d5a48b532c9fe0fd14fdcacaf2bb0bef0e6e3e04ca58a4fb423c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCEF DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x59 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH2 0x94 CALLER JUMPDEST PUSH2 0x8E PUSH2 0x440 JUMP JUMPDEST SWAP1 PUSH2 0x474 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xA3 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI PUSH2 0x19F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x12D JUMPI PUSH2 0x12D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x154 JUMPI PUSH2 0x154 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x16D JUMPI PUSH2 0x16D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x111 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1BA CALLER PUSH2 0x86 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x1C9 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x260 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x28E JUMPI PUSH2 0x28E PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x2B5 JUMPI PUSH2 0x2B5 PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x345 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x232 JUMP JUMPDEST PUSH2 0x35D CALLER PUSH2 0x86 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x438 JUMPI PUSH2 0x430 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x3E6 JUMPI PUSH2 0x3E6 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x3FF JUMPI PUSH2 0x3FF PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x414 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3CA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xBCC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x4F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x588 SWAP1 DUP5 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x651 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x656 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x749 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7F3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x588 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x767 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x802 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x80A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x89C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x907 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x918 DUP8 DUP4 DUP4 DUP8 PUSH2 0x923 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x9B9 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x9B2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x9B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP DUP2 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x802 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x9CE JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x105 SWAP2 SWAP1 PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8B DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB0 DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAD6 DUP10 DUP3 DUP11 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB22 DUP9 DUP4 DUP10 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB48 DUP8 DUP3 DUP9 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC5 DUP2 PUSH2 0xB83 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC5E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC87 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC EXP 0xD5 0xE1 0x5C BLOCKHASH 0xD5 LOG4 DUP12 MSTORE8 0x2C SWAP16 0xE0 REVERT EQ REVERT 0xCA 0xCA CALLCODE 0xBB SIGNEXTEND 0xEF 0xE PUSH15 0x3E04CA58A4FB423C64736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"782:4030:17:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_5145":{"entryPoint":1767,"id":5145,"parameterSlots":2,"returnSlots":0},"@_msgSender_5488":{"entryPoint":null,"id":5488,"parameterSlots":0,"returnSlots":1},"@_revert_5475":{"entryPoint":null,"id":5475,"parameterSlots":2,"returnSlots":0},"@enforceIsContractOwner_669":{"entryPoint":1140,"id":669,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_5300":{"entryPoint":2058,"id":5300,"parameterSlots":4,"returnSlots":1},"@functionCall_5236":{"entryPoint":2035,"id":5236,"parameterSlots":3,"returnSlots":1},"@isContract_5164":{"entryPoint":null,"id":5164,"parameterSlots":1,"returnSlots":1},"@layout_681":{"entryPoint":1088,"id":681,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_1248":{"entryPoint":129,"id":1248,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1318":{"entryPoint":433,"id":1318,"parameterSlots":6,"returnSlots":0},"@recoverETH_1182":{"entryPoint":852,"id":1182,"parameterSlots":4,"returnSlots":0},"@safeTransfer_4897":{"entryPoint":1275,"id":4897,"parameterSlots":3,"returnSlots":0},"@sendValue_5198":{"entryPoint":1421,"id":5198,"parameterSlots":2,"returnSlots":0},"@verifyCallResultFromTarget_5431":{"entryPoint":2339,"id":5431,"parameterSlots":4,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":2562,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":2984,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":2638,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":2792,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3078,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$4829":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$4591":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3148,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3176,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3020,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3112,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x32":{"entryPoint":2900,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":2947,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9944:58","statements":[{"nodeType":"YulBlock","src":"6:3:58","statements":[]},{"body":{"nodeType":"YulBlock","src":"98:283:58","statements":[{"body":{"nodeType":"YulBlock","src":"147:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"156:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"149:6:58"},"nodeType":"YulFunctionCall","src":"149:12:58"},"nodeType":"YulExpressionStatement","src":"149:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"126:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"134:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"122:3:58"},"nodeType":"YulFunctionCall","src":"122:17:58"},{"name":"end","nodeType":"YulIdentifier","src":"141:3:58"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"118:3:58"},"nodeType":"YulFunctionCall","src":"118:27:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"111:6:58"},"nodeType":"YulFunctionCall","src":"111:35:58"},"nodeType":"YulIf","src":"108:55:58"},{"nodeType":"YulAssignment","src":"172:30:58","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"195:6:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"182:12:58"},"nodeType":"YulFunctionCall","src":"182:20:58"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"172:6:58"}]},{"body":{"nodeType":"YulBlock","src":"245:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"257:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"247:6:58"},"nodeType":"YulFunctionCall","src":"247:12:58"},"nodeType":"YulExpressionStatement","src":"247:12:58"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"217:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"225:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"214:2:58"},"nodeType":"YulFunctionCall","src":"214:30:58"},"nodeType":"YulIf","src":"211:50:58"},{"nodeType":"YulAssignment","src":"270:29:58","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"286:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"294:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"282:3:58"},"nodeType":"YulFunctionCall","src":"282:17:58"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"270:8:58"}]},{"body":{"nodeType":"YulBlock","src":"359:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"368:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"371:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"361:6:58"},"nodeType":"YulFunctionCall","src":"361:12:58"},"nodeType":"YulExpressionStatement","src":"361:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"322:6:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:58","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"337:6:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:58"},"nodeType":"YulFunctionCall","src":"330:14:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"318:3:58"},"nodeType":"YulFunctionCall","src":"318:27:58"},{"kind":"number","nodeType":"YulLiteral","src":"347:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"314:3:58"},"nodeType":"YulFunctionCall","src":"314:38:58"},{"name":"end","nodeType":"YulIdentifier","src":"354:3:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"311:2:58"},"nodeType":"YulFunctionCall","src":"311:47:58"},"nodeType":"YulIf","src":"308:67:58"}]},"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"61:6:58","type":""},{"name":"end","nodeType":"YulTypedName","src":"69:3:58","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"77:8:58","type":""},{"name":"length","nodeType":"YulTypedName","src":"87:6:58","type":""}],"src":"14:367:58"},{"body":{"nodeType":"YulBlock","src":"610:879:58","statements":[{"body":{"nodeType":"YulBlock","src":"656:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"665:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"668:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"658:6:58"},"nodeType":"YulFunctionCall","src":"658:12:58"},"nodeType":"YulExpressionStatement","src":"658:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"631:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"640:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"627:3:58"},"nodeType":"YulFunctionCall","src":"627:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"652:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"623:3:58"},"nodeType":"YulFunctionCall","src":"623:32:58"},"nodeType":"YulIf","src":"620:52:58"},{"nodeType":"YulVariableDeclaration","src":"681:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"708:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"695:12:58"},"nodeType":"YulFunctionCall","src":"695:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"685:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"727:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"737:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"731:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"782:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"791:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"794:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"784:6:58"},"nodeType":"YulFunctionCall","src":"784:12:58"},"nodeType":"YulExpressionStatement","src":"784:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"770:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"778:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"767:2:58"},"nodeType":"YulFunctionCall","src":"767:14:58"},"nodeType":"YulIf","src":"764:34:58"},{"nodeType":"YulVariableDeclaration","src":"807:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"875:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"886:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"871:3:58"},"nodeType":"YulFunctionCall","src":"871:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"895:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"833:37:58"},"nodeType":"YulFunctionCall","src":"833:70:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"811:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"821:8:58","type":""}]},{"nodeType":"YulAssignment","src":"912:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"922:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"912:6:58"}]},{"nodeType":"YulAssignment","src":"939:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"949:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"939:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"966:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"999:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1010:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"995:3:58"},"nodeType":"YulFunctionCall","src":"995:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"982:12:58"},"nodeType":"YulFunctionCall","src":"982:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"970:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"1043:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1052:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1055:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1045:6:58"},"nodeType":"YulFunctionCall","src":"1045:12:58"},"nodeType":"YulExpressionStatement","src":"1045:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1029:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"1039:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1026:2:58"},"nodeType":"YulFunctionCall","src":"1026:16:58"},"nodeType":"YulIf","src":"1023:36:58"},{"nodeType":"YulVariableDeclaration","src":"1068:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1136:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1147:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1132:3:58"},"nodeType":"YulFunctionCall","src":"1132:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1158:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"1094:37:58"},"nodeType":"YulFunctionCall","src":"1094:72:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"1072:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"1082:8:58","type":""}]},{"nodeType":"YulAssignment","src":"1175:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1185:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1175:6:58"}]},{"nodeType":"YulAssignment","src":"1202:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"1212:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1202:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"1229:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1262:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1273:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1258:3:58"},"nodeType":"YulFunctionCall","src":"1258:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1245:12:58"},"nodeType":"YulFunctionCall","src":"1245:32:58"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"1233:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"1306:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1315:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1318:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1308:6:58"},"nodeType":"YulFunctionCall","src":"1308:12:58"},"nodeType":"YulExpressionStatement","src":"1308:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"1292:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"1302:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1289:2:58"},"nodeType":"YulFunctionCall","src":"1289:16:58"},"nodeType":"YulIf","src":"1286:36:58"},{"nodeType":"YulVariableDeclaration","src":"1331:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1399:9:58"},{"name":"offset_2","nodeType":"YulIdentifier","src":"1410:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1395:3:58"},"nodeType":"YulFunctionCall","src":"1395:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1421:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"1357:37:58"},"nodeType":"YulFunctionCall","src":"1357:72:58"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"1335:8:58","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"1345:8:58","type":""}]},{"nodeType":"YulAssignment","src":"1438:18:58","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"1448:8:58"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1438:6:58"}]},{"nodeType":"YulAssignment","src":"1465:18:58","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"1475:8:58"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1465:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"536:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"547:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"559:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"567:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"575:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"583:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"591:6:58","type":""},{"name":"value5","nodeType":"YulTypedName","src":"599:6:58","type":""}],"src":"386:1103:58"},{"body":{"nodeType":"YulBlock","src":"1719:879:58","statements":[{"body":{"nodeType":"YulBlock","src":"1765:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1774:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1777:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1767:6:58"},"nodeType":"YulFunctionCall","src":"1767:12:58"},"nodeType":"YulExpressionStatement","src":"1767:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1740:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"1749:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1736:3:58"},"nodeType":"YulFunctionCall","src":"1736:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"1761:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1732:3:58"},"nodeType":"YulFunctionCall","src":"1732:32:58"},"nodeType":"YulIf","src":"1729:52:58"},{"nodeType":"YulVariableDeclaration","src":"1790:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1817:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1804:12:58"},"nodeType":"YulFunctionCall","src":"1804:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1794:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1836:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"1846:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1840:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"1891:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1900:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1903:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1893:6:58"},"nodeType":"YulFunctionCall","src":"1893:12:58"},"nodeType":"YulExpressionStatement","src":"1893:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1879:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"1887:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1876:2:58"},"nodeType":"YulFunctionCall","src":"1876:14:58"},"nodeType":"YulIf","src":"1873:34:58"},{"nodeType":"YulVariableDeclaration","src":"1916:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1984:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"1995:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1980:3:58"},"nodeType":"YulFunctionCall","src":"1980:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2004:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"1942:37:58"},"nodeType":"YulFunctionCall","src":"1942:70:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1920:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1930:8:58","type":""}]},{"nodeType":"YulAssignment","src":"2021:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2031:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2021:6:58"}]},{"nodeType":"YulAssignment","src":"2048:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2058:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2048:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"2075:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2108:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"2119:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2104:3:58"},"nodeType":"YulFunctionCall","src":"2104:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2091:12:58"},"nodeType":"YulFunctionCall","src":"2091:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2079:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"2152:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2161:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2164:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2154:6:58"},"nodeType":"YulFunctionCall","src":"2154:12:58"},"nodeType":"YulExpressionStatement","src":"2154:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2138:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"2148:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2135:2:58"},"nodeType":"YulFunctionCall","src":"2135:16:58"},"nodeType":"YulIf","src":"2132:36:58"},{"nodeType":"YulVariableDeclaration","src":"2177:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2245:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2256:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:58"},"nodeType":"YulFunctionCall","src":"2241:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2267:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2203:37:58"},"nodeType":"YulFunctionCall","src":"2203:72:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"2181:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"2191:8:58","type":""}]},{"nodeType":"YulAssignment","src":"2284:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"2294:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2284:6:58"}]},{"nodeType":"YulAssignment","src":"2311:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"2321:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2311:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"2338:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2371:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"2382:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2367:3:58"},"nodeType":"YulFunctionCall","src":"2367:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2354:12:58"},"nodeType":"YulFunctionCall","src":"2354:32:58"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"2342:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"2415:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2424:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2427:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2417:6:58"},"nodeType":"YulFunctionCall","src":"2417:12:58"},"nodeType":"YulExpressionStatement","src":"2417:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"2401:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"2411:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2398:2:58"},"nodeType":"YulFunctionCall","src":"2398:16:58"},"nodeType":"YulIf","src":"2395:36:58"},{"nodeType":"YulVariableDeclaration","src":"2440:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2508:9:58"},{"name":"offset_2","nodeType":"YulIdentifier","src":"2519:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2504:3:58"},"nodeType":"YulFunctionCall","src":"2504:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2530:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2466:37:58"},"nodeType":"YulFunctionCall","src":"2466:72:58"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"2444:8:58","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"2454:8:58","type":""}]},{"nodeType":"YulAssignment","src":"2547:18:58","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"2557:8:58"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2547:6:58"}]},{"nodeType":"YulAssignment","src":"2574:18:58","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"2584:8:58"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2574:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1645:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1656:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1668:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1676:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1684:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1692:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1700:6:58","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1708:6:58","type":""}],"src":"1494:1104:58"},{"body":{"nodeType":"YulBlock","src":"2768:616:58","statements":[{"body":{"nodeType":"YulBlock","src":"2814:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2823:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2826:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2816:6:58"},"nodeType":"YulFunctionCall","src":"2816:12:58"},"nodeType":"YulExpressionStatement","src":"2816:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2789:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"2798:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2785:3:58"},"nodeType":"YulFunctionCall","src":"2785:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"2810:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2781:3:58"},"nodeType":"YulFunctionCall","src":"2781:32:58"},"nodeType":"YulIf","src":"2778:52:58"},{"nodeType":"YulVariableDeclaration","src":"2839:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2866:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2853:12:58"},"nodeType":"YulFunctionCall","src":"2853:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2843:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2885:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"2895:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2889:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"2940:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2949:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2952:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2942:6:58"},"nodeType":"YulFunctionCall","src":"2942:12:58"},"nodeType":"YulExpressionStatement","src":"2942:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2928:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"2936:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2925:2:58"},"nodeType":"YulFunctionCall","src":"2925:14:58"},"nodeType":"YulIf","src":"2922:34:58"},{"nodeType":"YulVariableDeclaration","src":"2965:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3033:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"3044:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3029:3:58"},"nodeType":"YulFunctionCall","src":"3029:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3053:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2991:37:58"},"nodeType":"YulFunctionCall","src":"2991:70:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2969:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2979:8:58","type":""}]},{"nodeType":"YulAssignment","src":"3070:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"3080:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3070:6:58"}]},{"nodeType":"YulAssignment","src":"3097:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3107:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3097:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"3124:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3157:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3168:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3153:3:58"},"nodeType":"YulFunctionCall","src":"3153:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3140:12:58"},"nodeType":"YulFunctionCall","src":"3140:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3128:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"3201:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3210:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3213:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3203:6:58"},"nodeType":"YulFunctionCall","src":"3203:12:58"},"nodeType":"YulExpressionStatement","src":"3203:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3187:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"3197:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3184:2:58"},"nodeType":"YulFunctionCall","src":"3184:16:58"},"nodeType":"YulIf","src":"3181:36:58"},{"nodeType":"YulVariableDeclaration","src":"3226:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3294:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3305:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3290:3:58"},"nodeType":"YulFunctionCall","src":"3290:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3316:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3252:37:58"},"nodeType":"YulFunctionCall","src":"3252:72:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3230:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3240:8:58","type":""}]},{"nodeType":"YulAssignment","src":"3333:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3343:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3333:6:58"}]},{"nodeType":"YulAssignment","src":"3360:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3370:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3360:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2710:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2721:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2733:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2741:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2749:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2757:6:58","type":""}],"src":"2603:781:58"},{"body":{"nodeType":"YulBlock","src":"3563:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3591:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3573:6:58"},"nodeType":"YulFunctionCall","src":"3573:21:58"},"nodeType":"YulExpressionStatement","src":"3573:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3614:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3625:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3610:3:58"},"nodeType":"YulFunctionCall","src":"3610:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"3630:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3603:6:58"},"nodeType":"YulFunctionCall","src":"3603:30:58"},"nodeType":"YulExpressionStatement","src":"3603:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3653:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3664:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3649:3:58"},"nodeType":"YulFunctionCall","src":"3649:18:58"},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","kind":"string","nodeType":"YulLiteral","src":"3669:31:58","type":"","value":"Recovery: inconsistent arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3642:6:58"},"nodeType":"YulFunctionCall","src":"3642:59:58"},"nodeType":"YulExpressionStatement","src":"3642:59:58"},{"nodeType":"YulAssignment","src":"3710:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3722:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3733:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3718:3:58"},"nodeType":"YulFunctionCall","src":"3718:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3710:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3540:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3554:4:58","type":""}],"src":"3389:353:58"},{"body":{"nodeType":"YulBlock","src":"3779:152:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3796:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3799:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3789:6:58"},"nodeType":"YulFunctionCall","src":"3789:88:58"},"nodeType":"YulExpressionStatement","src":"3789:88:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3893:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3896:4:58","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3886:6:58"},"nodeType":"YulFunctionCall","src":"3886:15:58"},"nodeType":"YulExpressionStatement","src":"3886:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3917:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3920:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3910:6:58"},"nodeType":"YulFunctionCall","src":"3910:15:58"},"nodeType":"YulExpressionStatement","src":"3910:15:58"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"3747:184:58"},{"body":{"nodeType":"YulBlock","src":"3981:109:58","statements":[{"body":{"nodeType":"YulBlock","src":"4068:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4077:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4080:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4070:6:58"},"nodeType":"YulFunctionCall","src":"4070:12:58"},"nodeType":"YulExpressionStatement","src":"4070:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4004:5:58"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4015:5:58"},{"kind":"number","nodeType":"YulLiteral","src":"4022:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4011:3:58"},"nodeType":"YulFunctionCall","src":"4011:54:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4001:2:58"},"nodeType":"YulFunctionCall","src":"4001:65:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3994:6:58"},"nodeType":"YulFunctionCall","src":"3994:73:58"},"nodeType":"YulIf","src":"3991:93:58"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3970:5:58","type":""}],"src":"3936:154:58"},{"body":{"nodeType":"YulBlock","src":"4165:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"4211:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4220:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4223:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4213:6:58"},"nodeType":"YulFunctionCall","src":"4213:12:58"},"nodeType":"YulExpressionStatement","src":"4213:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4186:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"4195:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4182:3:58"},"nodeType":"YulFunctionCall","src":"4182:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"4207:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4178:3:58"},"nodeType":"YulFunctionCall","src":"4178:32:58"},"nodeType":"YulIf","src":"4175:52:58"},{"nodeType":"YulVariableDeclaration","src":"4236:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4262:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4249:12:58"},"nodeType":"YulFunctionCall","src":"4249:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4240:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4306:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4281:24:58"},"nodeType":"YulFunctionCall","src":"4281:31:58"},"nodeType":"YulExpressionStatement","src":"4281:31:58"},{"nodeType":"YulAssignment","src":"4321:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"4331:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4321:6:58"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4131:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4142:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4154:6:58","type":""}],"src":"4095:247:58"},{"body":{"nodeType":"YulBlock","src":"4432:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"4478:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4487:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4490:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4480:6:58"},"nodeType":"YulFunctionCall","src":"4480:12:58"},"nodeType":"YulExpressionStatement","src":"4480:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4453:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"4462:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4449:3:58"},"nodeType":"YulFunctionCall","src":"4449:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"4474:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4445:3:58"},"nodeType":"YulFunctionCall","src":"4445:32:58"},"nodeType":"YulIf","src":"4442:52:58"},{"nodeType":"YulVariableDeclaration","src":"4503:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4529:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4516:12:58"},"nodeType":"YulFunctionCall","src":"4516:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4507:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4573:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4548:24:58"},"nodeType":"YulFunctionCall","src":"4548:31:58"},"nodeType":"YulExpressionStatement","src":"4548:31:58"},{"nodeType":"YulAssignment","src":"4588:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"4598:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4588:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$4829","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4398:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4409:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4421:6:58","type":""}],"src":"4347:262:58"},{"body":{"nodeType":"YulBlock","src":"4700:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"4746:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4755:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4758:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4748:6:58"},"nodeType":"YulFunctionCall","src":"4748:12:58"},"nodeType":"YulExpressionStatement","src":"4748:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4721:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"4730:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4717:3:58"},"nodeType":"YulFunctionCall","src":"4717:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"4742:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4713:3:58"},"nodeType":"YulFunctionCall","src":"4713:32:58"},"nodeType":"YulIf","src":"4710:52:58"},{"nodeType":"YulVariableDeclaration","src":"4771:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4797:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4784:12:58"},"nodeType":"YulFunctionCall","src":"4784:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4775:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4841:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4816:24:58"},"nodeType":"YulFunctionCall","src":"4816:31:58"},"nodeType":"YulExpressionStatement","src":"4816:31:58"},{"nodeType":"YulAssignment","src":"4856:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"4866:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4856:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$4591","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4666:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4677:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4689:6:58","type":""}],"src":"4614:263:58"},{"body":{"nodeType":"YulBlock","src":"5039:241:58","statements":[{"nodeType":"YulAssignment","src":"5049:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5061:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"5072:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5057:3:58"},"nodeType":"YulFunctionCall","src":"5057:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5049:4:58"}]},{"nodeType":"YulVariableDeclaration","src":"5084:52:58","value":{"kind":"number","nodeType":"YulLiteral","src":"5094:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5088:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5152:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5167:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"5175:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5163:3:58"},"nodeType":"YulFunctionCall","src":"5163:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5145:6:58"},"nodeType":"YulFunctionCall","src":"5145:34:58"},"nodeType":"YulExpressionStatement","src":"5145:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5199:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"5210:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5195:3:58"},"nodeType":"YulFunctionCall","src":"5195:18:58"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5219:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"5227:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5215:3:58"},"nodeType":"YulFunctionCall","src":"5215:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5188:6:58"},"nodeType":"YulFunctionCall","src":"5188:43:58"},"nodeType":"YulExpressionStatement","src":"5188:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5251:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"5262:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5247:3:58"},"nodeType":"YulFunctionCall","src":"5247:18:58"},{"name":"value2","nodeType":"YulIdentifier","src":"5267:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5240:6:58"},"nodeType":"YulFunctionCall","src":"5240:34:58"},"nodeType":"YulExpressionStatement","src":"5240:34:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4992:9:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5003:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5011:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5019:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5030:4:58","type":""}],"src":"4882:398:58"},{"body":{"nodeType":"YulBlock","src":"5363:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"5409:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5418:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5421:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5411:6:58"},"nodeType":"YulFunctionCall","src":"5411:12:58"},"nodeType":"YulExpressionStatement","src":"5411:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5384:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"5393:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5380:3:58"},"nodeType":"YulFunctionCall","src":"5380:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"5405:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5376:3:58"},"nodeType":"YulFunctionCall","src":"5376:32:58"},"nodeType":"YulIf","src":"5373:52:58"},{"nodeType":"YulVariableDeclaration","src":"5434:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5460:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5447:12:58"},"nodeType":"YulFunctionCall","src":"5447:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5438:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5504:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5479:24:58"},"nodeType":"YulFunctionCall","src":"5479:31:58"},"nodeType":"YulExpressionStatement","src":"5479:31:58"},{"nodeType":"YulAssignment","src":"5519:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"5529:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5519:6:58"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5329:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5340:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5352:6:58","type":""}],"src":"5285:255:58"},{"body":{"nodeType":"YulBlock","src":"5594:233:58","statements":[{"nodeType":"YulAssignment","src":"5604:17:58","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5616:1:58"},{"name":"y","nodeType":"YulIdentifier","src":"5619:1:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5612:3:58"},"nodeType":"YulFunctionCall","src":"5612:9:58"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5604:4:58"}]},{"body":{"nodeType":"YulBlock","src":"5653:168:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5674:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5677:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5667:6:58"},"nodeType":"YulFunctionCall","src":"5667:88:58"},"nodeType":"YulExpressionStatement","src":"5667:88:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5775:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5778:4:58","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5768:6:58"},"nodeType":"YulFunctionCall","src":"5768:15:58"},"nodeType":"YulExpressionStatement","src":"5768:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5803:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5806:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5796:6:58"},"nodeType":"YulFunctionCall","src":"5796:15:58"},"nodeType":"YulExpressionStatement","src":"5796:15:58"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5636:4:58"},{"name":"x","nodeType":"YulIdentifier","src":"5642:1:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5633:2:58"},"nodeType":"YulFunctionCall","src":"5633:11:58"},"nodeType":"YulIf","src":"5630:191:58"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5576:1:58","type":""},{"name":"y","nodeType":"YulTypedName","src":"5579:1:58","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5585:4:58","type":""}],"src":"5545:282:58"},{"body":{"nodeType":"YulBlock","src":"6006:174:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6023:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6034:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6016:6:58"},"nodeType":"YulFunctionCall","src":"6016:21:58"},"nodeType":"YulExpressionStatement","src":"6016:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6057:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6068:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6053:3:58"},"nodeType":"YulFunctionCall","src":"6053:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"6073:2:58","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6046:6:58"},"nodeType":"YulFunctionCall","src":"6046:30:58"},"nodeType":"YulExpressionStatement","src":"6046:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6096:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6107:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6092:3:58"},"nodeType":"YulFunctionCall","src":"6092:18:58"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"6112:26:58","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6085:6:58"},"nodeType":"YulFunctionCall","src":"6085:54:58"},"nodeType":"YulExpressionStatement","src":"6085:54:58"},{"nodeType":"YulAssignment","src":"6148:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6160:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6171:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6156:3:58"},"nodeType":"YulFunctionCall","src":"6156:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6148:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5983:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5997:4:58","type":""}],"src":"5832:348:58"},{"body":{"nodeType":"YulBlock","src":"6314:168:58","statements":[{"nodeType":"YulAssignment","src":"6324:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6336:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6347:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6332:3:58"},"nodeType":"YulFunctionCall","src":"6332:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6324:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6366:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6381:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"6389:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6377:3:58"},"nodeType":"YulFunctionCall","src":"6377:55:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6359:6:58"},"nodeType":"YulFunctionCall","src":"6359:74:58"},"nodeType":"YulExpressionStatement","src":"6359:74:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6453:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6464:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6449:3:58"},"nodeType":"YulFunctionCall","src":"6449:18:58"},{"name":"value1","nodeType":"YulIdentifier","src":"6469:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6442:6:58"},"nodeType":"YulFunctionCall","src":"6442:34:58"},"nodeType":"YulExpressionStatement","src":"6442:34:58"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6275:9:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6286:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6294:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6305:4:58","type":""}],"src":"6185:297:58"},{"body":{"nodeType":"YulBlock","src":"6661:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6678:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6689:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6671:6:58"},"nodeType":"YulFunctionCall","src":"6671:21:58"},"nodeType":"YulExpressionStatement","src":"6671:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6712:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6723:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6708:3:58"},"nodeType":"YulFunctionCall","src":"6708:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"6728:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6701:6:58"},"nodeType":"YulFunctionCall","src":"6701:30:58"},"nodeType":"YulExpressionStatement","src":"6701:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6751:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6762:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6747:3:58"},"nodeType":"YulFunctionCall","src":"6747:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"6767:31:58","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6740:6:58"},"nodeType":"YulFunctionCall","src":"6740:59:58"},"nodeType":"YulExpressionStatement","src":"6740:59:58"},{"nodeType":"YulAssignment","src":"6808:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6820:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6831:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6816:3:58"},"nodeType":"YulFunctionCall","src":"6816:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6808:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6638:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6652:4:58","type":""}],"src":"6487:353:58"},{"body":{"nodeType":"YulBlock","src":"7036:14:58","statements":[{"nodeType":"YulAssignment","src":"7038:10:58","value":{"name":"pos","nodeType":"YulIdentifier","src":"7045:3:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7038:3:58"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7020:3:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7028:3:58","type":""}],"src":"6845:205:58"},{"body":{"nodeType":"YulBlock","src":"7229:248:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7246:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"7257:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7239:6:58"},"nodeType":"YulFunctionCall","src":"7239:21:58"},"nodeType":"YulExpressionStatement","src":"7239:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7280:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"7291:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7276:3:58"},"nodeType":"YulFunctionCall","src":"7276:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"7296:2:58","type":"","value":"58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7269:6:58"},"nodeType":"YulFunctionCall","src":"7269:30:58"},"nodeType":"YulExpressionStatement","src":"7269:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7319:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"7330:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7315:3:58"},"nodeType":"YulFunctionCall","src":"7315:18:58"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nodeType":"YulLiteral","src":"7335:34:58","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7308:6:58"},"nodeType":"YulFunctionCall","src":"7308:62:58"},"nodeType":"YulExpressionStatement","src":"7308:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7390:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"7401:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7386:3:58"},"nodeType":"YulFunctionCall","src":"7386:18:58"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nodeType":"YulLiteral","src":"7406:28:58","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7379:6:58"},"nodeType":"YulFunctionCall","src":"7379:56:58"},"nodeType":"YulExpressionStatement","src":"7379:56:58"},{"nodeType":"YulAssignment","src":"7444:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7456:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"7467:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7452:3:58"},"nodeType":"YulFunctionCall","src":"7452:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7444:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7206:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7220:4:58","type":""}],"src":"7055:422:58"},{"body":{"nodeType":"YulBlock","src":"7560:199:58","statements":[{"body":{"nodeType":"YulBlock","src":"7606:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7615:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7618:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7608:6:58"},"nodeType":"YulFunctionCall","src":"7608:12:58"},"nodeType":"YulExpressionStatement","src":"7608:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7581:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"7590:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7577:3:58"},"nodeType":"YulFunctionCall","src":"7577:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"7602:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7573:3:58"},"nodeType":"YulFunctionCall","src":"7573:32:58"},"nodeType":"YulIf","src":"7570:52:58"},{"nodeType":"YulVariableDeclaration","src":"7631:29:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7650:9:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7644:5:58"},"nodeType":"YulFunctionCall","src":"7644:16:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7635:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"7713:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7722:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7725:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7715:6:58"},"nodeType":"YulFunctionCall","src":"7715:12:58"},"nodeType":"YulExpressionStatement","src":"7715:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7682:5:58"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7703:5:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7696:6:58"},"nodeType":"YulFunctionCall","src":"7696:13:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7689:6:58"},"nodeType":"YulFunctionCall","src":"7689:21:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7679:2:58"},"nodeType":"YulFunctionCall","src":"7679:32:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7672:6:58"},"nodeType":"YulFunctionCall","src":"7672:40:58"},"nodeType":"YulIf","src":"7669:60:58"},{"nodeType":"YulAssignment","src":"7738:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"7748:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7738:6:58"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7526:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7537:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7549:6:58","type":""}],"src":"7482:277:58"},{"body":{"nodeType":"YulBlock","src":"7938:232:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7955:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"7966:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7948:6:58"},"nodeType":"YulFunctionCall","src":"7948:21:58"},"nodeType":"YulExpressionStatement","src":"7948:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7989:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8000:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7985:3:58"},"nodeType":"YulFunctionCall","src":"7985:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"8005:2:58","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7978:6:58"},"nodeType":"YulFunctionCall","src":"7978:30:58"},"nodeType":"YulExpressionStatement","src":"7978:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8028:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8039:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8024:3:58"},"nodeType":"YulFunctionCall","src":"8024:18:58"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"8044:34:58","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8017:6:58"},"nodeType":"YulFunctionCall","src":"8017:62:58"},"nodeType":"YulExpressionStatement","src":"8017:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8099:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8110:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8095:3:58"},"nodeType":"YulFunctionCall","src":"8095:18:58"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"8115:12:58","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8088:6:58"},"nodeType":"YulFunctionCall","src":"8088:40:58"},"nodeType":"YulExpressionStatement","src":"8088:40:58"},{"nodeType":"YulAssignment","src":"8137:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8149:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8160:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8145:3:58"},"nodeType":"YulFunctionCall","src":"8145:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8137:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7915:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7929:4:58","type":""}],"src":"7764:406:58"},{"body":{"nodeType":"YulBlock","src":"8349:228:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8366:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8377:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8359:6:58"},"nodeType":"YulFunctionCall","src":"8359:21:58"},"nodeType":"YulExpressionStatement","src":"8359:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8400:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8411:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8396:3:58"},"nodeType":"YulFunctionCall","src":"8396:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"8416:2:58","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8389:6:58"},"nodeType":"YulFunctionCall","src":"8389:30:58"},"nodeType":"YulExpressionStatement","src":"8389:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8439:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8450:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8435:3:58"},"nodeType":"YulFunctionCall","src":"8435:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"8455:34:58","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8428:6:58"},"nodeType":"YulFunctionCall","src":"8428:62:58"},"nodeType":"YulExpressionStatement","src":"8428:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8510:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8521:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8506:3:58"},"nodeType":"YulFunctionCall","src":"8506:18:58"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"8526:8:58","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8499:6:58"},"nodeType":"YulFunctionCall","src":"8499:36:58"},"nodeType":"YulExpressionStatement","src":"8499:36:58"},{"nodeType":"YulAssignment","src":"8544:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8556:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8567:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8552:3:58"},"nodeType":"YulFunctionCall","src":"8552:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8544:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8326:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8340:4:58","type":""}],"src":"8175:402:58"},{"body":{"nodeType":"YulBlock","src":"8648:184:58","statements":[{"nodeType":"YulVariableDeclaration","src":"8658:10:58","value":{"kind":"number","nodeType":"YulLiteral","src":"8667:1:58","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8662:1:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"8727:63:58","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8752:3:58"},{"name":"i","nodeType":"YulIdentifier","src":"8757:1:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8748:3:58"},"nodeType":"YulFunctionCall","src":"8748:11:58"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8771:3:58"},{"name":"i","nodeType":"YulIdentifier","src":"8776:1:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8767:3:58"},"nodeType":"YulFunctionCall","src":"8767:11:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8761:5:58"},"nodeType":"YulFunctionCall","src":"8761:18:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8741:6:58"},"nodeType":"YulFunctionCall","src":"8741:39:58"},"nodeType":"YulExpressionStatement","src":"8741:39:58"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8688:1:58"},{"name":"length","nodeType":"YulIdentifier","src":"8691:6:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8685:2:58"},"nodeType":"YulFunctionCall","src":"8685:13:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8699:19:58","statements":[{"nodeType":"YulAssignment","src":"8701:15:58","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8710:1:58"},{"kind":"number","nodeType":"YulLiteral","src":"8713:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8706:3:58"},"nodeType":"YulFunctionCall","src":"8706:10:58"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8701:1:58"}]}]},"pre":{"nodeType":"YulBlock","src":"8681:3:58","statements":[]},"src":"8677:113:58"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8810:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"8815:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8806:3:58"},"nodeType":"YulFunctionCall","src":"8806:16:58"},{"kind":"number","nodeType":"YulLiteral","src":"8824:1:58","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8799:6:58"},"nodeType":"YulFunctionCall","src":"8799:27:58"},"nodeType":"YulExpressionStatement","src":"8799:27:58"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8626:3:58","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8631:3:58","type":""},{"name":"length","nodeType":"YulTypedName","src":"8636:6:58","type":""}],"src":"8582:250:58"},{"body":{"nodeType":"YulBlock","src":"8974:150:58","statements":[{"nodeType":"YulVariableDeclaration","src":"8984:27:58","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9004:6:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8998:5:58"},"nodeType":"YulFunctionCall","src":"8998:13:58"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8988:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9059:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"9067:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9055:3:58"},"nodeType":"YulFunctionCall","src":"9055:17:58"},{"name":"pos","nodeType":"YulIdentifier","src":"9074:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"9079:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9020:34:58"},"nodeType":"YulFunctionCall","src":"9020:66:58"},"nodeType":"YulExpressionStatement","src":"9020:66:58"},{"nodeType":"YulAssignment","src":"9095:23:58","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9106:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"9111:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9102:3:58"},"nodeType":"YulFunctionCall","src":"9102:16:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9095:3:58"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8950:3:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8955:6:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8966:3:58","type":""}],"src":"8837:287:58"},{"body":{"nodeType":"YulBlock","src":"9303:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9320:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9331:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9313:6:58"},"nodeType":"YulFunctionCall","src":"9313:21:58"},"nodeType":"YulExpressionStatement","src":"9313:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9354:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9365:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9350:3:58"},"nodeType":"YulFunctionCall","src":"9350:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"9370:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9343:6:58"},"nodeType":"YulFunctionCall","src":"9343:30:58"},"nodeType":"YulExpressionStatement","src":"9343:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9393:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9404:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9389:3:58"},"nodeType":"YulFunctionCall","src":"9389:18:58"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"9409:31:58","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9382:6:58"},"nodeType":"YulFunctionCall","src":"9382:59:58"},"nodeType":"YulExpressionStatement","src":"9382:59:58"},{"nodeType":"YulAssignment","src":"9450:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9462:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9473:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9458:3:58"},"nodeType":"YulFunctionCall","src":"9458:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9450:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9280:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9294:4:58","type":""}],"src":"9129:353:58"},{"body":{"nodeType":"YulBlock","src":"9608:334:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9625:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9636:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9618:6:58"},"nodeType":"YulFunctionCall","src":"9618:21:58"},"nodeType":"YulExpressionStatement","src":"9618:21:58"},{"nodeType":"YulVariableDeclaration","src":"9648:27:58","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9668:6:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9662:5:58"},"nodeType":"YulFunctionCall","src":"9662:13:58"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9652:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9695:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9706:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9691:3:58"},"nodeType":"YulFunctionCall","src":"9691:18:58"},{"name":"length","nodeType":"YulIdentifier","src":"9711:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9684:6:58"},"nodeType":"YulFunctionCall","src":"9684:34:58"},"nodeType":"YulExpressionStatement","src":"9684:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9766:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"9774:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9762:3:58"},"nodeType":"YulFunctionCall","src":"9762:15:58"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9783:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9794:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9779:3:58"},"nodeType":"YulFunctionCall","src":"9779:18:58"},{"name":"length","nodeType":"YulIdentifier","src":"9799:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9727:34:58"},"nodeType":"YulFunctionCall","src":"9727:79:58"},"nodeType":"YulExpressionStatement","src":"9727:79:58"},{"nodeType":"YulAssignment","src":"9815:121:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9831:9:58"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9850:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"9858:2:58","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9846:3:58"},"nodeType":"YulFunctionCall","src":"9846:15:58"},{"kind":"number","nodeType":"YulLiteral","src":"9863:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9842:3:58"},"nodeType":"YulFunctionCall","src":"9842:88:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9827:3:58"},"nodeType":"YulFunctionCall","src":"9827:104:58"},{"kind":"number","nodeType":"YulLiteral","src":"9933:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9823:3:58"},"nodeType":"YulFunctionCall","src":"9823:113:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9815:4:58"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9577:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9588:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9599:4:58","type":""}],"src":"9487:455:58"}]},"contents":"{\n    { }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$4829(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$4591(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":58,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806373c8a95814610046578063c3666c361461005b578063f7ba94bd1461006e575b600080fd5b610059610054366004610a4e565b610081565b005b610059610069366004610a4e565b6101b1565b61005961007c366004610ae8565b610354565b610094335b61008e610440565b90610474565b8483811480156100a357508082145b61010e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064015b60405180910390fd5b60005b8181146101a75761019f88888381811061012d5761012d610b54565b90506020020160208101906101429190610ba8565b85858481811061015457610154610b54565b9050602002013588888581811061016d5761016d610b54565b90506020020160208101906101829190610ba8565b73ffffffffffffffffffffffffffffffffffffffff1691906104fb565b600101610111565b5050505050505050565b6101ba33610086565b8483811480156101c957508082145b61022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b8181146101a75785858281811061024b5761024b610b54565b90506020020160208101906102609190610ba8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a8581811061028e5761028e610b54565b90506020020160208101906102a39190610ba8565b8787868181106102b5576102b5610b54565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b50505050806001019050610232565b61035d33610086565b828181146103c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b818114610438576104308484838181106103e6576103e6610b54565b905060200201358787848181106103ff576103ff610b54565b90506020020160208101906104149190610ba8565b73ffffffffffffffffffffffffffffffffffffffff169061058d565b6001016103ca565b505050505050565b60008061046e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610bcc565b92915050565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146104f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e657200000000000000006044820152606401610105565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105889084906106e7565b505050565b804710156105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610105565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610105565b6000610749826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107f39092919063ffffffff16565b80519091501561058857808060200190518101906107679190610c06565b610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610105565b6060610802848460008561080a565b949350505050565b60608247101561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610105565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108c59190610c4c565b60006040518083038185875af1925050503d8060008114610902576040519150601f19603f3d011682016040523d82523d6000602084013e610907565b606091505b509150915061091887838387610923565b979650505050505050565b606083156109b95782516000036109b25773ffffffffffffffffffffffffffffffffffffffff85163b6109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610105565b5081610802565b61080283838151156109ce5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101059190610c68565b60008083601f840112610a1457600080fd5b50813567ffffffffffffffff811115610a2c57600080fd5b6020830191508360208260051b8501011115610a4757600080fd5b9250929050565b60008060008060008060608789031215610a6757600080fd5b863567ffffffffffffffff80821115610a7f57600080fd5b610a8b8a838b01610a02565b90985096506020890135915080821115610aa457600080fd5b610ab08a838b01610a02565b90965094506040890135915080821115610ac957600080fd5b50610ad689828a01610a02565b979a9699509497509295939492505050565b60008060008060408587031215610afe57600080fd5b843567ffffffffffffffff80821115610b1657600080fd5b610b2288838901610a02565b90965094506020870135915080821115610b3b57600080fd5b50610b4887828801610a02565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ba557600080fd5b50565b600060208284031215610bba57600080fd5b8135610bc581610b83565b9392505050565b8181038181111561046e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610c1857600080fd5b81518015158114610bc557600080fd5b60005b83811015610c43578181015183820152602001610c2b565b50506000910152565b60008251610c5e818460208701610c28565b9190910192915050565b6020815260008251806020840152610c87816040850160208701610c28565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220fc0ad5e15c40d5a48b532c9fe0fd14fdcacaf2bb0bef0e6e3e04ca58a4fb423c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x59 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH2 0x94 CALLER JUMPDEST PUSH2 0x8E PUSH2 0x440 JUMP JUMPDEST SWAP1 PUSH2 0x474 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xA3 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI PUSH2 0x19F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x12D JUMPI PUSH2 0x12D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x154 JUMPI PUSH2 0x154 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x16D JUMPI PUSH2 0x16D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x111 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1BA CALLER PUSH2 0x86 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x1C9 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x260 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x28E JUMPI PUSH2 0x28E PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x2B5 JUMPI PUSH2 0x2B5 PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x345 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x232 JUMP JUMPDEST PUSH2 0x35D CALLER PUSH2 0x86 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x438 JUMPI PUSH2 0x430 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x3E6 JUMPI PUSH2 0x3E6 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x3FF JUMPI PUSH2 0x3FF PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x414 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3CA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xBCC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x4F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x588 SWAP1 DUP5 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x651 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x656 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x749 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7F3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x588 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x767 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x802 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x80A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x89C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x907 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x918 DUP8 DUP4 DUP4 DUP8 PUSH2 0x923 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x9B9 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x9B2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x9B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP DUP2 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x802 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x9CE JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x105 SWAP2 SWAP1 PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8B DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB0 DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAD6 DUP10 DUP3 DUP11 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB22 DUP9 DUP4 DUP10 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB48 DUP8 DUP3 DUP9 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC5 DUP2 PUSH2 0xB83 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC5E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC87 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC EXP 0xD5 0xE1 0x5C BLOCKHASH 0xD5 LOG4 DUP12 MSTORE8 0x2C SWAP16 0xE0 REVERT EQ REVERT 0xCA 0xCA CALLCODE 0xBB SIGNEXTEND 0xEF 0xE PUSH15 0x3E04CA58A4FB423C64736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"782:4030:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2975:542;;;;;;:::i;:::-;;:::i;:::-;;4239:571;;;;;;:::i;:::-;;:::i;1812:450::-;;;;;;:::i;:::-;;:::i;2975:542::-;3138:70;719:10:55;3195:12:17;3138:33;:31;:33::i;:::-;:56;;:70::i;:::-;3235:8;3268:23;;;:51;;;;-1:-1:-1;3295:24:17;;;3268:51;3260:93;;;;;;;3591:2:58;3260:93:17;;;3573:21:58;3630:2;3610:18;;;3603:30;3669:31;3649:18;;;3642:59;3718:18;;3260:93:17;;;;;;;;;3392:9;3387:114;3408:6;3403:1;:11;3387:114;;3439:47;3462:8;;3471:1;3462:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3475:7;;3483:1;3475:10;;;;;;;:::i;:::-;;;;;;;3439:6;;3446:1;3439:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3416:3;;3387:114;;;;3128:389;2975:542;;;;;;:::o;4239:571::-;4408:70;719:10:55;4465:12:17;640:96:55;4408:70:17;4505:8;4538:26;;;:55;;;;-1:-1:-1;4568:25:17;;;4538:55;4530:97;;;;;;;3591:2:58;4530:97:17;;;3573:21:58;3630:2;3610:18;;;3603:30;3669:31;3649:18;;;3642:59;3718:18;;4530:97:17;3389:353:58;4530:97:17;4666:9;4661:133;4682:6;4677:1;:11;4661:133;;4713:9;;4723:1;4713:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4747:4;4754:8;;4763:1;4754:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4767:8;;4776:1;4767:11;;;;;;;:::i;:::-;4713:66;;;;;;;;;;5094:42:58;5163:15;;;4713:66:17;;;5145:34:58;5215:15;;;;5195:18;;;5188:43;-1:-1:-1;4767:11:17;;;;;;5247:18:58;;;5240:34;5057:18;;4713:66:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:3;;;;;4661:133;;1812:450;1924:70;719:10:55;1981:12:17;640:96:55;1924:70:17;2021:8;2054:24;;;2046:66;;;;;;;3591:2:58;2046:66:17;;;3573:21:58;3630:2;3610:18;;;3603:30;3669:31;3649:18;;;3642:59;3718:18;;2046:66:17;3389:353:58;2046:66:17;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;3737:174:6:-;3778:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3737:174;-1:-1:-1;;3737:174:6:o;3570:161::-;3680:15;;;3669:26;;;3680:15;;3669:26;3661:63;;;;;;;6034:2:58;3661:63:6;;;6016:21:58;6073:2;6053:18;;;6046:30;6112:26;6092:18;;;6085:54;6156:18;;3661:63:6;5832:348:58;3661:63:6;3570:161;;:::o;763:205:53:-;902:58;;;6389:42:58;6377:55;;902:58:53;;;6359:74:58;6449:18;;;;6442:34;;;902:58:53;;;;;;;;;;6332:18:58;;;;902:58:53;;;;;;;;;;925:23;902:58;;;875:86;;895:5;;875:19;:86::i;:::-;763:205;;;:::o;2412:312:54:-;2526:6;2501:21;:31;;2493:73;;;;;;;6689:2:58;2493:73:54;;;6671:21:58;6728:2;6708:18;;;6701:30;6767:31;6747:18;;;6740:59;6816:18;;2493:73:54;6487:353:58;2493:73:54;2578:12;2596:9;:14;;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;;;;7257:2:58;2639:78:54;;;7239:21:58;7296:2;7276:18;;;7269:30;7335:34;7315:18;;;7308:62;7406:28;7386:18;;;7379:56;7452:19;;2639:78:54;7055:422:58;3747:706:53;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:53;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;7966:2:58;4351:85:53;;;7948:21:58;8005:2;7985:18;;;7978:30;8044:34;8024:18;;;8017:62;8115:12;8095:18;;;8088:40;8145:19;;4351:85:53;7764:406:58;3873:223:54;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:54:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;;;;8377:2:58;5149:81:54;;;8359:21:58;8416:2;8396:18;;;8389:30;8455:34;8435:18;;;8428:62;8526:8;8506:18;;;8499:36;8552:19;;5149:81:54;8175:402:58;5149:81:54;5241:12;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:54:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;1465:19;;;;7908:60;;;;;;;9331:2:58;7908:60:54;;;9313:21:58;9370:2;9350:18;;;9343:30;9409:31;9389:18;;;9382:59;9458:18;;7908:60:54;9129:353:58;7908:60:54;-1:-1:-1;8003:10:54;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;14:367:58:-;77:8;87:6;141:3;134:4;126:6;122:17;118:27;108:55;;159:1;156;149:12;108:55;-1:-1:-1;182:20:58;;225:18;214:30;;211:50;;;257:1;254;247:12;211:50;294:4;286:6;282:17;270:29;;354:3;347:4;337:6;334:1;330:14;322:6;318:27;314:38;311:47;308:67;;;371:1;368;361:12;308:67;14:367;;;;;:::o;386:1103::-;559:6;567;575;583;591;599;652:2;640:9;631:7;627:23;623:32;620:52;;;668:1;665;658:12;620:52;708:9;695:23;737:18;778:2;770:6;767:14;764:34;;;794:1;791;784:12;764:34;833:70;895:7;886:6;875:9;871:22;833:70;:::i;:::-;922:8;;-1:-1:-1;807:96:58;-1:-1:-1;1010:2:58;995:18;;982:32;;-1:-1:-1;1026:16:58;;;1023:36;;;1055:1;1052;1045:12;1023:36;1094:72;1158:7;1147:8;1136:9;1132:24;1094:72;:::i;:::-;1185:8;;-1:-1:-1;1068:98:58;-1:-1:-1;1273:2:58;1258:18;;1245:32;;-1:-1:-1;1289:16:58;;;1286:36;;;1318:1;1315;1308:12;1286:36;;1357:72;1421:7;1410:8;1399:9;1395:24;1357:72;:::i;:::-;386:1103;;;;-1:-1:-1;386:1103:58;;-1:-1:-1;386:1103:58;;1448:8;;386:1103;-1:-1:-1;;;386:1103:58:o;2603:781::-;2733:6;2741;2749;2757;2810:2;2798:9;2789:7;2785:23;2781:32;2778:52;;;2826:1;2823;2816:12;2778:52;2866:9;2853:23;2895:18;2936:2;2928:6;2925:14;2922:34;;;2952:1;2949;2942:12;2922:34;2991:70;3053:7;3044:6;3033:9;3029:22;2991:70;:::i;:::-;3080:8;;-1:-1:-1;2965:96:58;-1:-1:-1;3168:2:58;3153:18;;3140:32;;-1:-1:-1;3184:16:58;;;3181:36;;;3213:1;3210;3203:12;3181:36;;3252:72;3316:7;3305:8;3294:9;3290:24;3252:72;:::i;:::-;2603:781;;;;-1:-1:-1;3343:8:58;-1:-1:-1;;;;2603:781:58:o;3747:184::-;3799:77;3796:1;3789:88;3896:4;3893:1;3886:15;3920:4;3917:1;3910:15;3936:154;4022:42;4015:5;4011:54;4004:5;4001:65;3991:93;;4080:1;4077;4070:12;3991:93;3936:154;:::o;4095:247::-;4154:6;4207:2;4195:9;4186:7;4182:23;4178:32;4175:52;;;4223:1;4220;4213:12;4175:52;4262:9;4249:23;4281:31;4306:5;4281:31;:::i;:::-;4331:5;4095:247;-1:-1:-1;;;4095:247:58:o;5545:282::-;5612:9;;;5633:11;;;5630:191;;;5677:77;5674:1;5667:88;5778:4;5775:1;5768:15;5806:4;5803:1;5796:15;7482:277;7549:6;7602:2;7590:9;7581:7;7577:23;7573:32;7570:52;;;7618:1;7615;7608:12;7570:52;7650:9;7644:16;7703:5;7696:13;7689:21;7682:5;7679:32;7669:60;;7725:1;7722;7715:12;8582:250;8667:1;8677:113;8691:6;8688:1;8685:13;8677:113;;;8767:11;;;8761:18;8748:11;;;8741:39;8713:2;8706:10;8677:113;;;-1:-1:-1;;8824:1:58;8806:16;;8799:27;8582:250::o;8837:287::-;8966:3;9004:6;8998:13;9020:66;9079:6;9074:3;9067:4;9059:6;9055:17;9020:66;:::i;:::-;9102:16;;;;;8837:287;-1:-1:-1;;8837:287:58:o;9487:455::-;9636:2;9625:9;9618:21;9599:4;9668:6;9662:13;9711:6;9706:2;9695:9;9691:18;9684:34;9727:79;9799:6;9794:2;9783:9;9779:18;9774:2;9766:6;9762:15;9727:79;:::i;:::-;9858:2;9846:15;9863:66;9842:88;9827:104;;;;9933:2;9823:113;;9487:455;-1:-1:-1;;9487:455:58:o"},"gasEstimates":{"creation":{"codeDepositCost":"662200","executionCost":"696","totalCost":"662896"},"external":{"recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite"}},"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(\\n        address[] calldata accounts,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(\\n        address[] calldata accounts,\\n        IERC721[] calldata contracts,\\n        uint256[] calldata tokenIds\\n    ) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb7a7e313881a8a1e982d22f39e5d58fc13f6a73484a89af03891f62af6259cc3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x715b3aa1e8452ad6320e6aeb1cb0dbc1dfc93f906c258f05431b6c572ba21348\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"supply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"allowance(address,address)":{"params":{"owner":"The account that has granted an allowance to `spender`.","spender":"The account that was granted an allowance by `owner`."},"returns":{"value":"The amount which `spender` is allowed to spend on behalf of `owner`."}},"approve(address,uint256)":{"details":"Reverts if `spender` is the zero address.Emits an {Approval} event.","params":{"spender":"The account being granted the allowance by the message caller.","value":"The allowance amount to grant."},"returns":{"result":"Whether the operation succeeded."}},"balanceOf(address)":{"params":{"owner":"The account whose balance will be returned."},"returns":{"balance":"The account balance."}},"decreaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being decreased.","value":"The allowance amount decrease."},"returns":{"result":"Whether the operation succeeded."}},"increaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being increased.","value":"The allowance amount increase."},"returns":{"result":"Whether the operation succeeded."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"totalSupply()":{"returns":{"supply":"The total token supply."}},"transfer(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.","params":{"to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"transferFrom(address,address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account that has granted an allowance to `spender`.\",\"spender\":\"The account that was granted an allowance by `owner`.\"},\"returns\":{\"value\":\"The amount which `spender` is allowed to spend on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Emits an {Approval} event.\",\"params\":{\"spender\":\"The account being granted the allowance by the message caller.\",\"value\":\"The allowance amount to grant.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The account whose balance will be returned.\"},\"returns\":{\"balance\":\"The account balance.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being decreased.\",\"value\":\"The allowance amount decrease.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being increased.\",\"value\":\"The allowance amount increase.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"The total token supply.\"}},\"transfer(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.\",\"params\":{\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Gets the amount that an account is allowed to spend on behalf of another.\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"balanceOf(address)\":{\"notice\":\"Gets an account balance.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalSupply()\":{\"notice\":\"Gets the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20Base} from \\\"./base/ERC20Base.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20 is ERC20Base, InterfaceDetection {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    constructor() {\\n        ERC20Storage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x040f1cb6e9aac145fb794488949047f7979ab41b7fda8f4ee5b97a8f5d5d9731\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC20Base is Context, IERC20, IERC20Allowance {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20\\n    function approve(address spender, uint256 value) external virtual override returns (bool result) {\\n        ERC20Storage.layout().approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address to, uint256 value) external virtual override returns (bool result) {\\n        ERC20Storage.layout().transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual override returns (bool result) {\\n        ERC20Storage.layout().transferFrom(_msgSender(), from, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual override returns (bool result) {\\n        ERC20Storage.layout().increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual override returns (bool result) {\\n        ERC20Storage.layout().decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() external view override returns (uint256 supply) {\\n        return ERC20Storage.layout().totalSupply();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address owner) external view override returns (uint256 balance) {\\n        return ERC20Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual override returns (uint256 value) {\\n        return ERC20Storage.layout().allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0xc31905cde6fc13c3f294bfef5215349ee71b231f4f89a35d1b5ce4924a7aefdc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when an approval is set."},"Transfer(address,address,uint256)":{"notice":"Emitted when tokens are transferred, including zero value transfers."}},"kind":"user","methods":{"allowance(address,address)":{"notice":"Gets the amount that an account is allowed to spend on behalf of another."},"approve(address,uint256)":{"notice":"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"balanceOf(address)":{"notice":"Gets an account balance."},"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance."},"decreaseAllowance(address,uint256)":{"notice":"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"increaseAllowance(address,uint256)":{"notice":"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalSupply()":{"notice":"Gets the total token supply."},"transfer(address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from the sender."},"transferFrom(address,address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol":{"ERC20BatchTransfers":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"batchTransfer(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.","params":{"recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"_0":"Whether the operation succeeded."}},"batchTransferFrom(address,address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to be transferred.","recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"_0":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard, optional extension: Batch Transfers (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransfer(address[],uint256[])":"88d695b2","batchTransferFrom(address,address[],uint256[])":"4885b254"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.\",\"params\":{\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"batchTransferFrom(address,address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to be transferred.\",\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Batch Transfers (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from the sender.\"},\"batchTransferFrom(address,address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from a specified address.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol\":\"ERC20BatchTransfers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20BatchTransfersBase} from \\\"./base/ERC20BatchTransfersBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20BatchTransfers is ERC20BatchTransfersBase {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    constructor() {\\n        ERC20Storage.initERC20BatchTransfers();\\n    }\\n}\\n\",\"keccak256\":\"0xcd02cf7b1fb8cc5f38d26981ed056320cd57db92b69313ccf151db93e6d572dd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BatchTransfersBase is Context, IERC20BatchTransfers {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchTransfer(_msgSender(), recipients, values);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchTransferFrom(_msgSender(), from, recipients, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b64b7f17accdc7aa7ee690afb5174e8535b78cb08efaf817cdbcd9615bce1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchTransfer(address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from the sender."},"batchTransferFrom(address,address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from a specified address."},"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol":{"ERC20Burnable":{"abi":[{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"batchBurnFrom(address[],uint256[])":{"details":"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).","params":{"owners":"The list of accounts to burn the tokens from.","values":"The list of amounts of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}},"burn(uint256)":{"details":"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.","params":{"value":"The amount of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}},"burnFrom(address,uint256)":{"details":"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account to burn the tokens from.","value":"The amount of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard, optional extension: Burnable (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address[],uint256[])":"1b9a7529","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\",\"params\":{\"owners\":\"The list of accounts to burn the tokens from.\",\"values\":\"The list of amounts of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burn(uint256)\":{\"details\":\"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.\",\"params\":{\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account to burn the tokens from.\",\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Burnable (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"notice\":\"Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\"},\"burn(uint256)\":{\"notice\":\"Burns an amount of tokens from the sender, decreasing the total supply.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns an amount of tokens from a specified address, decreasing the total supply.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Burnable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20BurnableBase} from \\\"./base/ERC20BurnableBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Burnable is ERC20BurnableBase {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    constructor() {\\n        ERC20Storage.initERC20Burnable();\\n    }\\n}\\n\",\"keccak256\":\"0x9698a148105772a3432afb8e2f4dd552466aa217e042c8540df0024c9a1a50fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BurnableBase is Context, IERC20Burnable {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burn(uint256 value) external virtual override returns (bool) {\\n        ERC20Storage.layout().burn(_msgSender(), value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burnFrom(address from, uint256 value) external virtual override returns (bool) {\\n        ERC20Storage.layout().burnFrom(_msgSender(), from, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchBurnFrom(_msgSender(), owners, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xa37701705ac19757b61e470c1349d2ef3a8f3bbf2d8d227878d8b52004066e5d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address[],uint256[])":{"notice":"Burns multiple amounts of tokens from multiple owners, decreasing the total supply."},"burn(uint256)":{"notice":"Burns an amount of tokens from the sender, decreasing the total supply."},"burnFrom(address,uint256)":{"notice":"Burns an amount of tokens from a specified address, decreasing the total supply."},"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Burnable."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol":{"ERC20Detailed":{"abi":[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"constructor":{"params":{"tokenDecimals":"The token decimals.","tokenName":"The token name.","tokenSymbol":"The token symbol."}},"decimals()":{"details":"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.","returns":{"_0":"The number of decimals used to display the balances."}},"name()":{"returns":{"_0":"The name of the token."}},"symbol()":{"returns":{"_0":"The symbol of the token."}}},"title":"ERC20 Fungible Token Standard, optional extension: Detailed (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"tokenDecimals\":\"The token decimals.\",\"tokenName\":\"The token name.\",\"tokenSymbol\":\"The token symbol.\"}},\"decimals()\":{\"details\":\"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\",\"returns\":{\"_0\":\"The number of decimals used to display the balances.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Detailed (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with the token details.Marks the following ERC165 interface(s) as supported: ERC20Detailed.\"},\"decimals()\":{\"notice\":\"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol\":\"ERC20Detailed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20DetailedStorage} from \\\"./libraries/ERC20DetailedStorage.sol\\\";\\nimport {ERC20DetailedBase} from \\\"./base/ERC20DetailedBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Detailed is ERC20DetailedBase {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    /// @notice Initializes the storage with the token details.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) {\\n        ERC20DetailedStorage.layout().constructorInit(tokenName, tokenSymbol, tokenDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0x4cfad4c54b5f56dace3b93ad1ac8f826546d96066acc52c4d2f89f38592026f5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./../libraries/ERC20DetailedStorage.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20DetailedBase is IERC20Detailed {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    /// @inheritdoc IERC20Detailed\\n    function name() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().name();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function symbol() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().symbol();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function decimals() external view override returns (uint8) {\\n        return ERC20DetailedStorage.layout().decimals();\\n    }\\n}\\n\",\"keccak256\":\"0x6c6660e3a72dc1142df26fa586b6dde752cf96fd5320b4a8cd2bcb1028cd10b6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x211d4d4a7995acc283a54ec021f574434cfdfc97ed8c39ac0a335be8b1f5afee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with the token details.Marks the following ERC165 interface(s) as supported: ERC20Detailed."},"decimals()":{"notice":"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol":{"ERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"setTokenURI(string)":{"details":"Reverts if the sender is not the contract owner.","params":{"uri":"The token URI."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"tokenURI()":{"returns":{"_0":"The token metadata URI."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC20 Fungible Token Standard, optional extension: Metadata (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","setTokenURI(string)":"e0df5b6f","supportsInterface(bytes4)":"01ffc9a7","tokenURI()":"3c130d90","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setTokenURI(string)\":{\"details\":\"Reverts if the sender is not the contract owner.\",\"params\":{\"uri\":\"The token URI.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"tokenURI()\":{\"returns\":{\"_0\":\"The token metadata URI.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Metadata (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Metadata.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setTokenURI(string)\":{\"notice\":\"Sets the token URI.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"tokenURI()\":{\"notice\":\"Gets the token metadata URI.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol\":\"ERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20MetadataStorage} from \\\"./libraries/ERC20MetadataStorage.sol\\\";\\nimport {ERC20MetadataBase} from \\\"./base/ERC20MetadataBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Metadata is ERC20MetadataBase, ContractOwnership {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\\n    constructor() {\\n        ERC20MetadataStorage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x6dc76cad3f8d679e55ae6244d681a88d392346bc7984e888b3dd56d77b88bec3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ERC20MetadataStorage} from \\\"./../libraries/ERC20MetadataStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract ERC20MetadataBase is Context, IERC20Metadata {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Sets the token URI.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @param uri The token URI.\\n    function setTokenURI(string calldata uri) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        ERC20MetadataStorage.layout().setTokenURI(uri);\\n    }\\n\\n    /// @inheritdoc IERC20Metadata\\n    function tokenURI() external view override returns (string memory) {\\n        return ERC20MetadataStorage.layout().tokenURI();\\n    }\\n}\\n\",\"keccak256\":\"0xafc7f7d8d6344772864187460424e36446284dd6f3e8b575635e323e988a9409\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\\ninterface IERC20Metadata {\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI() external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x6df7125e130e45af5b4dda067ef73a0dc22394616fc37a201d9f7db43caed5e5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20MetadataStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    struct Layout {\\n        string uri;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Metadata.storage\\\")) - 1);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the token URI.\\n    /// @param uri The token URI.\\n    function setTokenURI(Layout storage s, string calldata uri) internal {\\n        s.uri = uri;\\n    }\\n\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\\n        return s.uri;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac83c87ff6e55db9ff3353956b4613602188257c84357be9d71471332b28fab0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Metadata."},"owner()":{"notice":"Gets the address of the contract owner."},"setTokenURI(string)":{"notice":"Sets the token URI."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"tokenURI()":{"notice":"Gets the token metadata URI."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol":{"ERC20Mintable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"batchMint(address[],uint256[])":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"recipients":"The list of accounts to mint the tokens to.","values":"The list of amounts of tokens to mint to each of `recipients`."}},"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"mint(address,uint256)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"to":"The account to mint the tokens to.","value":"The amount of tokens to mint."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC20 Fungible Token Standard, optional extension: Mintable (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"MINTER_ROLE()":"d5391393","batchMint(address[],uint256[])":"68573107","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","mint(address,uint256)":"40c10f19","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address[],uint256[])\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"recipients\":\"The list of accounts to mint the tokens to.\",\"values\":\"The list of amounts of tokens to mint to each of `recipients`.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"to\":\"The account to mint the tokens to.\",\"value\":\"The amount of tokens to mint.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Mintable (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"}},\"kind\":\"user\",\"methods\":{\"batchMint(address[],uint256[])\":{\"notice\":\"Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Mintable.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"mint(address,uint256)\":{\"notice\":\"Mints an amount of tokens to a recipient, increasing the total supply.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol\":\"ERC20Mintable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xad30286210b6693b212a323037dde404939d7745e4578ee1a899cce60b3aa216\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(\\n        Layout storage s,\\n        address sender,\\n        bytes32 role\\n    ) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40e5d3ab6520371a3631dd21841ece33ebb1137663c1557d8b566abe50cd0710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20MintableBase} from \\\"./base/ERC20MintableBase.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Mintable is ERC20MintableBase, AccessControl {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    constructor() {\\n        ERC20Storage.initERC20Mintable();\\n    }\\n}\\n\",\"keccak256\":\"0xcc66fdcce200179aba42efdbc313fd1f3ebc7c9849909bc9ceb1b1b125cffda0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC20MintableBase is Context, IERC20Mintable {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC20Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function mint(address to, uint256 value) external virtual override {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC20Storage.layout().mint(to, value);\\n    }\\n\\n    /// @inheritdoc IERC20Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external virtual override {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC20Storage.layout().batchMint(recipients, values);\\n    }\\n}\\n\",\"keccak256\":\"0x2dd8173df413d58d7e900a986c5150a8805e3df828abb355f7a0ca475876fe1d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."}},"kind":"user","methods":{"batchMint(address[],uint256[])":{"notice":"Mints multiple amounts of tokens to multiple recipients, increasing the total supply."},"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Mintable."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"mint(address,uint256)":{"notice":"Mints an amount of tokens to a recipient, increasing the total supply."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol":{"ERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Note: This contract requires ERC20Detailed.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.","returns":{"_0":"The EIP-712 encoded hash struct of the domain-specific information for permits."}},"nonces(address)":{"params":{"owner":"The account to check the nonce of."},"returns":{"_0":"The current permit nonce of `owner`."}},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.","params":{"deadline":"The deadline from which the permit signature is no longer valid.","owner":"The token owner granting the allowance to `spender`.","r":"Permit signature r parameter.","s":"Permit signature s parameter.","spender":"The token spender being granted the allowance by `owner`.","v":"Permit signature v parameter","value":"The allowance amount to grant."}}},"title":"ERC20 Fungible Token Standard, optional extension: Permit (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Note: This contract requires ERC20Detailed.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.\",\"returns\":{\"_0\":\"The EIP-712 encoded hash struct of the domain-specific information for permits.\"}},\"nonces(address)\":{\"params\":{\"owner\":\"The account to check the nonce of.\"},\"returns\":{\"_0\":\"The current permit nonce of `owner`.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.\",\"params\":{\"deadline\":\"The deadline from which the permit signature is no longer valid.\",\"owner\":\"The token owner granting the allowance to `spender`.\",\"r\":\"Permit signature r parameter.\",\"s\":\"Permit signature s parameter.\",\"spender\":\"The token spender being granted the allowance by `owner`.\",\"v\":\"Permit signature v parameter\",\"value\":\"The allowance amount to grant.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Permit (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\"},\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Permit.\"},\"nonces(address)\":{\"notice\":\"Gets the current permit nonce of an account.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./interfaces/IERC20Permit.sol\\\";\\nimport {ERC20PermitStorage} from \\\"./libraries/ERC20PermitStorage.sol\\\";\\nimport {ERC20PermitBase} from \\\"./base/ERC20PermitBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Note: This contract requires ERC20Detailed.\\nabstract contract ERC20Permit is ERC20PermitBase {\\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\\n    constructor() {\\n        ERC20PermitStorage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x365a7e6d423193e1f83d774d469a21243e28ac08ac48bc62ee529c9f53d471e5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {ERC20PermitStorage} from \\\"./../libraries/ERC20PermitStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC20Detailed.\\nabstract contract ERC20PermitBase is Context, IERC20Permit {\\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\\n\\n    /// @inheritdoc IERC20Permit\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        ERC20PermitStorage.layout().permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    function nonces(address owner) external view override returns (uint256) {\\n        return ERC20PermitStorage.layout().nonces(owner);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return ERC20PermitStorage.DOMAIN_SEPARATOR();\\n    }\\n}\\n\",\"keccak256\":\"0xc6083e06bbb4465fc80948af0a0e74e9808bf204ce423856ee625cdf07bc2754\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit \\u2013 712-signed approvals\\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\\ninterface IERC20Permit {\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(address owner) external view returns (uint256 nonce);\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\\n}\\n\",\"keccak256\":\"0x7ffba0a81ba8e7140397a36ece601c20a684343472736f1926cf6b03d156eb92\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x211d4d4a7995acc283a54ec021f574434cfdfc97ed8c39ac0a335be8b1f5afee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {ERC20Storage} from \\\"./ERC20Storage.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./ERC20DetailedStorage.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20PermitStorage {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) accountNonces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Permit.storage\\\")) - 1);\\n\\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        Layout storage st,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: permit from address(0)\\\");\\n        require(block.timestamp <= deadline, \\\"ERC20: expired permit\\\");\\n        unchecked {\\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\\n            bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n            address signer = ecrecover(hash, v, r, s);\\n            require(signer == owner, \\\"ERC20: invalid permit\\\");\\n        }\\n        ERC20Storage.layout().approve(owner, spender, value);\\n    }\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\\n        return s.accountNonces[owner];\\n    }\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\\n                    keccak256(\\\"1\\\"),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85e578a3e3fd1bcd2749f41c9562bb0fb930644033b39a3757319ab4a264a354\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"Returns the EIP-712 encoded hash struct of the domain-specific information for permits."},"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Permit."},"nonces(address)":{"notice":"Gets the current permit nonce of an account."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114"}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol":{"ERC20SafeTransfers":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"_0":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"_0":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard, optional extension: Safe Transfers (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Safe Transfers (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\"},\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol\":\"ERC20SafeTransfers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20SafeTransfersBase} from \\\"./base/ERC20SafeTransfersBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20SafeTransfers is ERC20SafeTransfersBase {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    constructor() {\\n        ERC20Storage.initERC20SafeTransfers();\\n    }\\n}\\n\",\"keccak256\":\"0x379357be54c3effcd23dec4c54f20564596071603226bd3eb339413b4bee1e72\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20SafeTransfersBase is Context, IERC20SafeTransfers {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().safeTransfer(_msgSender(), to, value, data);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().safeTransferFrom(_msgSender(), from, to, value, data);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4a74b0f7b1ca9007cec26b6a5295027e4307a5dee2329c9f4695b41242170b48\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers."},"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol":{"ERC20Base":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"supply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","kind":"dev","methods":{"allowance(address,address)":{"params":{"owner":"The account that has granted an allowance to `spender`.","spender":"The account that was granted an allowance by `owner`."},"returns":{"value":"The amount which `spender` is allowed to spend on behalf of `owner`."}},"approve(address,uint256)":{"details":"Reverts if `spender` is the zero address.Emits an {Approval} event.","params":{"spender":"The account being granted the allowance by the message caller.","value":"The allowance amount to grant."},"returns":{"result":"Whether the operation succeeded."}},"balanceOf(address)":{"params":{"owner":"The account whose balance will be returned."},"returns":{"balance":"The account balance."}},"decreaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being decreased.","value":"The allowance amount decrease."},"returns":{"result":"Whether the operation succeeded."}},"increaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being increased.","value":"The allowance amount increase."},"returns":{"result":"Whether the operation succeeded."}},"totalSupply()":{"returns":{"supply":"The total token supply."}},"transfer(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.","params":{"to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"transferFrom(address,address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account that has granted an allowance to `spender`.\",\"spender\":\"The account that was granted an allowance by `owner`.\"},\"returns\":{\"value\":\"The amount which `spender` is allowed to spend on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Emits an {Approval} event.\",\"params\":{\"spender\":\"The account being granted the allowance by the message caller.\",\"value\":\"The allowance amount to grant.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The account whose balance will be returned.\"},\"returns\":{\"balance\":\"The account balance.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being decreased.\",\"value\":\"The allowance amount decrease.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being increased.\",\"value\":\"The allowance amount increase.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"The total token supply.\"}},\"transfer(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.\",\"params\":{\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Gets the amount that an account is allowed to spend on behalf of another.\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"balanceOf(address)\":{\"notice\":\"Gets an account balance.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"totalSupply()\":{\"notice\":\"Gets the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol\":\"ERC20Base\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC20Base is Context, IERC20, IERC20Allowance {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20\\n    function approve(address spender, uint256 value) external virtual override returns (bool result) {\\n        ERC20Storage.layout().approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address to, uint256 value) external virtual override returns (bool result) {\\n        ERC20Storage.layout().transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual override returns (bool result) {\\n        ERC20Storage.layout().transferFrom(_msgSender(), from, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual override returns (bool result) {\\n        ERC20Storage.layout().increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual override returns (bool result) {\\n        ERC20Storage.layout().decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() external view override returns (uint256 supply) {\\n        return ERC20Storage.layout().totalSupply();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address owner) external view override returns (uint256 balance) {\\n        return ERC20Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual override returns (uint256 value) {\\n        return ERC20Storage.layout().allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0xc31905cde6fc13c3f294bfef5215349ee71b231f4f89a35d1b5ce4924a7aefdc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when an approval is set."},"Transfer(address,address,uint256)":{"notice":"Emitted when tokens are transferred, including zero value transfers."}},"kind":"user","methods":{"allowance(address,address)":{"notice":"Gets the amount that an account is allowed to spend on behalf of another."},"approve(address,uint256)":{"notice":"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"balanceOf(address)":{"notice":"Gets an account balance."},"decreaseAllowance(address,uint256)":{"notice":"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"increaseAllowance(address,uint256)":{"notice":"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"totalSupply()":{"notice":"Gets the total token supply."},"transfer(address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from the sender."},"transferFrom(address,address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol":{"ERC20BatchTransfersBase":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).","kind":"dev","methods":{"batchTransfer(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.","params":{"recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"_0":"Whether the operation succeeded."}},"batchTransferFrom(address,address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to be transferred.","recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"_0":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransfer(address[],uint256[])":"88d695b2","batchTransferFrom(address,address[],uint256[])":"4885b254"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).\",\"kind\":\"dev\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.\",\"params\":{\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"batchTransferFrom(address,address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to be transferred.\",\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from the sender.\"},\"batchTransferFrom(address,address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol\":\"ERC20BatchTransfersBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BatchTransfersBase is Context, IERC20BatchTransfers {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchTransfer(_msgSender(), recipients, values);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchTransferFrom(_msgSender(), from, recipients, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b64b7f17accdc7aa7ee690afb5174e8535b78cb08efaf817cdbcd9615bce1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchTransfer(address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from the sender."},"batchTransferFrom(address,address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol":{"ERC20BurnableBase":{"abi":[{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).","kind":"dev","methods":{"batchBurnFrom(address[],uint256[])":{"details":"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).","params":{"owners":"The list of accounts to burn the tokens from.","values":"The list of amounts of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}},"burn(uint256)":{"details":"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.","params":{"value":"The amount of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}},"burnFrom(address,uint256)":{"details":"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account to burn the tokens from.","value":"The amount of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address[],uint256[])":"1b9a7529","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\",\"params\":{\"owners\":\"The list of accounts to burn the tokens from.\",\"values\":\"The list of amounts of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burn(uint256)\":{\"details\":\"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.\",\"params\":{\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account to burn the tokens from.\",\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"notice\":\"Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\"},\"burn(uint256)\":{\"notice\":\"Burns an amount of tokens from the sender, decreasing the total supply.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns an amount of tokens from a specified address, decreasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol\":\"ERC20BurnableBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BurnableBase is Context, IERC20Burnable {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burn(uint256 value) external virtual override returns (bool) {\\n        ERC20Storage.layout().burn(_msgSender(), value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burnFrom(address from, uint256 value) external virtual override returns (bool) {\\n        ERC20Storage.layout().burnFrom(_msgSender(), from, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchBurnFrom(_msgSender(), owners, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xa37701705ac19757b61e470c1349d2ef3a8f3bbf2d8d227878d8b52004066e5d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address[],uint256[])":{"notice":"Burns multiple amounts of tokens from multiple owners, decreasing the total supply."},"burn(uint256)":{"notice":"Burns an amount of tokens from the sender, decreasing the total supply."},"burnFrom(address,uint256)":{"notice":"Burns an amount of tokens from a specified address, decreasing the total supply."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol":{"ERC20DetailedBase":{"abi":[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).","kind":"dev","methods":{"decimals()":{"details":"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.","returns":{"_0":"The number of decimals used to display the balances."}},"name()":{"returns":{"_0":"The name of the token."}},"symbol()":{"returns":{"_0":"The symbol of the token."}}},"title":"ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).\",\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\",\"returns\":{\"_0\":\"The number of decimals used to display the balances.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol\":\"ERC20DetailedBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./../libraries/ERC20DetailedStorage.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20DetailedBase is IERC20Detailed {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    /// @inheritdoc IERC20Detailed\\n    function name() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().name();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function symbol() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().symbol();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function decimals() external view override returns (uint8) {\\n        return ERC20DetailedStorage.layout().decimals();\\n    }\\n}\\n\",\"keccak256\":\"0x6c6660e3a72dc1142df26fa586b6dde752cf96fd5320b4a8cd2bcb1028cd10b6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x211d4d4a7995acc283a54ec021f574434cfdfc97ed8c39ac0a335be8b1f5afee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"decimals()":{"notice":"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol":{"ERC20MetadataBase":{"abi":[{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).Note: This contract requires ERC173 (Contract Ownership standard).","kind":"dev","methods":{"setTokenURI(string)":{"details":"Reverts if the sender is not the contract owner.","params":{"uri":"The token URI."}},"tokenURI()":{"returns":{"_0":"The token metadata URI."}}},"title":"ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setTokenURI(string)":"e0df5b6f","tokenURI()":"3c130d90"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).Note: This contract requires ERC173 (Contract Ownership standard).\",\"kind\":\"dev\",\"methods\":{\"setTokenURI(string)\":{\"details\":\"Reverts if the sender is not the contract owner.\",\"params\":{\"uri\":\"The token URI.\"}},\"tokenURI()\":{\"returns\":{\"_0\":\"The token metadata URI.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setTokenURI(string)\":{\"notice\":\"Sets the token URI.\"},\"tokenURI()\":{\"notice\":\"Gets the token metadata URI.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol\":\"ERC20MetadataBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ERC20MetadataStorage} from \\\"./../libraries/ERC20MetadataStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract ERC20MetadataBase is Context, IERC20Metadata {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Sets the token URI.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @param uri The token URI.\\n    function setTokenURI(string calldata uri) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        ERC20MetadataStorage.layout().setTokenURI(uri);\\n    }\\n\\n    /// @inheritdoc IERC20Metadata\\n    function tokenURI() external view override returns (string memory) {\\n        return ERC20MetadataStorage.layout().tokenURI();\\n    }\\n}\\n\",\"keccak256\":\"0xafc7f7d8d6344772864187460424e36446284dd6f3e8b575635e323e988a9409\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\\ninterface IERC20Metadata {\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI() external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x6df7125e130e45af5b4dda067ef73a0dc22394616fc37a201d9f7db43caed5e5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20MetadataStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    struct Layout {\\n        string uri;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Metadata.storage\\\")) - 1);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the token URI.\\n    /// @param uri The token URI.\\n    function setTokenURI(Layout storage s, string calldata uri) internal {\\n        s.uri = uri;\\n    }\\n\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\\n        return s.uri;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac83c87ff6e55db9ff3353956b4613602188257c84357be9d71471332b28fab0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setTokenURI(string)":{"notice":"Sets the token URI."},"tokenURI()":{"notice":"Gets the token metadata URI."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol":{"ERC20MintableBase":{"abi":[{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).Note: This contract requires AccessControl.","kind":"dev","methods":{"batchMint(address[],uint256[])":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"recipients":"The list of accounts to mint the tokens to.","values":"The list of amounts of tokens to mint to each of `recipients`."}},"mint(address,uint256)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"to":"The account to mint the tokens to.","value":"The amount of tokens to mint."}}},"title":"ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"MINTER_ROLE()":"d5391393","batchMint(address[],uint256[])":"68573107","mint(address,uint256)":"40c10f19"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).Note: This contract requires AccessControl.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address[],uint256[])\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"recipients\":\"The list of accounts to mint the tokens to.\",\"values\":\"The list of amounts of tokens to mint to each of `recipients`.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"to\":\"The account to mint the tokens to.\",\"value\":\"The amount of tokens to mint.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address[],uint256[])\":{\"notice\":\"Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\"},\"mint(address,uint256)\":{\"notice\":\"Mints an amount of tokens to a recipient, increasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol\":\"ERC20MintableBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(\\n        Layout storage s,\\n        address sender,\\n        bytes32 role\\n    ) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40e5d3ab6520371a3631dd21841ece33ebb1137663c1557d8b566abe50cd0710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC20MintableBase is Context, IERC20Mintable {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC20Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function mint(address to, uint256 value) external virtual override {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC20Storage.layout().mint(to, value);\\n    }\\n\\n    /// @inheritdoc IERC20Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external virtual override {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC20Storage.layout().batchMint(recipients, values);\\n    }\\n}\\n\",\"keccak256\":\"0x2dd8173df413d58d7e900a986c5150a8805e3df828abb355f7a0ca475876fe1d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchMint(address[],uint256[])":{"notice":"Mints multiple amounts of tokens to multiple recipients, increasing the total supply."},"mint(address,uint256)":{"notice":"Mints an amount of tokens to a recipient, increasing the total supply."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol":{"ERC20PermitBase":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).Note: This contract requires ERC20Detailed.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.","returns":{"_0":"The EIP-712 encoded hash struct of the domain-specific information for permits."}},"nonces(address)":{"params":{"owner":"The account to check the nonce of."},"returns":{"_0":"The current permit nonce of `owner`."}},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.","params":{"deadline":"The deadline from which the permit signature is no longer valid.","owner":"The token owner granting the allowance to `spender`.","r":"Permit signature r parameter.","s":"Permit signature s parameter.","spender":"The token spender being granted the allowance by `owner`.","v":"Permit signature v parameter","value":"The allowance amount to grant."}}},"title":"ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).Note: This contract requires ERC20Detailed.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.\",\"returns\":{\"_0\":\"The EIP-712 encoded hash struct of the domain-specific information for permits.\"}},\"nonces(address)\":{\"params\":{\"owner\":\"The account to check the nonce of.\"},\"returns\":{\"_0\":\"The current permit nonce of `owner`.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.\",\"params\":{\"deadline\":\"The deadline from which the permit signature is no longer valid.\",\"owner\":\"The token owner granting the allowance to `spender`.\",\"r\":\"Permit signature r parameter.\",\"s\":\"Permit signature s parameter.\",\"spender\":\"The token spender being granted the allowance by `owner`.\",\"v\":\"Permit signature v parameter\",\"value\":\"The allowance amount to grant.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\"},\"nonces(address)\":{\"notice\":\"Gets the current permit nonce of an account.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol\":\"ERC20PermitBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {ERC20PermitStorage} from \\\"./../libraries/ERC20PermitStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC20Detailed.\\nabstract contract ERC20PermitBase is Context, IERC20Permit {\\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\\n\\n    /// @inheritdoc IERC20Permit\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        ERC20PermitStorage.layout().permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    function nonces(address owner) external view override returns (uint256) {\\n        return ERC20PermitStorage.layout().nonces(owner);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return ERC20PermitStorage.DOMAIN_SEPARATOR();\\n    }\\n}\\n\",\"keccak256\":\"0xc6083e06bbb4465fc80948af0a0e74e9808bf204ce423856ee625cdf07bc2754\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit \\u2013 712-signed approvals\\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\\ninterface IERC20Permit {\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(address owner) external view returns (uint256 nonce);\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\\n}\\n\",\"keccak256\":\"0x7ffba0a81ba8e7140397a36ece601c20a684343472736f1926cf6b03d156eb92\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x211d4d4a7995acc283a54ec021f574434cfdfc97ed8c39ac0a335be8b1f5afee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {ERC20Storage} from \\\"./ERC20Storage.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./ERC20DetailedStorage.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20PermitStorage {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) accountNonces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Permit.storage\\\")) - 1);\\n\\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        Layout storage st,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: permit from address(0)\\\");\\n        require(block.timestamp <= deadline, \\\"ERC20: expired permit\\\");\\n        unchecked {\\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\\n            bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n            address signer = ecrecover(hash, v, r, s);\\n            require(signer == owner, \\\"ERC20: invalid permit\\\");\\n        }\\n        ERC20Storage.layout().approve(owner, spender, value);\\n    }\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\\n        return s.accountNonces[owner];\\n    }\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\\n                    keccak256(\\\"1\\\"),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85e578a3e3fd1bcd2749f41c9562bb0fb930644033b39a3757319ab4a264a354\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"Returns the EIP-712 encoded hash struct of the domain-specific information for permits."},"nonces(address)":{"notice":"Gets the current permit nonce of an account."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114"}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol":{"ERC20SafeTransfersBase":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).","kind":"dev","methods":{"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"_0":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"_0":"Whether the operation succeeded."}}},"title":"ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC20 (Fungible Token Standard).\",\"kind\":\"dev\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol\":\"ERC20SafeTransfersBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20SafeTransfersBase is Context, IERC20SafeTransfers {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().safeTransfer(_msgSender(), to, value, data);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().safeTransferFrom(_msgSender(), from, to, value, data);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4a74b0f7b1ca9007cec26b6a5295027e4307a5dee2329c9f4695b41242170b48\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"supply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.","events":{"Approval(address,address,uint256)":{"params":{"owner":"The account granting an allowance to `spender`.","spender":"The account being granted an allowance from `owner`.","value":"The allowance amount being granted."}},"Transfer(address,address,uint256)":{"params":{"from":"The account where the transferred tokens are withdrawn from.","to":"The account where the transferred tokens are deposited to.","value":"The amount of tokens being transferred."}}},"kind":"dev","methods":{"allowance(address,address)":{"params":{"owner":"The account that has granted an allowance to `spender`.","spender":"The account that was granted an allowance by `owner`."},"returns":{"value":"The amount which `spender` is allowed to spend on behalf of `owner`."}},"approve(address,uint256)":{"details":"Reverts if `spender` is the zero address.Emits an {Approval} event.","params":{"spender":"The account being granted the allowance by the message caller.","value":"The allowance amount to grant."},"returns":{"result":"Whether the operation succeeded."}},"balanceOf(address)":{"params":{"owner":"The account whose balance will be returned."},"returns":{"balance":"The account balance."}},"totalSupply()":{"returns":{"supply":"The total token supply."}},"transfer(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.","params":{"to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"transferFrom(address,address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, basic interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account granting an allowance to `spender`.\",\"spender\":\"The account being granted an allowance from `owner`.\",\"value\":\"The allowance amount being granted.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account where the transferred tokens are withdrawn from.\",\"to\":\"The account where the transferred tokens are deposited to.\",\"value\":\"The amount of tokens being transferred.\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account that has granted an allowance to `spender`.\",\"spender\":\"The account that was granted an allowance by `owner`.\"},\"returns\":{\"value\":\"The amount which `spender` is allowed to spend on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Emits an {Approval} event.\",\"params\":{\"spender\":\"The account being granted the allowance by the message caller.\",\"value\":\"The allowance amount to grant.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The account whose balance will be returned.\"},\"returns\":{\"balance\":\"The account balance.\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"The total token supply.\"}},\"transfer(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.\",\"params\":{\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, basic interface.\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Gets the amount that an account is allowed to spend on behalf of another.\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"balanceOf(address)\":{\"notice\":\"Gets an account balance.\"},\"totalSupply()\":{\"notice\":\"Gets the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when an approval is set."},"Transfer(address,address,uint256)":{"notice":"Emitted when tokens are transferred, including zero value transfers."}},"kind":"user","methods":{"allowance(address,address)":{"notice":"Gets the amount that an account is allowed to spend on behalf of another."},"approve(address,uint256)":{"notice":"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"balanceOf(address)":{"notice":"Gets an account balance."},"totalSupply()":{"notice":"Gets the total token supply."},"transfer(address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from the sender."},"transferFrom(address,address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol":{"IERC20Allowance":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x9d075186.","kind":"dev","methods":{"decreaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being decreased.","value":"The allowance amount decrease."},"returns":{"result":"Whether the operation succeeded."}},"increaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being increased.","value":"The allowance amount increase."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Allowance.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x9d075186.\",\"kind\":\"dev\",\"methods\":{\"decreaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being decreased.\",\"value\":\"The allowance amount decrease.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being increased.\",\"value\":\"The allowance amount increase.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Allowance.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":\"IERC20Allowance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"decreaseAllowance(address,uint256)":{"notice":"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"increaseAllowance(address,uint256)":{"notice":"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol":{"IERC20BatchTransfers":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0xc05327e6.","kind":"dev","methods":{"batchTransfer(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.","params":{"recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"result":"Whether the operation succeeded."}},"batchTransferFrom(address,address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to be transferred.","recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Batch Transfers.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransfer(address[],uint256[])":"88d695b2","batchTransferFrom(address,address[],uint256[])":"4885b254"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0xc05327e6.\",\"kind\":\"dev\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.\",\"params\":{\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"batchTransferFrom(address,address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to be transferred.\",\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Batch Transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from the sender.\"},\"batchTransferFrom(address,address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":\"IERC20BatchTransfers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchTransfer(address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from the sender."},"batchTransferFrom(address,address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol":{"IERC20Burnable":{"abi":[{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.","kind":"dev","methods":{"batchBurnFrom(address[],uint256[])":{"details":"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).","params":{"owners":"The list of accounts to burn the tokens from.","values":"The list of amounts of tokens to burn."},"returns":{"result":"Whether the operation succeeded."}},"burn(uint256)":{"details":"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.","params":{"value":"The amount of tokens to burn."},"returns":{"result":"Whether the operation succeeded."}},"burnFrom(address,uint256)":{"details":"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account to burn the tokens from.","value":"The amount of tokens to burn."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address[],uint256[])":"1b9a7529","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\",\"params\":{\"owners\":\"The list of accounts to burn the tokens from.\",\"values\":\"The list of amounts of tokens to burn.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"burn(uint256)\":{\"details\":\"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.\",\"params\":{\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account to burn the tokens from.\",\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"notice\":\"Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\"},\"burn(uint256)\":{\"notice\":\"Burns an amount of tokens from the sender, decreasing the total supply.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns an amount of tokens from a specified address, decreasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":\"IERC20Burnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address[],uint256[])":{"notice":"Burns multiple amounts of tokens from multiple owners, decreasing the total supply."},"burn(uint256)":{"notice":"Burns an amount of tokens from the sender, decreasing the total supply."},"burnFrom(address,uint256)":{"notice":"Burns an amount of tokens from a specified address, decreasing the total supply."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol":{"IERC20Detailed":{"abi":[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"nbDecimals","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0xa219a025.","kind":"dev","methods":{"decimals()":{"details":"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.","returns":{"nbDecimals":"The number of decimals used to display the balances."}},"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}}},"title":"ERC20 Token Standard, optional extension: Detailed.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"nbDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0xa219a025.\",\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\",\"returns\":{\"nbDecimals\":\"The number of decimals used to display the balances.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Detailed.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":\"IERC20Detailed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"decimals()":{"notice":"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"inputs":[],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1046Note: the ERC-165 identifier for this interface is 0x3c130d90.","kind":"dev","methods":{"tokenURI()":{"returns":{"uri":"The token metadata URI."}}},"title":"ERC20 Token Standard, ERC1046 optional extension: Metadata.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokenURI()":"3c130d90"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1046Note: the ERC-165 identifier for this interface is 0x3c130d90.\",\"kind\":\"dev\",\"methods\":{\"tokenURI()\":{\"returns\":{\"uri\":\"The token metadata URI.\"}}},\"title\":\"ERC20 Token Standard, ERC1046 optional extension: Metadata.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI()\":{\"notice\":\"Gets the token metadata URI.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\\ninterface IERC20Metadata {\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI() external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x6df7125e130e45af5b4dda067ef73a0dc22394616fc37a201d9f7db43caed5e5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"tokenURI()":{"notice":"Gets the token metadata URI."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"IERC20Mintable":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x28963e1e.","kind":"dev","methods":{"batchMint(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.","params":{"recipients":"The list of accounts to mint the tokens to.","values":"The list of amounts of tokens to mint to each of `recipients`."}},"mint(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event with `from` set to the zero address.","params":{"to":"The account to mint the tokens to.","value":"The amount of tokens to mint."}}},"title":"ERC20 Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchMint(address[],uint256[])":"68573107","mint(address,uint256)":"40c10f19"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x28963e1e.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\",\"params\":{\"recipients\":\"The list of accounts to mint the tokens to.\",\"values\":\"The list of amounts of tokens to mint to each of `recipients`.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event with `from` set to the zero address.\",\"params\":{\"to\":\"The account to mint the tokens to.\",\"value\":\"The amount of tokens to mint.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address[],uint256[])\":{\"notice\":\"Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\"},\"mint(address,uint256)\":{\"notice\":\"Mints an amount of tokens to a recipient, increasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":\"IERC20Mintable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchMint(address[],uint256[])":{"notice":"Mints multiple amounts of tokens to multiple recipients, increasing the total supply."},"mint(address,uint256)":{"notice":"Mints an amount of tokens to a recipient, increasing the total supply."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2612Note: the ERC-165 identifier for this interface is 0x9d8ff7da.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.","returns":{"domainSeparator":"The EIP-712 encoded hash struct of the domain-specific information for permits."}},"nonces(address)":{"params":{"owner":"The account to check the nonce of."},"returns":{"nonce":"The current permit nonce of `owner`."}},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.","params":{"deadline":"The deadline from which the permit signature is no longer valid.","owner":"The token owner granting the allowance to `spender`.","r":"Permit signature r parameter.","s":"Permit signature s parameter.","spender":"The token spender being granted the allowance by `owner`.","v":"Permit signature v parameter","value":"The allowance amount to grant."}}},"title":"ERC20 Token Standard, ERC2612 optional extension: permit – 712-signed approvals","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2612Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.\",\"returns\":{\"domainSeparator\":\"The EIP-712 encoded hash struct of the domain-specific information for permits.\"}},\"nonces(address)\":{\"params\":{\"owner\":\"The account to check the nonce of.\"},\"returns\":{\"nonce\":\"The current permit nonce of `owner`.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.\",\"params\":{\"deadline\":\"The deadline from which the permit signature is no longer valid.\",\"owner\":\"The token owner granting the allowance to `spender`.\",\"r\":\"Permit signature r parameter.\",\"s\":\"Permit signature s parameter.\",\"spender\":\"The token spender being granted the allowance by `owner`.\",\"v\":\"Permit signature v parameter\",\"value\":\"The allowance amount to grant.\"}}},\"title\":\"ERC20 Token Standard, ERC2612 optional extension: permit \\u2013 712-signed approvals\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\"},\"nonces(address)\":{\"notice\":\"Gets the current permit nonce of an account.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\"}},\"notice\":\"Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit \\u2013 712-signed approvals\\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\\ninterface IERC20Permit {\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(address owner) external view returns (uint256 nonce);\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\\n}\\n\",\"keccak256\":\"0x7ffba0a81ba8e7140397a36ece601c20a684343472736f1926cf6b03d156eb92\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"Returns the EIP-712 encoded hash struct of the domain-specific information for permits."},"nonces(address)":{"notice":"Gets the current permit nonce of an account."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114"}},"notice":"Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"IERC20Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}}},"title":"ERC20 Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}}},\"title\":\"ERC20 Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"}},\"notice\":\"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":\"IERC20Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."}},"notice":"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"IERC20SafeTransfers":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.","kind":"dev","methods":{"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Safe Transfers.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.\",\"kind\":\"dev\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Safe Transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":\"IERC20SafeTransfers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol":{"ERC20DetailedStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab22de1ac3b383c4f6c325765d2e918ce1cd2064e52a7ea84989c5dcf89e127e64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0x22 0xDE BYTE 0xC3 0xB3 DUP4 0xC4 0xF6 0xC3 0x25 PUSH23 0x5D2E918CE1CD2064E52A7EA84989C5DCF89E127E64736F PUSH13 0x63430008110033000000000000 ","sourceMap":"321:3649:44:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;321:3649:44;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab22de1ac3b383c4f6c325765d2e918ce1cd2064e52a7ea84989c5dcf89e127e64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0x22 0xDE BYTE 0xC3 0xB3 DUP4 0xC4 0xF6 0xC3 0x25 PUSH23 0x5D2E918CE1CD2064E52A7EA84989C5DCF89E127E64736F PUSH13 0x63430008110033000000000000 ","sourceMap":"321:3649:44:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ERC20DetailedStorage.Layout storage pointer,string memory,string memory,uint8)":"infinite","decimals(struct ERC20DetailedStorage.Layout storage pointer)":"infinite","layout()":"infinite","name(struct ERC20DetailedStorage.Layout storage pointer)":"infinite","proxyInit(struct ERC20DetailedStorage.Layout storage pointer,string calldata,string calldata,uint8)":"infinite","symbol(struct ERC20DetailedStorage.Layout storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":\"ERC20DetailedStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x211d4d4a7995acc283a54ec021f574434cfdfc97ed8c39ac0a335be8b1f5afee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol":{"ERC20MetadataStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122077afdd51eefccbef30480bd90fd80be5a40381e5ffbe42da201f2d529429ee8e64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xAFDD51EEFCCBEF30480BD90FD80BE5A40381E5FFBE42DA20 0x1F 0x2D MSTORE SWAP5 0x29 0xEE DUP15 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"321:1137:45:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;321:1137:45;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122077afdd51eefccbef30480bd90fd80be5a40381e5ffbe42da201f2d529429ee8e64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xAFDD51EEFCCBEF30480BD90FD80BE5A40381E5FFBE42DA20 0x1F 0x2D MSTORE SWAP5 0x29 0xEE DUP15 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"321:1137:45:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"init()":"infinite","layout()":"infinite","setTokenURI(struct ERC20MetadataStorage.Layout storage pointer,string calldata)":"infinite","tokenURI(struct ERC20MetadataStorage.Layout storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol\":\"ERC20MetadataStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\\ninterface IERC20Metadata {\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI() external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x6df7125e130e45af5b4dda067ef73a0dc22394616fc37a201d9f7db43caed5e5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20MetadataStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    struct Layout {\\n        string uri;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Metadata.storage\\\")) - 1);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the token URI.\\n    /// @param uri The token URI.\\n    function setTokenURI(Layout storage s, string calldata uri) internal {\\n        s.uri = uri;\\n    }\\n\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\\n        return s.uri;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac83c87ff6e55db9ff3353956b4613602188257c84357be9d71471332b28fab0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol":{"ERC20PermitStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220239e9e6330be27a6784ac991e6b47e66953fbda87c833f622a54cc7f05ef0f3564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 SWAP15 SWAP15 PUSH4 0x30BE27A6 PUSH25 0x4AC991E6B47E66953FBDA87C833F622A54CC7F05EF0F356473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"418:4535:46:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;418:4535:46;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220239e9e6330be27a6784ac991e6b47e66953fbda87c833f622a54cc7f05ef0f3564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 SWAP15 SWAP15 PUSH4 0x30BE27A6 PUSH25 0x4AC991E6B47E66953FBDA87C833F622A54CC7F05EF0F356473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"418:4535:46:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"DOMAIN_SEPARATOR()":"infinite","init()":"infinite","layout()":"infinite","nonces(struct ERC20PermitStorage.Layout storage pointer,address)":"infinite","permit(struct ERC20PermitStorage.Layout storage pointer,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol\":\"ERC20PermitStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit \\u2013 712-signed approvals\\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\\ninterface IERC20Permit {\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(address owner) external view returns (uint256 nonce);\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\\n}\\n\",\"keccak256\":\"0x7ffba0a81ba8e7140397a36ece601c20a684343472736f1926cf6b03d156eb92\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x211d4d4a7995acc283a54ec021f574434cfdfc97ed8c39ac0a335be8b1f5afee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {ERC20Storage} from \\\"./ERC20Storage.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./ERC20DetailedStorage.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20PermitStorage {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) accountNonces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Permit.storage\\\")) - 1);\\n\\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        Layout storage st,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: permit from address(0)\\\");\\n        require(block.timestamp <= deadline, \\\"ERC20: expired permit\\\");\\n        unchecked {\\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\\n            bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n            address signer = ecrecover(hash, v, r, s);\\n            require(signer == owner, \\\"ERC20: invalid permit\\\");\\n        }\\n        ERC20Storage.layout().approve(owner, spender, value);\\n    }\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\\n        return s.accountNonces[owner];\\n    }\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\\n                    keccak256(\\\"1\\\"),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85e578a3e3fd1bcd2749f41c9562bb0fb930644033b39a3757319ab4a264a354\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol":{"ERC20Storage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200da161fb3eb476641abf93fe24624cbcd04715dce7d5314c72f8d07c27f01bdf64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD LOG1 PUSH2 0xFB3E 0xB4 PUSH23 0x641ABF93FE24624CBCD04715DCE7D5314C72F8D07C27F0 SHL 0xDF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"798:25304:47:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;798:25304:47;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200da161fb3eb476641abf93fe24624cbcd04715dce7d5314c72f8d07c27f01bdf64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD LOG1 PUSH2 0xFB3E 0xB4 PUSH23 0x641ABF93FE24624CBCD04715DCE7D5314C72F8D07C27F0 SHL 0xDF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"798:25304:47:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOnERC20Received(address,address,address,uint256,bytes memory)":"infinite","allowance(struct ERC20Storage.Layout storage pointer,address,address)":"infinite","approve(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","balanceOf(struct ERC20Storage.Layout storage pointer,address)":"infinite","batchBurnFrom(struct ERC20Storage.Layout storage pointer,address,address[] calldata,uint256[] calldata)":"infinite","batchMint(struct ERC20Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","batchTransfer(struct ERC20Storage.Layout storage pointer,address,address[] calldata,uint256[] calldata)":"infinite","batchTransferFrom(struct ERC20Storage.Layout storage pointer,address,address,address[] calldata,uint256[] calldata)":"infinite","burn(struct ERC20Storage.Layout storage pointer,address,uint256)":"infinite","burnFrom(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","decreaseAllowance(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","increaseAllowance(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","init()":"infinite","initERC20BatchTransfers()":"infinite","initERC20Burnable()":"infinite","initERC20Mintable()":"infinite","initERC20SafeTransfers()":"infinite","layout()":"infinite","mint(struct ERC20Storage.Layout storage pointer,address,uint256)":"infinite","safeTransfer(struct ERC20Storage.Layout storage pointer,address,address,uint256,bytes calldata)":"infinite","safeTransferFrom(struct ERC20Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)":"infinite","totalSupply(struct ERC20Storage.Layout storage pointer)":"infinite","transfer(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","transferFrom(struct ERC20Storage.Layout storage pointer,address,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":\"ERC20Storage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x715b3aa1e8452ad6320e6aeb1cb0dbc1dfc93f906c258f05431b6c572ba21348\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol":{"Bytes32":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a02a70ffcba0c0f74c8f7c14715a381970a5b1b751f853e40697e826575b9e8a64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x2A PUSH17 0xFFCBA0C0F74C8F7C14715A381970A5B1B7 MLOAD 0xF8 MSTORE8 0xE4 MOD SWAP8 0xE8 0x26 JUMPI JUMPDEST SWAP15 DUP11 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"57:1544:49:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;57:1544:49;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a02a70ffcba0c0f74c8f7c14715a381970a5b1b751f853e40697e826575b9e8a64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0x2A PUSH17 0xFFCBA0C0F74C8F7C14715A381970A5B1B7 MLOAD 0xF8 MSTORE8 0xE4 MOD SWAP8 0xE8 0x26 JUMPI JUMPDEST SWAP15 DUP11 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"57:1544:49:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toASCIIString(bytes32)":"infinite","toBase32String(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":\"Bytes32\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220338169e238ba4a4ebaf71af8e8f69cbf1a56a53f7de9532c6181ecd81ceab73264736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER DUP2 PUSH10 0xE238BA4A4EBAF71AF8E8 0xF6 SWAP13 0xBF BYTE JUMP 0xA5 EXTCODEHASH PUSH30 0xE9532C6181ECD81CEAB73264736F6C634300081100330000000000000000 ","sourceMap":"707:3748:53:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:53;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220338169e238ba4a4ebaf71af8e8f69cbf1a56a53f7de9532c6181ecd81ceab73264736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER DUP2 PUSH10 0xE238BA4A4EBAF71AF8E8 0xF6 SWAP13 0xBF BYTE JUMP 0xA5 EXTCODEHASH PUSH30 0xE9532C6181ECD81CEAB73264736F6C634300081100330000000000000000 ","sourceMap":"707:3748:53:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a70cc892a52df79b6673c76fd34ce38f89930c43bec5d782912d709ff33a68264736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 PUSH17 0xCC892A52DF79B6673C76FD34CE38F89930 0xC4 EXTCODESIZE 0xEC 0x5D PUSH25 0x2912D709FF33A68264736F6C63430008110033000000000000 ","sourceMap":"194:8964:54:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:54;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a70cc892a52df79b6673c76fd34ce38f89930c43bec5d782912d709ff33a68264736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 PUSH17 0xCC892A52DF79B6673C76FD34CE38F89930 0xC4 EXTCODESIZE 0xEC 0x5D PUSH25 0x2912D709FF33A68264736F6C63430008110033000000000000 ","sourceMap":"194:8964:54:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048943d89a9c380877cdb36f19933d9e717f8366d34dba98db8ca933cdf1e291064736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SWAP5 RETURNDATASIZE DUP10 0xA9 0xC3 DUP1 DUP8 PUSH29 0xDB36F19933D9E717F8366D34DBA98DB8CA933CDF1E291064736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1279:1391:56:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:56;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048943d89a9c380877cdb36f19933d9e717f8366d34dba98db8ca933cdf1e291064736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SWAP5 RETURNDATASIZE DUP10 0xA9 0xC3 DUP1 DUP8 PUSH29 0xDB36F19933D9E717F8366D34DBA98DB8CA933CDF1E291064736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1279:1391:56:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/token/erc20/PRIMATEv2.sol":{"PRIMATEv2":{"abi":[{"inputs":[{"internalType":"string","name":"tokenName","type":"string"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"uint8","name":"tokenDecimals","type":"uint8"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"supply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.","returns":{"_0":"The EIP-712 encoded hash struct of the domain-specific information for permits."}},"allowance(address,address)":{"params":{"owner":"The account that has granted an allowance to `spender`.","spender":"The account that was granted an allowance by `owner`."},"returns":{"value":"The amount which `spender` is allowed to spend on behalf of `owner`."}},"approve(address,uint256)":{"details":"Reverts if `spender` is the zero address.Emits an {Approval} event.","params":{"spender":"The account being granted the allowance by the message caller.","value":"The allowance amount to grant."},"returns":{"result":"Whether the operation succeeded."}},"balanceOf(address)":{"params":{"owner":"The account whose balance will be returned."},"returns":{"balance":"The account balance."}},"batchBurnFrom(address[],uint256[])":{"details":"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).","params":{"owners":"The list of accounts to burn the tokens from.","values":"The list of amounts of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}},"batchMint(address[],uint256[])":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"recipients":"The list of accounts to mint the tokens to.","values":"The list of amounts of tokens to mint to each of `recipients`."}},"batchTransfer(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.","params":{"recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"_0":"Whether the operation succeeded."}},"batchTransferFrom(address,address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to be transferred.","recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"_0":"Whether the operation succeeded."}},"burn(uint256)":{"details":"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.","params":{"value":"The amount of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}},"burnFrom(address,uint256)":{"details":"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account to burn the tokens from.","value":"The amount of tokens to burn."},"returns":{"_0":"Whether the operation succeeded."}},"decimals()":{"details":"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.","returns":{"_0":"The number of decimals used to display the balances."}},"decreaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being decreased.","value":"The allowance amount decrease."},"returns":{"result":"Whether the operation succeeded."}},"grantRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"_0":"whether `account` has `role`."}},"increaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being increased.","value":"The allowance amount increase."},"returns":{"result":"Whether the operation succeeded."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"mint(address,uint256)":{"details":"Reverts if the sender does not have the 'minter' role.","params":{"to":"The account to mint the tokens to.","value":"The amount of tokens to mint."}},"name()":{"returns":{"_0":"The name of the token."}},"nonces(address)":{"params":{"owner":"The account to check the nonce of."},"returns":{"_0":"The current permit nonce of `owner`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.","params":{"deadline":"The deadline from which the permit signature is no longer valid.","owner":"The token owner granting the allowance to `spender`.","r":"Permit signature r parameter.","s":"Permit signature s parameter.","spender":"The token spender being granted the allowance by `owner`.","v":"Permit signature v parameter","value":"The allowance amount to grant."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"renounceRole(bytes32)":{"details":"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"_0":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"_0":"Whether the operation succeeded."}},"setTokenURI(string)":{"details":"Reverts if the sender is not the contract owner.","params":{"uri":"The token URI."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"symbol()":{"returns":{"_0":"The symbol of the token."}},"tokenURI()":{"returns":{"_0":"The token metadata URI."}},"totalSupply()":{"returns":{"supply":"The total token supply."}},"transfer(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.","params":{"to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"transferFrom(address,address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1342":{"entryPoint":null,"id":1342,"parameterSlots":0,"returnSlots":0},"@_1362":{"entryPoint":null,"id":1362,"parameterSlots":0,"returnSlots":0},"@_1382":{"entryPoint":null,"id":1382,"parameterSlots":0,"returnSlots":0},"@_1417":{"entryPoint":null,"id":1417,"parameterSlots":3,"returnSlots":0},"@_1445":{"entryPoint":null,"id":1445,"parameterSlots":0,"returnSlots":0},"@_1469":{"entryPoint":null,"id":1469,"parameterSlots":0,"returnSlots":0},"@_1495":{"entryPoint":null,"id":1495,"parameterSlots":0,"returnSlots":0},"@_1515":{"entryPoint":null,"id":1515,"parameterSlots":0,"returnSlots":0},"@_43":{"entryPoint":null,"id":43,"parameterSlots":1,"returnSlots":0},"@_5637":{"entryPoint":null,"id":5637,"parameterSlots":4,"returnSlots":0},"@_847":{"entryPoint":null,"id":847,"parameterSlots":1,"returnSlots":0},"@_895":{"entryPoint":null,"id":895,"parameterSlots":1,"returnSlots":0},"@constructorInit_2644":{"entryPoint":483,"id":2644,"parameterSlots":4,"returnSlots":0},"@constructorInit_575":{"entryPoint":642,"id":575,"parameterSlots":2,"returnSlots":0},"@initERC20BatchTransfers_3198":{"entryPoint":910,"id":3198,"parameterSlots":0,"returnSlots":0},"@initERC20Burnable_3249":{"entryPoint":840,"id":3249,"parameterSlots":0,"returnSlots":0},"@initERC20Mintable_3232":{"entryPoint":805,"id":3232,"parameterSlots":0,"returnSlots":0},"@initERC20SafeTransfers_3215":{"entryPoint":875,"id":3215,"parameterSlots":0,"returnSlots":0},"@init_2796":{"entryPoint":768,"id":2796,"parameterSlots":0,"returnSlots":0},"@init_2902":{"entryPoint":945,"id":2902,"parameterSlots":0,"returnSlots":0},"@init_3181":{"entryPoint":329,"id":3181,"parameterSlots":0,"returnSlots":0},"@layout_2746":{"entryPoint":429,"id":2746,"parameterSlots":0,"returnSlots":1},"@layout_681":{"entryPoint":594,"id":681,"parameterSlots":0,"returnSlots":1},"@layout_823":{"entryPoint":980,"id":823,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_777":{"entryPoint":1028,"id":777,"parameterSlots":3,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":1194,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_contract$_IForwarderRegistry_$1020_fromMemory":{"entryPoint":1369,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":1533,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1627,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1710,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1567,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":1172,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5087:58","statements":[{"nodeType":"YulBlock","src":"6:3:58","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:58","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:58","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:58","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:58"},"nodeType":"YulFunctionCall","src":"66:20:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:58"},"nodeType":"YulFunctionCall","src":"56:31:58"},"nodeType":"YulExpressionStatement","src":"56:31:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:58","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:58"},"nodeType":"YulFunctionCall","src":"96:15:58"},"nodeType":"YulExpressionStatement","src":"96:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:58"},"nodeType":"YulFunctionCall","src":"120:15:58"},"nodeType":"YulExpressionStatement","src":"120:15:58"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:58"},{"body":{"nodeType":"YulBlock","src":"210:776:58","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:58"},"nodeType":"YulFunctionCall","src":"261:12:58"},"nodeType":"YulExpressionStatement","src":"261:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:58"},"nodeType":"YulFunctionCall","src":"234:17:58"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:58"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:58"},"nodeType":"YulFunctionCall","src":"230:27:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:58"},"nodeType":"YulFunctionCall","src":"223:35:58"},"nodeType":"YulIf","src":"220:55:58"},{"nodeType":"YulVariableDeclaration","src":"284:23:58","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:58"},"nodeType":"YulFunctionCall","src":"294:13:58"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:58","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:58","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:58"},"nodeType":"YulFunctionCall","src":"330:10:58"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:58"},"nodeType":"YulFunctionCall","src":"326:18:58"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:58"},"nodeType":"YulFunctionCall","src":"369:18:58"},"nodeType":"YulExpressionStatement","src":"369:18:58"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:58"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:58"},"nodeType":"YulFunctionCall","src":"356:10:58"},"nodeType":"YulIf","src":"353:36:58"},{"nodeType":"YulVariableDeclaration","src":"398:17:58","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:58","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:58"},"nodeType":"YulFunctionCall","src":"408:7:58"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:58","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:58","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:58"},"nodeType":"YulFunctionCall","src":"438:9:58"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:58","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:58"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:58"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:58"},"nodeType":"YulFunctionCall","src":"498:13:58"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:58"},"nodeType":"YulFunctionCall","src":"494:22:58"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:58","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:58"},"nodeType":"YulFunctionCall","src":"490:31:58"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:58"},"nodeType":"YulFunctionCall","src":"486:40:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:58"},"nodeType":"YulFunctionCall","src":"474:53:58"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:58"},"nodeType":"YulFunctionCall","src":"588:18:58"},"nodeType":"YulExpressionStatement","src":"588:18:58"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:58"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:58"},"nodeType":"YulFunctionCall","src":"542:18:58"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:58"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:58"},"nodeType":"YulFunctionCall","src":"562:22:58"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:58"},"nodeType":"YulFunctionCall","src":"539:46:58"},"nodeType":"YulIf","src":"536:72:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:58","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:58"},"nodeType":"YulFunctionCall","src":"617:22:58"},"nodeType":"YulExpressionStatement","src":"617:22:58"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:58"},"nodeType":"YulFunctionCall","src":"648:18:58"},"nodeType":"YulExpressionStatement","src":"648:18:58"},{"nodeType":"YulVariableDeclaration","src":"675:14:58","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:58","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:58"},"nodeType":"YulFunctionCall","src":"737:12:58"},"nodeType":"YulExpressionStatement","src":"737:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:58"},"nodeType":"YulFunctionCall","src":"708:15:58"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:58"},"nodeType":"YulFunctionCall","src":"704:24:58"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:58"},"nodeType":"YulFunctionCall","src":"701:33:58"},"nodeType":"YulIf","src":"698:53:58"},{"nodeType":"YulVariableDeclaration","src":"760:10:58","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:58","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:58","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:58"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:58"},"nodeType":"YulFunctionCall","src":"850:14:58"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:58"},"nodeType":"YulFunctionCall","src":"846:23:58"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:58"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:58"},"nodeType":"YulFunctionCall","src":"881:14:58"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:58"},"nodeType":"YulFunctionCall","src":"877:23:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:58"},"nodeType":"YulFunctionCall","src":"871:30:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:58"},"nodeType":"YulFunctionCall","src":"839:63:58"},"nodeType":"YulExpressionStatement","src":"839:63:58"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:58"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:58"},"nodeType":"YulFunctionCall","src":"787:9:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:58","statements":[{"nodeType":"YulAssignment","src":"799:15:58","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:58"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:58"},"nodeType":"YulFunctionCall","src":"804:10:58"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:58"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:58","statements":[]},"src":"779:133:58"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:58"},"nodeType":"YulFunctionCall","src":"932:15:58"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:58"},"nodeType":"YulFunctionCall","src":"928:24:58"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:58","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:58"},"nodeType":"YulFunctionCall","src":"921:35:58"},"nodeType":"YulExpressionStatement","src":"921:35:58"},{"nodeType":"YulAssignment","src":"965:15:58","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:58"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:58"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:58","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:58","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:58","type":""}],"src":"146:840:58"},{"body":{"nodeType":"YulBlock","src":"1168:738:58","statements":[{"body":{"nodeType":"YulBlock","src":"1215:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1224:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1227:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1217:6:58"},"nodeType":"YulFunctionCall","src":"1217:12:58"},"nodeType":"YulExpressionStatement","src":"1217:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1189:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"1198:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1185:3:58"},"nodeType":"YulFunctionCall","src":"1185:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"1210:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1181:3:58"},"nodeType":"YulFunctionCall","src":"1181:33:58"},"nodeType":"YulIf","src":"1178:53:58"},{"nodeType":"YulVariableDeclaration","src":"1240:30:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1260:9:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1254:5:58"},"nodeType":"YulFunctionCall","src":"1254:16:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1244:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1279:28:58","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1297:2:58","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1301:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1293:3:58"},"nodeType":"YulFunctionCall","src":"1293:10:58"},{"kind":"number","nodeType":"YulLiteral","src":"1305:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1289:3:58"},"nodeType":"YulFunctionCall","src":"1289:18:58"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1283:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"1334:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1343:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1346:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1336:6:58"},"nodeType":"YulFunctionCall","src":"1336:12:58"},"nodeType":"YulExpressionStatement","src":"1336:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1322:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"1330:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1319:2:58"},"nodeType":"YulFunctionCall","src":"1319:14:58"},"nodeType":"YulIf","src":"1316:34:58"},{"nodeType":"YulAssignment","src":"1359:71:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1402:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"1413:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1398:3:58"},"nodeType":"YulFunctionCall","src":"1398:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1422:7:58"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1369:28:58"},"nodeType":"YulFunctionCall","src":"1369:61:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1359:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"1439:41:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1465:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1476:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1461:3:58"},"nodeType":"YulFunctionCall","src":"1461:18:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1455:5:58"},"nodeType":"YulFunctionCall","src":"1455:25:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1443:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"1509:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1518:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1521:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1511:6:58"},"nodeType":"YulFunctionCall","src":"1511:12:58"},"nodeType":"YulExpressionStatement","src":"1511:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1495:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"1505:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1492:2:58"},"nodeType":"YulFunctionCall","src":"1492:16:58"},"nodeType":"YulIf","src":"1489:36:58"},{"nodeType":"YulAssignment","src":"1534:73:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1577:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1588:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1573:3:58"},"nodeType":"YulFunctionCall","src":"1573:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1599:7:58"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1544:28:58"},"nodeType":"YulFunctionCall","src":"1544:63:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1534:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"1616:38:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1639:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1650:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1635:3:58"},"nodeType":"YulFunctionCall","src":"1635:18:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1629:5:58"},"nodeType":"YulFunctionCall","src":"1629:25:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1620:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"1702:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1711:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1714:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1704:6:58"},"nodeType":"YulFunctionCall","src":"1704:12:58"},"nodeType":"YulExpressionStatement","src":"1704:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1676:5:58"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1687:5:58"},{"kind":"number","nodeType":"YulLiteral","src":"1694:4:58","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1683:3:58"},"nodeType":"YulFunctionCall","src":"1683:16:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1673:2:58"},"nodeType":"YulFunctionCall","src":"1673:27:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1666:6:58"},"nodeType":"YulFunctionCall","src":"1666:35:58"},"nodeType":"YulIf","src":"1663:55:58"},{"nodeType":"YulAssignment","src":"1727:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"1737:5:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1727:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"1751:40:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1776:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1787:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:58"},"nodeType":"YulFunctionCall","src":"1772:18:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1766:5:58"},"nodeType":"YulFunctionCall","src":"1766:25:58"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"1755:7:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"1858:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1867:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1870:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1860:6:58"},"nodeType":"YulFunctionCall","src":"1860:12:58"},"nodeType":"YulExpressionStatement","src":"1860:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1813:7:58"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"1826:7:58"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1843:3:58","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1839:3:58"},"nodeType":"YulFunctionCall","src":"1839:11:58"},{"kind":"number","nodeType":"YulLiteral","src":"1852:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1835:3:58"},"nodeType":"YulFunctionCall","src":"1835:19:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1822:3:58"},"nodeType":"YulFunctionCall","src":"1822:33:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1810:2:58"},"nodeType":"YulFunctionCall","src":"1810:46:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1803:6:58"},"nodeType":"YulFunctionCall","src":"1803:54:58"},"nodeType":"YulIf","src":"1800:74:58"},{"nodeType":"YulAssignment","src":"1883:17:58","value":{"name":"value_1","nodeType":"YulIdentifier","src":"1893:7:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1883:6:58"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_contract$_IForwarderRegistry_$1020_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1110:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1121:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1133:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1141:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1149:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1157:6:58","type":""}],"src":"991:915:58"},{"body":{"nodeType":"YulBlock","src":"1960:176:58","statements":[{"nodeType":"YulAssignment","src":"1970:17:58","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1982:1:58"},{"name":"y","nodeType":"YulIdentifier","src":"1985:1:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1978:3:58"},"nodeType":"YulFunctionCall","src":"1978:9:58"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"1970:4:58"}]},{"body":{"nodeType":"YulBlock","src":"2019:111:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2040:1:58","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2047:3:58","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2052:10:58","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2043:3:58"},"nodeType":"YulFunctionCall","src":"2043:20:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2033:6:58"},"nodeType":"YulFunctionCall","src":"2033:31:58"},"nodeType":"YulExpressionStatement","src":"2033:31:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2084:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2087:4:58","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2077:6:58"},"nodeType":"YulFunctionCall","src":"2077:15:58"},"nodeType":"YulExpressionStatement","src":"2077:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2112:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2115:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2105:6:58"},"nodeType":"YulFunctionCall","src":"2105:15:58"},"nodeType":"YulExpressionStatement","src":"2105:15:58"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"2002:4:58"},{"name":"x","nodeType":"YulIdentifier","src":"2008:1:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1999:2:58"},"nodeType":"YulFunctionCall","src":"1999:11:58"},"nodeType":"YulIf","src":"1996:134:58"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1942:1:58","type":""},{"name":"y","nodeType":"YulTypedName","src":"1945:1:58","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"1951:4:58","type":""}],"src":"1911:225:58"},{"body":{"nodeType":"YulBlock","src":"2196:325:58","statements":[{"nodeType":"YulAssignment","src":"2206:22:58","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2220:1:58","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2223:4:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2216:3:58"},"nodeType":"YulFunctionCall","src":"2216:12:58"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2206:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"2237:38:58","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2267:4:58"},{"kind":"number","nodeType":"YulLiteral","src":"2273:1:58","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2263:3:58"},"nodeType":"YulFunctionCall","src":"2263:12:58"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2241:18:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"2314:31:58","statements":[{"nodeType":"YulAssignment","src":"2316:27:58","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2330:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"2338:4:58","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2326:3:58"},"nodeType":"YulFunctionCall","src":"2326:17:58"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2316:6:58"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2294:18:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2287:6:58"},"nodeType":"YulFunctionCall","src":"2287:26:58"},"nodeType":"YulIf","src":"2284:61:58"},{"body":{"nodeType":"YulBlock","src":"2404:111:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2425:1:58","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2432:3:58","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2437:10:58","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2428:3:58"},"nodeType":"YulFunctionCall","src":"2428:20:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2418:6:58"},"nodeType":"YulFunctionCall","src":"2418:31:58"},"nodeType":"YulExpressionStatement","src":"2418:31:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2469:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2472:4:58","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2462:6:58"},"nodeType":"YulFunctionCall","src":"2462:15:58"},"nodeType":"YulExpressionStatement","src":"2462:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2497:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2500:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2490:6:58"},"nodeType":"YulFunctionCall","src":"2490:15:58"},"nodeType":"YulExpressionStatement","src":"2490:15:58"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2360:18:58"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2383:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"2391:2:58","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2380:2:58"},"nodeType":"YulFunctionCall","src":"2380:14:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2357:2:58"},"nodeType":"YulFunctionCall","src":"2357:38:58"},"nodeType":"YulIf","src":"2354:161:58"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2176:4:58","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2185:6:58","type":""}],"src":"2141:380:58"},{"body":{"nodeType":"YulBlock","src":"2582:65:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2599:1:58","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2602:3:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2592:6:58"},"nodeType":"YulFunctionCall","src":"2592:14:58"},"nodeType":"YulExpressionStatement","src":"2592:14:58"},{"nodeType":"YulAssignment","src":"2615:26:58","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2633:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2636:4:58","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2623:9:58"},"nodeType":"YulFunctionCall","src":"2623:18:58"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2615:4:58"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2565:3:58","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2573:4:58","type":""}],"src":"2526:121:58"},{"body":{"nodeType":"YulBlock","src":"2733:464:58","statements":[{"body":{"nodeType":"YulBlock","src":"2766:425:58","statements":[{"nodeType":"YulVariableDeclaration","src":"2780:11:58","value":{"kind":"number","nodeType":"YulLiteral","src":"2790:1:58","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2784:2:58","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2811:2:58"},{"name":"array","nodeType":"YulIdentifier","src":"2815:5:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2804:6:58"},"nodeType":"YulFunctionCall","src":"2804:17:58"},"nodeType":"YulExpressionStatement","src":"2804:17:58"},{"nodeType":"YulVariableDeclaration","src":"2834:31:58","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2856:2:58"},{"kind":"number","nodeType":"YulLiteral","src":"2860:4:58","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2846:9:58"},"nodeType":"YulFunctionCall","src":"2846:19:58"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2838:4:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2878:57:58","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2901:4:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2911:1:58","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2918:10:58"},{"kind":"number","nodeType":"YulLiteral","src":"2930:2:58","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2914:3:58"},"nodeType":"YulFunctionCall","src":"2914:19:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2907:3:58"},"nodeType":"YulFunctionCall","src":"2907:27:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2897:3:58"},"nodeType":"YulFunctionCall","src":"2897:38:58"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2882:11:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"2972:23:58","statements":[{"nodeType":"YulAssignment","src":"2974:19:58","value":{"name":"data","nodeType":"YulIdentifier","src":"2989:4:58"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2974:11:58"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2954:10:58"},{"kind":"number","nodeType":"YulLiteral","src":"2966:4:58","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2951:2:58"},"nodeType":"YulFunctionCall","src":"2951:20:58"},"nodeType":"YulIf","src":"2948:47:58"},{"nodeType":"YulVariableDeclaration","src":"3008:41:58","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3022:4:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3032:1:58","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3039:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"3044:2:58","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3035:3:58"},"nodeType":"YulFunctionCall","src":"3035:12:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3028:3:58"},"nodeType":"YulFunctionCall","src":"3028:20:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3018:3:58"},"nodeType":"YulFunctionCall","src":"3018:31:58"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3012:2:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3062:24:58","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"3075:11:58"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3066:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"3160:21:58","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3169:5:58"},{"name":"_1","nodeType":"YulIdentifier","src":"3176:2:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3162:6:58"},"nodeType":"YulFunctionCall","src":"3162:17:58"},"nodeType":"YulExpressionStatement","src":"3162:17:58"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3110:5:58"},{"name":"_2","nodeType":"YulIdentifier","src":"3117:2:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3107:2:58"},"nodeType":"YulFunctionCall","src":"3107:13:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3121:26:58","statements":[{"nodeType":"YulAssignment","src":"3123:22:58","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3136:5:58"},{"kind":"number","nodeType":"YulLiteral","src":"3143:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3132:3:58"},"nodeType":"YulFunctionCall","src":"3132:13:58"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"3123:5:58"}]}]},"pre":{"nodeType":"YulBlock","src":"3103:3:58","statements":[]},"src":"3099:82:58"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2749:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"2754:2:58","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2746:2:58"},"nodeType":"YulFunctionCall","src":"2746:11:58"},"nodeType":"YulIf","src":"2743:448:58"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2705:5:58","type":""},{"name":"len","nodeType":"YulTypedName","src":"2712:3:58","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2717:10:58","type":""}],"src":"2652:545:58"},{"body":{"nodeType":"YulBlock","src":"3287:81:58","statements":[{"nodeType":"YulAssignment","src":"3297:65:58","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3312:4:58"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3330:1:58","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"3333:3:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3326:3:58"},"nodeType":"YulFunctionCall","src":"3326:11:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3343:1:58","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3339:3:58"},"nodeType":"YulFunctionCall","src":"3339:6:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3322:3:58"},"nodeType":"YulFunctionCall","src":"3322:24:58"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3318:3:58"},"nodeType":"YulFunctionCall","src":"3318:29:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3308:3:58"},"nodeType":"YulFunctionCall","src":"3308:40:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3354:1:58","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"3357:3:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3350:3:58"},"nodeType":"YulFunctionCall","src":"3350:11:58"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3305:2:58"},"nodeType":"YulFunctionCall","src":"3305:57:58"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3297:4:58"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3264:4:58","type":""},{"name":"len","nodeType":"YulTypedName","src":"3270:3:58","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3278:4:58","type":""}],"src":"3202:166:58"},{"body":{"nodeType":"YulBlock","src":"3469:1256:58","statements":[{"nodeType":"YulVariableDeclaration","src":"3479:24:58","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3499:3:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3493:5:58"},"nodeType":"YulFunctionCall","src":"3493:10:58"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3483:6:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"3546:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3548:16:58"},"nodeType":"YulFunctionCall","src":"3548:18:58"},"nodeType":"YulExpressionStatement","src":"3548:18:58"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3518:6:58"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3534:2:58","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3538:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3530:3:58"},"nodeType":"YulFunctionCall","src":"3530:10:58"},{"kind":"number","nodeType":"YulLiteral","src":"3542:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3526:3:58"},"nodeType":"YulFunctionCall","src":"3526:18:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3515:2:58"},"nodeType":"YulFunctionCall","src":"3515:30:58"},"nodeType":"YulIf","src":"3512:56:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3621:4:58"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3659:4:58"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3653:5:58"},"nodeType":"YulFunctionCall","src":"3653:11:58"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3627:25:58"},"nodeType":"YulFunctionCall","src":"3627:38:58"},{"name":"newLen","nodeType":"YulIdentifier","src":"3667:6:58"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"3577:43:58"},"nodeType":"YulFunctionCall","src":"3577:97:58"},"nodeType":"YulExpressionStatement","src":"3577:97:58"},{"nodeType":"YulVariableDeclaration","src":"3683:18:58","value":{"kind":"number","nodeType":"YulLiteral","src":"3700:1:58","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3687:9:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3710:23:58","value":{"kind":"number","nodeType":"YulLiteral","src":"3729:4:58","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3714:11:58","type":""}]},{"nodeType":"YulAssignment","src":"3742:24:58","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3755:11:58"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3742:9:58"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3812:656:58","statements":[{"nodeType":"YulVariableDeclaration","src":"3826:35:58","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3845:6:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3857:2:58","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3853:3:58"},"nodeType":"YulFunctionCall","src":"3853:7:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3841:3:58"},"nodeType":"YulFunctionCall","src":"3841:20:58"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3830:7:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3874:49:58","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3918:4:58"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3888:29:58"},"nodeType":"YulFunctionCall","src":"3888:35:58"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3878:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3936:10:58","value":{"kind":"number","nodeType":"YulLiteral","src":"3945:1:58","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3940:1:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"4023:172:58","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4048:6:58"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4066:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4071:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4062:3:58"},"nodeType":"YulFunctionCall","src":"4062:19:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4056:5:58"},"nodeType":"YulFunctionCall","src":"4056:26:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4041:6:58"},"nodeType":"YulFunctionCall","src":"4041:42:58"},"nodeType":"YulExpressionStatement","src":"4041:42:58"},{"nodeType":"YulAssignment","src":"4100:24:58","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4114:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"4122:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4110:3:58"},"nodeType":"YulFunctionCall","src":"4110:14:58"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4100:6:58"}]},{"nodeType":"YulAssignment","src":"4141:40:58","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4158:9:58"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4169:11:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:58"},"nodeType":"YulFunctionCall","src":"4154:27:58"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4141:9:58"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3970:1:58"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3973:7:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3967:2:58"},"nodeType":"YulFunctionCall","src":"3967:14:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3982:28:58","statements":[{"nodeType":"YulAssignment","src":"3984:24:58","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3993:1:58"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3996:11:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3989:3:58"},"nodeType":"YulFunctionCall","src":"3989:19:58"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3984:1:58"}]}]},"pre":{"nodeType":"YulBlock","src":"3963:3:58","statements":[]},"src":"3959:236:58"},{"body":{"nodeType":"YulBlock","src":"4243:166:58","statements":[{"nodeType":"YulVariableDeclaration","src":"4261:43:58","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4288:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4293:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4284:3:58"},"nodeType":"YulFunctionCall","src":"4284:19:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4278:5:58"},"nodeType":"YulFunctionCall","src":"4278:26:58"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4265:9:58","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4328:6:58"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4340:9:58"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4367:1:58","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"4370:6:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4363:3:58"},"nodeType":"YulFunctionCall","src":"4363:14:58"},{"kind":"number","nodeType":"YulLiteral","src":"4379:3:58","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4359:3:58"},"nodeType":"YulFunctionCall","src":"4359:24:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4389:1:58","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4385:3:58"},"nodeType":"YulFunctionCall","src":"4385:6:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4355:3:58"},"nodeType":"YulFunctionCall","src":"4355:37:58"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4351:3:58"},"nodeType":"YulFunctionCall","src":"4351:42:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4336:3:58"},"nodeType":"YulFunctionCall","src":"4336:58:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4321:6:58"},"nodeType":"YulFunctionCall","src":"4321:74:58"},"nodeType":"YulExpressionStatement","src":"4321:74:58"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4214:7:58"},{"name":"newLen","nodeType":"YulIdentifier","src":"4223:6:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4211:2:58"},"nodeType":"YulFunctionCall","src":"4211:19:58"},"nodeType":"YulIf","src":"4208:201:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4429:4:58"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4443:1:58","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4446:6:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4439:3:58"},"nodeType":"YulFunctionCall","src":"4439:14:58"},{"kind":"number","nodeType":"YulLiteral","src":"4455:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4435:3:58"},"nodeType":"YulFunctionCall","src":"4435:22:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4422:6:58"},"nodeType":"YulFunctionCall","src":"4422:36:58"},"nodeType":"YulExpressionStatement","src":"4422:36:58"}]},"nodeType":"YulCase","src":"3805:663:58","value":{"kind":"number","nodeType":"YulLiteral","src":"3810:1:58","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4485:234:58","statements":[{"nodeType":"YulVariableDeclaration","src":"4499:14:58","value":{"kind":"number","nodeType":"YulLiteral","src":"4512:1:58","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4503:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"4548:67:58","statements":[{"nodeType":"YulAssignment","src":"4566:35:58","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4585:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4590:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4581:3:58"},"nodeType":"YulFunctionCall","src":"4581:19:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4575:5:58"},"nodeType":"YulFunctionCall","src":"4575:26:58"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4566:5:58"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4529:6:58"},"nodeType":"YulIf","src":"4526:89:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4635:4:58"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4694:5:58"},{"name":"newLen","nodeType":"YulIdentifier","src":"4701:6:58"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4641:52:58"},"nodeType":"YulFunctionCall","src":"4641:67:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4628:6:58"},"nodeType":"YulFunctionCall","src":"4628:81:58"},"nodeType":"YulExpressionStatement","src":"4628:81:58"}]},"nodeType":"YulCase","src":"4477:242:58","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3785:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"3793:2:58","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3782:2:58"},"nodeType":"YulFunctionCall","src":"3782:14:58"},"nodeType":"YulSwitch","src":"3775:944:58"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3454:4:58","type":""},{"name":"src","nodeType":"YulTypedName","src":"3460:3:58","type":""}],"src":"3373:1352:58"},{"body":{"nodeType":"YulBlock","src":"4904:181:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4921:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"4932:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4914:6:58"},"nodeType":"YulFunctionCall","src":"4914:21:58"},"nodeType":"YulExpressionStatement","src":"4914:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4955:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"4966:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4951:3:58"},"nodeType":"YulFunctionCall","src":"4951:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"4971:2:58","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4944:6:58"},"nodeType":"YulFunctionCall","src":"4944:30:58"},"nodeType":"YulExpressionStatement","src":"4944:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4994:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"5005:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4990:3:58"},"nodeType":"YulFunctionCall","src":"4990:18:58"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"5010:33:58","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4983:6:58"},"nodeType":"YulFunctionCall","src":"4983:61:58"},"nodeType":"YulExpressionStatement","src":"4983:61:58"},{"nodeType":"YulAssignment","src":"5053:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5065:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"5076:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5061:3:58"},"nodeType":"YulFunctionCall","src":"5061:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5053:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4881:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4895:4:58","type":""}],"src":"4730:355:58"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_contract$_IForwarderRegistry_$1020_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value3 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}","id":58,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b5060405162004ef238038062004ef2833981016040819052620000349162000559565b8080338686866200004f6200014960201b62000ecf1760201c565b620000818383836200006b620001ad60201b62000f331760201c565b620001e360201b62000f6117909392919060201c565b505050620000b2816200009e6200025260201b62000fe01760201c565b6200028260201b6200100e1790919060201c565b50620000c86200030060201b620010c41760201c565b620000dd6200032560201b620010f41760201c565b620000f26200034860201b620011221760201c565b620001076200036b60201b620011501760201c565b6200011c6200038e60201b6200117e1760201c565b62000131620003b160201b620011ac1760201c565b6001600160a01b0316608052506200077a9350505050565b600062000160620003d460201b620011d61760201c565b9050620001866336372b0760e01b6001836200040460201b62001204179092919060201c565b620001aa634e83a8c360e11b6001836200040460201b62001204179092919060201c565b50565b600080620001dd60017f335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a82620005fd565b92915050565b83620001f08482620006ae565b5060018401620002018382620006ae565b5060028401805460ff191660ff83161790556200024c63a219a02560e01b600162000237620003d4602090811b620011d617901c565b6200040460201b62001204179092919060201c565b50505050565b600080620001dd60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd620005fd565b6001600160a01b03811615620002d95781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620002fc6307f5828d60e41b600162000237620003d460201b620011d61760201c565b5050565b620003236303c130d960e41b600162000237620003d460201b620011d61760201c565b565b6200032363144b1f0f60e11b600162000237620003d460201b620011d61760201c565b620003236320c07ed160e01b600162000237620003d460201b620011d61760201c565b620003236353f41a9760e01b600162000237620003d460201b620011d61760201c565b6200032363602993f360e11b600162000237620003d460201b620011d61760201c565b62000323634ec7fbed60e11b600162000237620003d460201b620011d61760201c565b600080620001dd60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e620005fd565b600160e01b6001600160e01b0319831601620004665760405162461bcd60e51b815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500604482015260640160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620004bc57600080fd5b81516001600160401b0380821115620004d957620004d962000494565b604051601f8301601f19908116603f0116810190828211818310171562000504576200050462000494565b816040528381526020925086838588010111156200052157600080fd5b600091505b8382101562000545578582018301518183018401529082019062000526565b600093810190920192909252949350505050565b600080600080608085870312156200057057600080fd5b84516001600160401b03808211156200058857600080fd5b6200059688838901620004aa565b95506020870151915080821115620005ad57600080fd5b50620005bc87828801620004aa565b935050604085015160ff81168114620005d457600080fd5b60608601519092506001600160a01b0381168114620005f257600080fd5b939692955090935050565b81810381811115620001dd57634e487b7160e01b600052601160045260246000fd5b600181811c908216806200063457607f821691505b6020821081036200065557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006a957600081815260208120601f850160051c81016020861015620006845750805b601f850160051c820191505b81811015620006a55782815560010162000690565b5050505b505050565b81516001600160401b03811115620006ca57620006ca62000494565b620006e281620006db84546200061f565b846200065b565b602080601f8311600181146200071a5760008415620007015750858301515b600019600386901b1c1916600185901b178555620006a5565b600085815260208120601f198616915b828110156200074b578886015182559484019460019091019084016200072a565b50858210156200076a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051614747620007ab6000396000818161032501528181610405015281816136f2015261377a01526147476000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c806379cc679011610160578063b88d4fde116100d8578063dd62ed3e1161008c578063eb79554911610071578063eb795549146105a9578063f2fde38b146105bc578063f7ba94bd146105cf57600080fd5b8063dd62ed3e14610583578063e0df5b6f1461059657600080fd5b8063d505accf116100bd578063d505accf14610536578063d539139314610549578063d547741f1461057057600080fd5b8063b88d4fde14610510578063c3666c361461052357600080fd5b80638da5cb5b1161012f57806395d89b411161011457806395d89b41146104e2578063a457c2d7146104ea578063a9059cbb146104fd57600080fd5b80638da5cb5b146104c757806391d14854146104cf57600080fd5b806379cc67901461047b5780637ecebe001461048e57806388d695b2146104a15780638bb9c5bf146104b457600080fd5b80633644e5151161020e5780634885b254116101c257806368573107116101a7578063685731071461044257806370a082311461045557806373c8a9581461046857600080fd5b80634885b254146103e2578063572b6c05146103f557600080fd5b80633c130d90116101f35780633c130d90146103b457806340c10f19146103bc57806342966c68146103cf57600080fd5b80633644e5151461039957806339509351146103a157600080fd5b80631b9a7529116102655780632b4c9f161161024a5780632b4c9f16146103235780632f2ff15d1461036a578063313ce5671461037f57600080fd5b80631b9a7529146102fd57806323b872dd1461031057600080fd5b806301ffc9a71461029757806306fdde03146102bf578063095ea7b3146102d457806318160ddd146102e7575b600080fd5b6102aa6102a5366004613d59565b6105e2565b60405190151581526020015b60405180910390f35b6102c76105fc565b6040516102b69190613de4565b6102aa6102e2366004613e19565b610613565b6102ef61063b565b6040519081526020016102b6565b6102aa61030b366004613e91565b61064f565b6102aa61031e366004613efd565b61067e565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102b6565b61037d610378366004613f3e565b6106a9565b005b6103876106e2565b60405160ff90911681526020016102b6565b6102ef6106f9565b6102aa6103af366004613e19565b610703565b6102c7610722565b61037d6103ca366004613e19565b61072f565b6102aa6103dd366004613f6e565b610782565b6102aa6103f0366004613f87565b6107a7565b6102aa61040336600461400a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61037d610450366004613e91565b6107d8565b6102ef61046336600461400a565b610882565b61037d610476366004614027565b6108ba565b6102aa610489366004613e19565b6109ea565b6102ef61049c36600461400a565b610a09565b6102aa6104af366004613e91565b610a17565b61037d6104c2366004613f6e565b610a3a565b610345610a58565b6102aa6104dd366004613f3e565b610a7f565b6102c7610aca565b6102aa6104f8366004613e19565b610adc565b6102aa61050b366004613e19565b610afb565b6102aa61051e366004614103565b610b1a565b61037d610531366004614027565b610b3f565b61037d610544366004614165565b610ce4565b6102ef7f6d696e746572000000000000000000000000000000000000000000000000000081565b61037d61057e366004613f3e565b610d0b565b6102ef6105913660046141dc565b610d39565b61037d6105a436600461420a565b610d84565b6102aa6105b736600461424c565b610da3565b61037d6105ca36600461400a565b610dc6565b61037d6105dd366004613e91565b610de1565b60006105f6826105f06111d6565b90611310565b92915050565b606061060e610609610f33565b6113ea565b905090565b6000610632610620611480565b848461062a61148a565b9291906114b8565b50600192915050565b600061060e61064861148a565b6002015490565b600061067261065c611480565b8686868661066861148a565b94939291906115a7565b5060015b949350505050565b600061069f61068b611480565b85858561069661148a565b939291906117e9565b5060019392505050565b60006106b3611480565b90506106c7816106c1610fe0565b9061183b565b6106dd8383836106d56118be565b9291906118ec565b505050565b600061060e6106ef610f33565b6002015460ff1690565b600061060e6119c2565b6000610632610710611480565b848461071a61148a565b929190611a5d565b606061060e610609611c29565b61076a7f6d696e746572000000000000000000000000000000000000000000000000000061075b611480565b6107636118be565b9190611c57565b61077e828261077761148a565b9190611d03565b5050565b600061079f61078f611480565b8361079861148a565b9190611e7d565b506001919050565b60006107cc6107b4611480565b87878787876107c161148a565b959493929190611f93565b50600195945050505050565b6108047f6d696e746572000000000000000000000000000000000000000000000000000061075b611480565b61087c84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808802828101820190935287825290935087925086918291850190849080828437600092019190915250610875925061148a915050565b91906123d9565b50505050565b60006105f68261089061148a565b9073ffffffffffffffffffffffffffffffffffffffff166000908152602091909152604090205490565b6108cd6108c5611480565b6106c1610fe0565b8483811480156108dc57508082145b610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064015b60405180910390fd5b60005b8181146109e0576109d88888838181106109665761096661429c565b905060200201602081019061097b919061400a565b85858481811061098d5761098d61429c565b905060200201358888858181106109a6576109a661429c565b90506020020160208101906109bb919061400a565b73ffffffffffffffffffffffffffffffffffffffff1691906126af565b60010161094a565b5050505050505050565b60006106326109f7611480565b8484610a0161148a565b92919061273c565b60006105f682610890612786565b6000610672610a24611480565b86868686610a3061148a565b94939291906127b4565b610a55610a45611480565b82610a4e6118be565b9190612b96565b50565b600061060e610a65610fe0565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6000610ac38383610a8e6118be565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b606061060e610ad7610f33565b612c3a565b6000610632610ae9611480565b8484610af361148a565b929190612c4b565b6000610632610b08611480565b8484610b1261148a565b929190612d9d565b60006107cc610b27611480565b8787878787610b3461148a565b959493929190612f7e565b610b4a6108c5611480565b848381148015610b5957508082145b610bbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161093e565b60005b8181146109e057858582818110610bdb57610bdb61429c565b9050602002016020810190610bf0919061400a565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a85818110610c1e57610c1e61429c565b9050602002016020810190610c33919061400a565b878786818110610c4557610c4561429c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b50505050806001019050610bc2565b610d0287878787878787610cf6612786565b96959493929190612feb565b50505050505050565b6000610d15611480565b9050610d23816106c1610fe0565b6106dd838383610d316118be565b9291906132e7565b6000610ac38383610d4861148a565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600193909301602090815260408085209290931684525290205490565b610d8f6108c5611480565b61077e8282610d9c611c29565b91906133b1565b6000610672610db0611480565b86868686610dbc61148a565b94939291906133bd565b610a55610dd1611480565b82610dda610fe0565b9190613429565b610dec6108c5611480565b82818114610e56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161093e565b60005b818114610ec757610ebf848483818110610e7557610e7561429c565b90506020020135878784818110610e8e57610e8e61429c565b9050602002016020810190610ea3919061400a565b73ffffffffffffffffffffffffffffffffffffffff1690613555565b600101610e59565b505050505050565b6000610ed96111d6565b9050610f07817f36372b07000000000000000000000000000000000000000000000000000000006001611204565b610a55817f9d075186000000000000000000000000000000000000000000000000000000006001611204565b6000806105f660017f335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a826142cb565b83610f6c84826143cd565b5060018401610f7b83826143cd565b506002840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff831617905561087c7fa219a025000000000000000000000000000000000000000000000000000000006001610fd96111d6565b9190611204565b6000806105f660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6142cb565b73ffffffffffffffffffffffffffffffffffffffff8116156110965781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b61077e7f7f5828d0000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f3c130d90000000000000000000000000000000000000000000000000000000006001610fd96111d6565b565b6110f27f28963e1e000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f20c07ed1000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f53f41a97000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27fc05327e6000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f9d8ff7da000000000000000000000000000000000000000000000000000000006001610fd95b6000806105f660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6142cb565b7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016112ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500604482015260640161093e565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611360575060006105f6565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016113b1575060016105f6565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60608160000180546113fb90614334565b80601f016020809104026020016040519081016040528092919081815260200182805461142790614334565b80156114745780601f1061144957610100808354040283529160200191611474565b820191906000526020600020905b81548152906001019060200180831161145757829003601f168201915b50505050509050919050565b600061060e6136af565b6000806105f660017f1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef6142cb565b73ffffffffffffffffffffffffffffffffffffffff8216611535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20617070726f76616c20746f2061646472657373283029000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260018701602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350505050565b82818114611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b8060000361161f5750610ec7565b6000805b8281146117cd57600087878381811061163e5761163e61429c565b9050602002016020810190611653919061400a565b905060008686848181106116695761166961429c565b9050602002013590508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146116b1576116b18b838c84612c4b565b80156117755773ffffffffffffffffffffffffffffffffffffffff8216600090815260208c90526040902054818103818110611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208e9052604090205550928301925b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050600101611623565b5080156109e05760028801805482900390555050505050505050565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146118285761182885848684612c4b565b61183485848484612d9d565b5050505050565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161093e565b6000806105f660017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236142cb565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661087c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b6000467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6119f1610609610f33565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c0016040516020818303038152906040528051906020012091505090565b73ffffffffffffffffffffffffffffffffffffffff8216611ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20617070726f76616c20746f2061646472657373283029000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220548115611bbb57808201818111611b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a20616c6c6f77616e6365206f766572666c6f7700000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600188016020908152604080832093881683529290522081905590505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611c1a91815260200190565b60405180910390a35050505050565b6000806105f660017ff41bf6a5db26bffdfab174dcf66b31fbba8fdb7e3db040721ce1e62d61839ceb6142cb565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106dd57611c95826137f6565b604051602001611ca591906144e7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261093e91600401613de4565b73ffffffffffffffffffffffffffffffffffffffff8216611d80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a206d696e7420746f206164647265737328302900000000000000604482015260640161093e565b8015611e29576002830154818101818111611df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a20737570706c79206f766572666c6f7700000000000000000000604482015260640161093e565b60028501555073ffffffffffffffffffffffffffffffffffffffff821660009081526020849052604090208054820190555b60405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050565b8015611f485773ffffffffffffffffffffffffffffffffffffffff8216600090815260208490526040902054818103818110611f15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602086905260409020555060028301805482900390555b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611e70565b82818114611ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b8060000361200b5750610d02565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602089905260408120549080805b8481146122e15760008989838181106120505761205061429c565b9050602002016020810190612065919061400a565b905073ffffffffffffffffffffffffffffffffffffffff81166120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161093e565b60008888848181106120f8576120f861429c565b9050602002013590508060001461227057848101858111612175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2076616c756573206f766572666c6f7700000000000000000000604482015260640161093e565b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146121ff57818f60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061226e565b86821115612269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516122cf91815260200190565b60405180910390a35050600101612035565b5081158015906122f15750808214155b1561238d57818303838110612362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260208d90526040902090820190555b8973ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146123cc576123cc8b8a8c85612c4b565b5050505050505050505050565b815181518114612445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b806000036124535750505050565b6000805b82811461262a5760008582815181106124725761247261429c565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a206d696e7420746f206164647265737328302900000000000000604482015260640161093e565b60008583815181106125265761252661429c565b60200260200101519050806000146125d2578381018481116125a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2076616c756573206f766572666c6f7700000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208a90526040902080548301905593505b60405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050600101612457565b5080156118345760028501548181018181116126a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a20737570706c79206f766572666c6f7700000000000000000000604482015260640161093e565b6002870155505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526106dd908490613988565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461277b5761277b84838584612c4b565b61087c848383611e7d565b6000806105f660017f93fe0ff7226b064a4a8f0b09910762afb4bc2441835792c021ffd78cd513011e6142cb565b8281811461281e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b8060000361282c5750610ec7565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602088905260408120549080805b848114612ade5760008989838181106128715761287161429c565b9050602002016020810190612886919061400a565b905073ffffffffffffffffffffffffffffffffffffffff8116612905576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161093e565b60008888848181106129195761291961429c565b90506020020135905080600014612a6d57848101858111612996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2076616c756573206f766572666c6f7700000000000000000000604482015260640161093e565b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146129fc5773ffffffffffffffffffffffffffffffffffffffff8316600090815260208f905260409020805483019055612a6b565b86821115612a66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612acc91815260200190565b60405180910390a35050600101612856565b508115801590612aee5750808214155b15612b8a57818303838110612b5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260208c90526040902090820190555b50505050505050505050565b612ba1838284611c57565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60608160010180546113fb90614334565b73ffffffffffffffffffffffffffffffffffffffff8216612cc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20617070726f76616c20746f2061646472657373283029000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114801590612d2c57508115155b15611bbb57818103818110611b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8216612e1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161093e565b8015612f1f5773ffffffffffffffffffffffffffffffffffffffff8316600090815260208590526040902054818103818110612eb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612f1c5773ffffffffffffffffffffffffffffffffffffffff8086166000908152602088905260408082208490559186168152208054840190555b50505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161159991815260200190565b612f8b87878787876117e9565b73ffffffffffffffffffffffffffffffffffffffff84163b15610d0257610d028686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a9492505050565b73ffffffffffffffffffffffffffffffffffffffff8716613068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207065726d69742066726f6d2061646472657373283029000000604482015260640161093e565b834211156130d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45524332303a2065787069726564207065726d69740000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260208b8152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e090930190935281519190920120906131716119c2565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa158015613235573d6000803e3d6000fd5b5050506020604051035190508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146132d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45524332303a20696e76616c6964207065726d69740000000000000000000000604482015260640161093e565b5050506109e087878761062a61148a565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561087c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016119b4565b8261087c828483614553565b6133c986868686612d9d565b73ffffffffffffffffffffffffffffffffffffffff84163b15610ec757610ec78586868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a9492505050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146134ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161093e565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461087c5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b804710156135bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161093e565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114613619576040519150601f19603f3d011682016040523d82523d6000602084013e61361e565b606091505b50509050806106dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161093e565b6000333214806136bf5750601836105b156136c957503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806137e557506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156137c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e5919061466d565b156137ef57919050565b3391505090565b6060600082900361381557505060408051602081019091526000815290565b60008260405160200161382a91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050601f5b81818151811061386f5761386f61429c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000166000036138c4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161385d565b60008160010167ffffffffffffffff8111156138e2576138e2614305565b6040519080825280601f01601f19166020018201604052801561390c576020820181803683370190505b50905060005b82811161397f5783818151811061392b5761392b61429c565b602001015160f81c60f81b8282815181106139485761394861429c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101613912565b50949350505050565b60006139ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613bba9092919063ffffffff16565b8051909150156106dd5780806020019051810190613a08919061466d565b6106dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161093e565b6040517f4fc35859000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff851690634fc3585990613aee90899089908890889060040161468f565b6020604051808303816000875af1158015613b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3191906146d8565b7fffffffff000000000000000000000000000000000000000000000000000000001614611834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a2073616665207472616e736665722072656a6563746564000000604482015260640161093e565b60606106768484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051613bee91906146f5565b60006040518083038185875af1925050503d8060008114613c2b576040519150601f19603f3d011682016040523d82523d6000602084013e613c30565b606091505b5091509150613c4187838387613c4c565b979650505050505050565b60608315613ce2578251600003613cdb5773ffffffffffffffffffffffffffffffffffffffff85163b613cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161093e565b5081610676565b6106768383815115613cf75781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e9190613de4565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610a5557600080fd5b600060208284031215613d6b57600080fd5b8135610ac381613d2b565b60005b83811015613d91578181015183820152602001613d79565b50506000910152565b60008151808452613db2816020860160208601613d76565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610ac36020830184613d9a565b73ffffffffffffffffffffffffffffffffffffffff81168114610a5557600080fd5b60008060408385031215613e2c57600080fd5b8235613e3781613df7565b946020939093013593505050565b60008083601f840112613e5757600080fd5b50813567ffffffffffffffff811115613e6f57600080fd5b6020830191508360208260051b8501011115613e8a57600080fd5b9250929050565b60008060008060408587031215613ea757600080fd5b843567ffffffffffffffff80821115613ebf57600080fd5b613ecb88838901613e45565b90965094506020870135915080821115613ee457600080fd5b50613ef187828801613e45565b95989497509550505050565b600080600060608486031215613f1257600080fd5b8335613f1d81613df7565b92506020840135613f2d81613df7565b929592945050506040919091013590565b60008060408385031215613f5157600080fd5b823591506020830135613f6381613df7565b809150509250929050565b600060208284031215613f8057600080fd5b5035919050565b600080600080600060608688031215613f9f57600080fd5b8535613faa81613df7565b9450602086013567ffffffffffffffff80821115613fc757600080fd5b613fd389838a01613e45565b90965094506040880135915080821115613fec57600080fd5b50613ff988828901613e45565b969995985093965092949392505050565b60006020828403121561401c57600080fd5b8135610ac381613df7565b6000806000806000806060878903121561404057600080fd5b863567ffffffffffffffff8082111561405857600080fd5b6140648a838b01613e45565b9098509650602089013591508082111561407d57600080fd5b6140898a838b01613e45565b909650945060408901359150808211156140a257600080fd5b506140af89828a01613e45565b979a9699509497509295939492505050565b60008083601f8401126140d357600080fd5b50813567ffffffffffffffff8111156140eb57600080fd5b602083019150836020828501011115613e8a57600080fd5b60008060008060006080868803121561411b57600080fd5b853561412681613df7565b9450602086013561413681613df7565b935060408601359250606086013567ffffffffffffffff81111561415957600080fd5b613ff9888289016140c1565b600080600080600080600060e0888a03121561418057600080fd5b873561418b81613df7565b9650602088013561419b81613df7565b95506040880135945060608801359350608088013560ff811681146141bf57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156141ef57600080fd5b82356141fa81613df7565b91506020830135613f6381613df7565b6000806020838503121561421d57600080fd5b823567ffffffffffffffff81111561423457600080fd5b614240858286016140c1565b90969095509350505050565b6000806000806060858703121561426257600080fd5b843561426d81613df7565b935060208501359250604085013567ffffffffffffffff81111561429057600080fd5b613ef1878288016140c1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818103818111156105f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061434857607f821691505b602082108103614381577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156106dd57600081815260208120601f850160051c810160208610156143ae5750805b601f850160051c820191505b81811015610ec7578281556001016143ba565b815167ffffffffffffffff8111156143e7576143e7614305565b6143fb816143f58454614334565b84614387565b602080601f83116001811461444e57600084156144185750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610ec7565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561449b5788860151825594840194600190910190840161447c565b50858210156144d757878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f416363657373436f6e74726f6c3a206d697373696e672027000000000000000081526000825161451f816018850160208701613d76565b7f2720726f6c6500000000000000000000000000000000000000000000000000006018939091019283015250601e01919050565b67ffffffffffffffff83111561456b5761456b614305565b61457f836145798354614334565b83614387565b6000601f8411600181146145d1576000851561459b5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611834565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156146205786850135825560209485019460019092019101614600565b508682101561465b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561467f57600080fd5b81518015158114610ac357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526146ce6080830184613d9a565b9695505050505050565b6000602082840312156146ea57600080fd5b8151610ac381613d2b565b60008251614707818460208701613d76565b919091019291505056fea2646970667358221220b19159545f5c30e0bd31d66004481365e80a01246ff28ade3e273e10e353dc4564736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4EF2 CODESIZE SUB DUP1 PUSH3 0x4EF2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x559 JUMP JUMPDEST DUP1 DUP1 CALLER DUP7 DUP7 DUP7 PUSH3 0x4F PUSH3 0x149 PUSH1 0x20 SHL PUSH3 0xECF OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x81 DUP4 DUP4 DUP4 PUSH3 0x6B PUSH3 0x1AD PUSH1 0x20 SHL PUSH3 0xF33 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1E3 PUSH1 0x20 SHL PUSH3 0xF61 OR SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP PUSH3 0xB2 DUP2 PUSH3 0x9E PUSH3 0x252 PUSH1 0x20 SHL PUSH3 0xFE0 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x282 PUSH1 0x20 SHL PUSH3 0x100E OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0xC8 PUSH3 0x300 PUSH1 0x20 SHL PUSH3 0x10C4 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xDD PUSH3 0x325 PUSH1 0x20 SHL PUSH3 0x10F4 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xF2 PUSH3 0x348 PUSH1 0x20 SHL PUSH3 0x1122 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x107 PUSH3 0x36B PUSH1 0x20 SHL PUSH3 0x1150 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x11C PUSH3 0x38E PUSH1 0x20 SHL PUSH3 0x117E OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x131 PUSH3 0x3B1 PUSH1 0x20 SHL PUSH3 0x11AC OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE POP PUSH3 0x77A SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x160 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH3 0x186 PUSH4 0x36372B07 PUSH1 0xE0 SHL PUSH1 0x1 DUP4 PUSH3 0x404 PUSH1 0x20 SHL PUSH3 0x1204 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1AA PUSH4 0x4E83A8C3 PUSH1 0xE1 SHL PUSH1 0x1 DUP4 PUSH3 0x404 PUSH1 0x20 SHL PUSH3 0x1204 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x1DD PUSH1 0x1 PUSH32 0x335DF4119BBB04F056B33EBA33B826D3529129E458FAF6DAA9924B5A8F3B6A82 PUSH3 0x5FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 PUSH3 0x1F0 DUP5 DUP3 PUSH3 0x6AE JUMP JUMPDEST POP PUSH1 0x1 DUP5 ADD PUSH3 0x201 DUP4 DUP3 PUSH3 0x6AE JUMP JUMPDEST POP PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF DUP4 AND OR SWAP1 SSTORE PUSH3 0x24C PUSH4 0xA219A025 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x11D6 OR SWAP1 SHR JUMP JUMPDEST PUSH3 0x404 PUSH1 0x20 SHL PUSH3 0x1204 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x1DD PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x2D9 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x2FC PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x323 PUSH4 0x3C130D9 PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST JUMP JUMPDEST PUSH3 0x323 PUSH4 0x144B1F0F PUSH1 0xE1 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x323 PUSH4 0x20C07ED1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x323 PUSH4 0x53F41A97 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x323 PUSH4 0x602993F3 PUSH1 0xE1 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x323 PUSH4 0x4EC7FBED PUSH1 0xE1 SHL PUSH1 0x1 PUSH3 0x237 PUSH3 0x3D4 PUSH1 0x20 SHL PUSH3 0x11D6 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x1DD PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x5FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x4D9 JUMPI PUSH3 0x4D9 PUSH3 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x504 JUMPI PUSH3 0x504 PUSH3 0x494 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x545 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x526 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x570 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x588 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x596 DUP9 DUP4 DUP10 ADD PUSH3 0x4AA JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x5BC DUP8 DUP3 DUP9 ADD PUSH3 0x4AA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x5F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x1DD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x634 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x655 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x6A9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x684 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x6A5 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x690 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x6CA JUMPI PUSH3 0x6CA PUSH3 0x494 JUMP JUMPDEST PUSH3 0x6E2 DUP2 PUSH3 0x6DB DUP5 SLOAD PUSH3 0x61F JUMP JUMPDEST DUP5 PUSH3 0x65B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x71A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x701 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x6A5 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x74B JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x72A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x76A JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x4747 PUSH3 0x7AB PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x325 ADD MSTORE DUP2 DUP2 PUSH2 0x405 ADD MSTORE DUP2 DUP2 PUSH2 0x36F2 ADD MSTORE PUSH2 0x377A ADD MSTORE PUSH2 0x4747 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x292 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x160 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEB795549 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEB795549 EQ PUSH2 0x5A9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5BC JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x5CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD505ACCF GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x549 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x570 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x12F JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x4EA JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0x88D695B2 EQ PUSH2 0x4A1 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x20E JUMPI DUP1 PUSH4 0x4885B254 GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x68573107 GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x68573107 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4885B254 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3C130D90 GT PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x3C130D90 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3644E515 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B9A7529 GT PUSH2 0x265 JUMPI DUP1 PUSH4 0x2B4C9F16 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B9A7529 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2E7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AA PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D59 JUMP JUMPDEST PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C7 PUSH2 0x5FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x3DE4 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x613 JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x64F JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x3EFD JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3E JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x387 PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2C7 PUSH2 0x722 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x72F JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x3DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3F6E JUMP JUMPDEST PUSH2 0x782 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x3F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F87 JUMP JUMPDEST PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x403 CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x7D8 JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x476 CALLDATASIZE PUSH1 0x4 PUSH2 0x4027 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x9EA JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x49C CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH2 0xA09 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F6E JUMP JUMPDEST PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x345 PUSH2 0xA58 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3E JUMP JUMPDEST PUSH2 0xA7F JUMP JUMPDEST PUSH2 0x2C7 PUSH2 0xACA JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x50B CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0xAFB JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x51E CALLDATASIZE PUSH1 0x4 PUSH2 0x4103 JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x37D PUSH2 0x531 CALLDATASIZE PUSH1 0x4 PUSH2 0x4027 JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH2 0x37D PUSH2 0x544 CALLDATASIZE PUSH1 0x4 PUSH2 0x4165 JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST PUSH2 0x2EF PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x57E CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3E JUMP JUMPDEST PUSH2 0xD0B JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x591 CALLDATASIZE PUSH1 0x4 PUSH2 0x41DC JUMP JUMPDEST PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x420A JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x5B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x424C JUMP JUMPDEST PUSH2 0xDA3 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5CA CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH2 0xDC6 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x5F0 PUSH2 0x11D6 JUMP JUMPDEST SWAP1 PUSH2 0x1310 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60E PUSH2 0x609 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0x13EA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0x620 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x62A PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x14B8 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x648 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x672 PUSH2 0x65C PUSH2 0x1480 JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH2 0x668 PUSH2 0x148A JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15A7 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69F PUSH2 0x68B PUSH2 0x1480 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x696 PUSH2 0x148A JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17E9 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B3 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH2 0x6C7 DUP2 PUSH2 0x6C1 PUSH2 0xFE0 JUMP JUMPDEST SWAP1 PUSH2 0x183B JUMP JUMPDEST PUSH2 0x6DD DUP4 DUP4 DUP4 PUSH2 0x6D5 PUSH2 0x18BE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x18EC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x6EF PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x19C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0x710 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x71A PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1A5D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60E PUSH2 0x609 PUSH2 0x1C29 JUMP JUMPDEST PUSH2 0x76A PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 PUSH2 0x75B PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x763 PUSH2 0x18BE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH2 0x77E DUP3 DUP3 PUSH2 0x777 PUSH2 0x148A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79F PUSH2 0x78F PUSH2 0x1480 JUMP JUMPDEST DUP4 PUSH2 0x798 PUSH2 0x148A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1E7D JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CC PUSH2 0x7B4 PUSH2 0x1480 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x7C1 PUSH2 0x148A JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F93 JUMP JUMPDEST POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x804 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 PUSH2 0x75B PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x87C DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP9 MUL DUP3 DUP2 ADD DUP3 ADD SWAP1 SWAP4 MSTORE DUP8 DUP3 MSTORE SWAP1 SWAP4 POP DUP8 SWAP3 POP DUP7 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x875 SWAP3 POP PUSH2 0x148A SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x23D9 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x890 PUSH2 0x148A JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x8CD PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0xFE0 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x8DC JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9E0 JUMPI PUSH2 0x9D8 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x966 JUMPI PUSH2 0x966 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x97B SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x98D JUMPI PUSH2 0x98D PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x9A6 JUMPI PUSH2 0x9A6 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9BB SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x26AF JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x94A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0x9F7 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xA01 PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x273C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x890 PUSH2 0x2786 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x672 PUSH2 0xA24 PUSH2 0x1480 JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH2 0xA30 PUSH2 0x148A JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B4 JUMP JUMPDEST PUSH2 0xA55 PUSH2 0xA45 PUSH2 0x1480 JUMP JUMPDEST DUP3 PUSH2 0xA4E PUSH2 0x18BE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2B96 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0xA65 PUSH2 0xFE0 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC3 DUP4 DUP4 PUSH2 0xA8E PUSH2 0x18BE JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60E PUSH2 0xAD7 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0x2C3A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xAE9 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xAF3 PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2C4B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xB08 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB12 PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2D9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CC PUSH2 0xB27 PUSH2 0x1480 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xB34 PUSH2 0x148A JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F7E JUMP JUMPDEST PUSH2 0xB4A PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xB59 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0xBBF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9E0 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xBDB JUMPI PUSH2 0xBDB PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBF0 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xC1E JUMPI PUSH2 0xC1E PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC33 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xC45 JUMPI PUSH2 0xC45 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xBC2 JUMP JUMPDEST PUSH2 0xD02 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xCF6 PUSH2 0x2786 JUMP JUMPDEST SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2FEB JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD15 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH2 0xD23 DUP2 PUSH2 0x6C1 PUSH2 0xFE0 JUMP JUMPDEST PUSH2 0x6DD DUP4 DUP4 DUP4 PUSH2 0xD31 PUSH2 0x18BE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x32E7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC3 DUP4 DUP4 PUSH2 0xD48 PUSH2 0x148A JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD8F PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x77E DUP3 DUP3 PUSH2 0xD9C PUSH2 0x1C29 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x33B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x672 PUSH2 0xDB0 PUSH2 0x1480 JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH2 0xDBC PUSH2 0x148A JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33BD JUMP JUMPDEST PUSH2 0xA55 PUSH2 0xDD1 PUSH2 0x1480 JUMP JUMPDEST DUP3 PUSH2 0xDDA PUSH2 0xFE0 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3429 JUMP JUMPDEST PUSH2 0xDEC PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xE56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xEC7 JUMPI PUSH2 0xEBF DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xE75 JUMPI PUSH2 0xE75 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xE8E JUMPI PUSH2 0xE8E PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xEA3 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3555 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xE59 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED9 PUSH2 0x11D6 JUMP JUMPDEST SWAP1 POP PUSH2 0xF07 DUP2 PUSH32 0x36372B0700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x1204 JUMP JUMPDEST PUSH2 0xA55 DUP2 PUSH32 0x9D07518600000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0x335DF4119BBB04F056B33EBA33B826D3529129E458FAF6DAA9924B5A8F3B6A82 PUSH2 0x42CB JUMP JUMPDEST DUP4 PUSH2 0xF6C DUP5 DUP3 PUSH2 0x43CD JUMP JUMPDEST POP PUSH1 0x1 DUP5 ADD PUSH2 0xF7B DUP4 DUP3 PUSH2 0x43CD JUMP JUMPDEST POP PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0xFF DUP4 AND OR SWAP1 SSTORE PUSH2 0x87C PUSH32 0xA219A02500000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x42CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x1096 JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x77E PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x3C130D9000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x28963E1E00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x20C07ED100000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x53F41A9700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0xC05327E600000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x9D8FF7DA00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x42CB JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x12AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1360 JUMPI POP PUSH1 0x0 PUSH2 0x5F6 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x13B1 JUMPI POP PUSH1 0x1 PUSH2 0x5F6 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x13FB SWAP1 PUSH2 0x4334 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1427 SWAP1 PUSH2 0x4334 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x36AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0x1DA92899D3DA68BF9787824388A37EA2BFA79780BCEF91B9716C390EEC8ECBEF PUSH2 0x42CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1535 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76616C20746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1611 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x161F JUMPI POP PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 EQ PUSH2 0x17CD JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x163E JUMPI PUSH2 0x163E PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1653 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1669 JUMPI PUSH2 0x1669 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16B1 JUMPI PUSH2 0x16B1 DUP12 DUP4 DUP13 DUP5 PUSH2 0x2C4B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1775 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP13 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x1749 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP15 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP SWAP3 DUP4 ADD SWAP3 JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x1623 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x2 DUP9 ADD DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1828 JUMPI PUSH2 0x1828 DUP6 DUP5 DUP7 DUP5 PUSH2 0x2C4B JUMP JUMPDEST PUSH2 0x1834 DUP6 DUP5 DUP5 DUP5 PUSH2 0x2D9D JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x42CB JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x87C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x19F1 PUSH2 0x609 PUSH2 0xF33 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1ADA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76616C20746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 ISZERO PUSH2 0x1BBB JUMPI DUP1 DUP3 ADD DUP2 DUP2 GT PUSH2 0x1B81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20616C6C6F77616E6365206F766572666C6F7700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1C1A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xF41BF6A5DB26BFFDFAB174DCF66B31FBBA8FDB7E3DB040721CE1E62D61839CEB PUSH2 0x42CB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x6DD JUMPI PUSH2 0x1C95 DUP3 PUSH2 0x37F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CA5 SWAP2 SWAP1 PUSH2 0x44E7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH2 0x93E SWAP2 PUSH1 0x4 ADD PUSH2 0x3DE4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1D80 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F206164647265737328302900000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E29 JUMPI PUSH1 0x2 DUP4 ADD SLOAD DUP2 DUP2 ADD DUP2 DUP2 GT PUSH2 0x1DF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20737570706C79206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1F48 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x1F15 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH1 0x2 DUP4 ADD DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0x1E70 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1FFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x200B JUMPI POP PUSH2 0xD02 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP10 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP1 DUP1 JUMPDEST DUP5 DUP2 EQ PUSH2 0x22E1 JUMPI PUSH1 0x0 DUP10 DUP10 DUP4 DUP2 DUP2 LT PUSH2 0x2050 JUMPI PUSH2 0x2050 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2065 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x20E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x20F8 JUMPI PUSH2 0x20F8 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH1 0x0 EQ PUSH2 0x2270 JUMPI DUP5 DUP2 ADD DUP6 DUP2 GT PUSH2 0x2175 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2076616C756573206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 SWAP6 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21FF JUMPI DUP2 DUP16 PUSH1 0x0 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x226E JUMP JUMPDEST DUP7 DUP3 GT ISZERO PUSH2 0x2269 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST SWAP4 DUP2 ADD SWAP4 JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x22CF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x2035 JUMP JUMPDEST POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x22F1 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x238D JUMPI DUP2 DUP4 SUB DUP4 DUP2 LT PUSH2 0x2362 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP14 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 ADD SWAP1 SSTORE JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x23CC JUMPI PUSH2 0x23CC DUP12 DUP11 DUP13 DUP6 PUSH2 0x2C4B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD DUP2 EQ PUSH2 0x2445 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x2453 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 EQ PUSH2 0x262A JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2472 JUMPI PUSH2 0x2472 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F206164647265737328302900000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2526 JUMPI PUSH2 0x2526 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x0 EQ PUSH2 0x25D2 JUMPI DUP4 DUP2 ADD DUP5 DUP2 GT PUSH2 0x25A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2076616C756573206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE SWAP4 POP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x2457 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x1834 JUMPI PUSH1 0x2 DUP6 ADD SLOAD DUP2 DUP2 ADD DUP2 DUP2 GT PUSH2 0x26A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20737570706C79206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x2 DUP8 ADD SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x6DD SWAP1 DUP5 SWAP1 PUSH2 0x3988 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x277B JUMPI PUSH2 0x277B DUP5 DUP4 DUP6 DUP5 PUSH2 0x2C4B JUMP JUMPDEST PUSH2 0x87C DUP5 DUP4 DUP4 PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0x93FE0FF7226B064A4A8F0B09910762AFB4BC2441835792C021FFD78CD513011E PUSH2 0x42CB JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x281E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x282C JUMPI POP PUSH2 0xEC7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP1 DUP1 JUMPDEST DUP5 DUP2 EQ PUSH2 0x2ADE JUMPI PUSH1 0x0 DUP10 DUP10 DUP4 DUP2 DUP2 LT PUSH2 0x2871 JUMPI PUSH2 0x2871 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2886 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2905 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x2919 JUMPI PUSH2 0x2919 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH1 0x0 EQ PUSH2 0x2A6D JUMPI DUP5 DUP2 ADD DUP6 DUP2 GT PUSH2 0x2996 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2076616C756573206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 SWAP6 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x29FC JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP16 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE PUSH2 0x2A6B JUMP JUMPDEST DUP7 DUP3 GT ISZERO PUSH2 0x2A66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST SWAP4 DUP2 ADD SWAP4 JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x2ACC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x2856 JUMP JUMPDEST POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2AEE JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2B8A JUMPI DUP2 DUP4 SUB DUP4 DUP2 LT PUSH2 0x2B5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP13 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2BA1 DUP4 DUP3 DUP5 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x13FB SWAP1 PUSH2 0x4334 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2CC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76616C20746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0x2D2C JUMPI POP DUP2 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1BBB JUMPI DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x1B81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2E1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F1F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x2EB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F1C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE SWAP2 DUP7 AND DUP2 MSTORE KECCAK256 DUP1 SLOAD DUP5 ADD SWAP1 SSTORE JUMPDEST POP POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1599 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F8B DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x17E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xD02 JUMPI PUSH2 0xD02 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3A94 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x3068 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207065726D69742066726F6D2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x30D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2065787069726564207065726D69740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP12 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP2 MLOAD PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP2 DUP6 ADD MSTORE DUP1 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP5 DUP12 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xC0 DUP1 DUP5 ADD DUP10 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP4 ADD SWAP1 SWAP4 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 SWAP1 PUSH2 0x3171 PUSH2 0x19C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP1 DUP6 MSTORE SWAP2 DUP5 ADD DUP1 DUP5 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP3 POP SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3235 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E76616C6964207065726D69740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST POP POP POP PUSH2 0x9E0 DUP8 DUP8 DUP8 PUSH2 0x62A PUSH2 0x148A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x87C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x19B4 JUMP JUMPDEST DUP3 PUSH2 0x87C DUP3 DUP5 DUP4 PUSH2 0x4553 JUMP JUMPDEST PUSH2 0x33C9 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2D9D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xEC7 JUMPI PUSH2 0xEC7 DUP6 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3A94 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x34AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x87C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x35BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3619 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x361E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x36BF JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x36C9 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x37E5 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37E5 SWAP2 SWAP1 PUSH2 0x466D JUMP JUMPDEST ISZERO PUSH2 0x37EF JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SWAP1 SUB PUSH2 0x3815 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x382A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE SWAP1 POP PUSH1 0x1F JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x386F JUMPI PUSH2 0x386F PUSH2 0x429C JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SUB PUSH2 0x38C4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH2 0x385D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38E2 JUMPI PUSH2 0x38E2 PUSH2 0x4305 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x390C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 GT PUSH2 0x397F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x392B JUMPI PUSH2 0x392B PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3948 JUMPI PUSH2 0x3948 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x1 ADD PUSH2 0x3912 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39EA DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3BBA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x6DD JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3A08 SWAP2 SWAP1 PUSH2 0x466D JUMP JUMPDEST PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x4FC35859 SWAP1 PUSH2 0x3AEE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x468F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3B0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B31 SWAP2 SWAP1 PUSH2 0x46D8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x1834 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2073616665207472616E736665722072656A6563746564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x676 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3BEE SWAP2 SWAP1 PUSH2 0x46F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3C2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3C30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3C41 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3C4C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3CE2 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x3CDB JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x3CDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST POP DUP2 PUSH2 0x676 JUMP JUMPDEST PUSH2 0x676 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3CF7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x93E SWAP2 SWAP1 PUSH2 0x3DE4 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAC3 DUP2 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3D91 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3D79 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3DB2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3D76 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xAC3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D9A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3E37 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3E57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x3E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3EA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3EBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ECB DUP9 DUP4 DUP10 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3EE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EF1 DUP8 DUP3 DUP9 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3F1D DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3F2D DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3F63 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3F9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x3FAA DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FD3 DUP10 DUP4 DUP11 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3FEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FF9 DUP9 DUP3 DUP10 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x401C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAC3 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4040 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4064 DUP11 DUP4 DUP12 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x407D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4089 DUP11 DUP4 DUP12 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x40A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40AF DUP10 DUP3 DUP11 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x40D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x411B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4126 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4136 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FF9 DUP9 DUP3 DUP10 ADD PUSH2 0x40C1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x4180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x418B DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x419B DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x41BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x41EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x41FA DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3F63 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x421D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4240 DUP6 DUP3 DUP7 ADD PUSH2 0x40C1 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x426D DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EF1 DUP8 DUP3 DUP9 ADD PUSH2 0x40C1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5F6 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x4348 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x4381 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x43AE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEC7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x43BA JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x43E7 JUMPI PUSH2 0x43E7 PUSH2 0x4305 JUMP JUMPDEST PUSH2 0x43FB DUP2 PUSH2 0x43F5 DUP5 SLOAD PUSH2 0x4334 JUMP JUMPDEST DUP5 PUSH2 0x4387 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x444E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4418 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x449B JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x447C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x44D7 JUMPI DUP8 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206D697373696E6720270000000000000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x451F DUP2 PUSH1 0x18 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3D76 JUMP JUMPDEST PUSH32 0x2720726F6C650000000000000000000000000000000000000000000000000000 PUSH1 0x18 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x1E ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x456B JUMPI PUSH2 0x456B PUSH2 0x4305 JUMP JUMPDEST PUSH2 0x457F DUP4 PUSH2 0x4579 DUP4 SLOAD PUSH2 0x4334 JUMP JUMPDEST DUP4 PUSH2 0x4387 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x45D1 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x459B JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4620 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x4600 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x465B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x467F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x46CE PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3D9A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x46EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xAC3 DUP2 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4707 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3D76 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 SWAP2 MSIZE SLOAD 0x5F 0x5C ADDRESS 0xE0 0xBD BALANCE 0xD6 PUSH1 0x4 BASEFEE SGT PUSH6 0xE80A01246FF2 DUP11 0xDE RETURNDATACOPY 0x27 RETURNDATACOPY LT 0xE3 MSTORE8 0xDC GASLIMIT PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1477:954:57:-:0;;;1706:358;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2001:17;699:18:10;2046:10:57;1905:9;1916:11;1929:13;587:19:18;:17;;;;;:19;;:::i;:::-;921:84:21;967:9;978:11;991:13;921:29;:27;;;;;:29;;:::i;:::-;:45;;;;;;:84;;;;;;:::i;:::-;796:216;;;1007:63:1;1057:12;1007:33;:31;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;963:114;712:27:22;:25;;;;;:27;;:::i;:::-;619:32:23;:30;;;;;:32;;:::i;:::-;540::20;:30;;;;;:32;;:::i;:::-;571:37:25;:35;;;;;:37;;:::i;:::-;577:38:19;:36;;;;;:38;;:::i;:::-;714:25:24;:23;;;;;:25;;:::i;:::-;-1:-1:-1;;;;;620:38:11;;;-1:-1:-1;1477:954:57;;-1:-1:-1;;;;1477:954:57;1614:293:47;1649:53;1705:34;:32;;;;;:34;;:::i;:::-;1649:90;;1749:66;-1:-1:-1;;;1810:4:47;1749:12;:34;;;;;;:66;;;;;:::i;:::-;1825:75;-1:-1:-1;;;1895:4:47;1825:12;:34;;;;;;:75;;;;;:::i;:::-;1639:268;1614:293::o;3794:174:44:-;3835:16;;661:72;732:1;669:59;661:72;:::i;:::-;653:81;3794:174;-1:-1:-1;;3794:174:44:o;1294:387::-;1467:1;:23;1481:9;1467:1;:23;:::i;:::-;-1:-1:-1;1500:13:44;;;:27;1516:11;1500:13;:27;:::i;:::-;-1:-1:-1;1537:15:44;;;:31;;-1:-1:-1;;1537:31:44;;;;;;;1578:96;-1:-1:-1;;;;1578:34:44;:32;;;;;;;:34;;:::i;:::-;:56;;;;;;:96;;;;;:::i;:::-;1294:387;;;;:::o;3737:174:6:-;3778:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;-1:-1:-1;;;;;1420:26:6;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:6;-1:-1:-1;;;;;1462:30:6;;;;;;;1511:46;;-1:-1:-1;;1511:46:6;;-1:-1:-1;;1511:46:6;1416:152;1577:89;-1:-1:-1;;;1661:4:6;1577:34;:32;;;;;:34;;:::i;:89::-;1332:341;;:::o;763:138:45:-;798:96;-1:-1:-1;;;889:4:45;798:34;:32;;;;;:34;;:::i;:96::-;763:138::o;2515:151:47:-;2563:96;-1:-1:-1;;;2654:4:47;2563:34;:32;;;;;:34;;:::i;2757:151::-;2805:96;-1:-1:-1;;;2896:4:47;2805:34;:32;;;;;:34;;:::i;2263:161::-;2316:101;-1:-1:-1;;;2412:4:47;2316:34;:32;;;;;:34;;:::i;2004:163::-;2058:102;-1:-1:-1;;;2155:4:47;2058:34;:32;;;;;:34;;:::i;1153:136:46:-;1188:94;-1:-1:-1;;;1277:4:46;1188:34;:32;;;;;:34;;:::i;1643:174:9:-;1684:16;;287:79;365:1;295:66;287:79;:::i;670:276::-;-1:-1:-1;;;;;;;;;812:35:9;;;804:79;;;;-1:-1:-1;;;804:79:9;;4932:2:58;804:79:9;;;4914:21:58;4971:2;4951:18;;;4944:30;5010:33;4990:18;;;4983:61;5061:18;;804:79:9;;;;;;;;-1:-1:-1;;;;;;893:34:9;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;893:46:9;;;;;;;;;;670:276::o;14:127:58:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:58;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:58;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:58:o;991:915::-;1133:6;1141;1149;1157;1210:3;1198:9;1189:7;1185:23;1181:33;1178:53;;;1227:1;1224;1217:12;1178:53;1254:16;;-1:-1:-1;;;;;1319:14:58;;;1316:34;;;1346:1;1343;1336:12;1316:34;1369:61;1422:7;1413:6;1402:9;1398:22;1369:61;:::i;:::-;1359:71;;1476:2;1465:9;1461:18;1455:25;1439:41;;1505:2;1495:8;1492:16;1489:36;;;1521:1;1518;1511:12;1489:36;;1544:63;1599:7;1588:8;1577:9;1573:24;1544:63;:::i;:::-;1534:73;;;1650:2;1639:9;1635:18;1629:25;1694:4;1687:5;1683:16;1676:5;1673:27;1663:55;;1714:1;1711;1704:12;1663:55;1787:2;1772:18;;1766:25;1737:5;;-1:-1:-1;;;;;;1822:33:58;;1810:46;;1800:74;;1870:1;1867;1860:12;1800:74;991:915;;;;-1:-1:-1;991:915:58;;-1:-1:-1;;991:915:58:o;1911:225::-;1978:9;;;1999:11;;;1996:134;;;2052:10;2047:3;2043:20;2040:1;2033:31;2087:4;2084:1;2077:15;2115:4;2112:1;2105:15;2141:380;2220:1;2216:12;;;;2263;;;2284:61;;2338:4;2330:6;2326:17;2316:27;;2284:61;2391:2;2383:6;2380:14;2360:18;2357:38;2354:161;;2437:10;2432:3;2428:20;2425:1;2418:31;2472:4;2469:1;2462:15;2500:4;2497:1;2490:15;2354:161;;2141:380;;;:::o;2652:545::-;2754:2;2749:3;2746:11;2743:448;;;2790:1;2815:5;2811:2;2804:17;2860:4;2856:2;2846:19;2930:2;2918:10;2914:19;2911:1;2907:27;2901:4;2897:38;2966:4;2954:10;2951:20;2948:47;;;-1:-1:-1;2989:4:58;2948:47;3044:2;3039:3;3035:12;3032:1;3028:20;3022:4;3018:31;3008:41;;3099:82;3117:2;3110:5;3107:13;3099:82;;;3162:17;;;3143:1;3132:13;3099:82;;;3103:3;;;2743:448;2652:545;;;:::o;3373:1352::-;3493:10;;-1:-1:-1;;;;;3515:30:58;;3512:56;;;3548:18;;:::i;:::-;3577:97;3667:6;3627:38;3659:4;3653:11;3627:38;:::i;:::-;3621:4;3577:97;:::i;:::-;3729:4;;3793:2;3782:14;;3810:1;3805:663;;;;4512:1;4529:6;4526:89;;;-1:-1:-1;4581:19:58;;;4575:26;4526:89;-1:-1:-1;;3330:1:58;3326:11;;;3322:24;3318:29;3308:40;3354:1;3350:11;;;3305:57;4628:81;;3775:944;;3805:663;2599:1;2592:14;;;2636:4;2623:18;;-1:-1:-1;;3841:20:58;;;3959:236;3973:7;3970:1;3967:14;3959:236;;;4062:19;;;4056:26;4041:42;;4154:27;;;;4122:1;4110:14;;;;3989:19;;3959:236;;;3963:3;4223:6;4214:7;4211:19;4208:201;;;4284:19;;;4278:26;-1:-1:-1;;4367:1:58;4363:14;;;4379:3;4359:24;4355:37;4351:42;4336:58;4321:74;;4208:201;-1:-1:-1;;;;;4455:1:58;4439:14;;;4435:22;4422:36;;-1:-1:-1;3373:1352:58:o;4730:355::-;1477:954:57;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DOMAIN_SEPARATOR_2169":{"entryPoint":1785,"id":2169,"parameterSlots":0,"returnSlots":1},"@DOMAIN_SEPARATOR_3054":{"entryPoint":6594,"id":3054,"parameterSlots":0,"returnSlots":1},"@MINTER_ROLE_2028":{"entryPoint":null,"id":2028,"parameterSlots":0,"returnSlots":0},"@_callOnERC20Received_4504":{"entryPoint":14996,"id":4504,"parameterSlots":5,"returnSlots":0},"@_callOptionalReturn_5145":{"entryPoint":14728,"id":5145,"parameterSlots":2,"returnSlots":0},"@_msgSender_5650":{"entryPoint":5248,"id":5650,"parameterSlots":0,"returnSlots":1},"@_msgSender_945":{"entryPoint":13999,"id":945,"parameterSlots":0,"returnSlots":1},"@_revert_5475":{"entryPoint":null,"id":5475,"parameterSlots":2,"returnSlots":0},"@allowance_1716":{"entryPoint":3385,"id":1716,"parameterSlots":2,"returnSlots":1},"@allowance_4462":{"entryPoint":null,"id":4462,"parameterSlots":3,"returnSlots":1},"@approve_1562":{"entryPoint":1555,"id":1562,"parameterSlots":2,"returnSlots":1},"@approve_3289":{"entryPoint":5304,"id":3289,"parameterSlots":4,"returnSlots":0},"@balanceOf_1696":{"entryPoint":2178,"id":1696,"parameterSlots":1,"returnSlots":1},"@balanceOf_4441":{"entryPoint":null,"id":4441,"parameterSlots":2,"returnSlots":1},"@batchBurnFrom_1883":{"entryPoint":1615,"id":1883,"parameterSlots":4,"returnSlots":1},"@batchBurnFrom_4411":{"entryPoint":5543,"id":4411,"parameterSlots":6,"returnSlots":0},"@batchMint_2088":{"entryPoint":2008,"id":2088,"parameterSlots":4,"returnSlots":0},"@batchMint_4185":{"entryPoint":9177,"id":4185,"parameterSlots":3,"returnSlots":0},"@batchTransferFrom_1791":{"entryPoint":1959,"id":1791,"parameterSlots":5,"returnSlots":1},"@batchTransferFrom_3902":{"entryPoint":8083,"id":3902,"parameterSlots":7,"returnSlots":0},"@batchTransfer_1761":{"entryPoint":2583,"id":1761,"parameterSlots":4,"returnSlots":1},"@batchTransfer_3721":{"entryPoint":10164,"id":3721,"parameterSlots":6,"returnSlots":0},"@burnFrom_1856":{"entryPoint":2538,"id":1856,"parameterSlots":2,"returnSlots":1},"@burnFrom_4280":{"entryPoint":10044,"id":4280,"parameterSlots":4,"returnSlots":0},"@burn_1831":{"entryPoint":1922,"id":1831,"parameterSlots":1,"returnSlots":1},"@burn_4246":{"entryPoint":7805,"id":4246,"parameterSlots":3,"returnSlots":0},"@constructorInit_2644":{"entryPoint":3937,"id":2644,"parameterSlots":4,"returnSlots":0},"@constructorInit_575":{"entryPoint":4110,"id":575,"parameterSlots":2,"returnSlots":0},"@decimals_1939":{"entryPoint":1762,"id":1939,"parameterSlots":0,"returnSlots":1},"@decimals_2734":{"entryPoint":null,"id":2734,"parameterSlots":1,"returnSlots":1},"@decreaseAllowance_1665":{"entryPoint":2780,"id":1665,"parameterSlots":2,"returnSlots":1},"@decreaseAllowance_3441":{"entryPoint":11339,"id":3441,"parameterSlots":4,"returnSlots":0},"@enforceHasRole_467":{"entryPoint":7255,"id":467,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_669":{"entryPoint":6203,"id":669,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_856":{"entryPoint":null,"id":856,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_5300":{"entryPoint":null,"id":5300,"parameterSlots":4,"returnSlots":1},"@functionCall_5236":{"entryPoint":15290,"id":5236,"parameterSlots":3,"returnSlots":1},"@grantRole_113":{"entryPoint":1705,"id":113,"parameterSlots":2,"returnSlots":0},"@grantRole_340":{"entryPoint":6380,"id":340,"parameterSlots":4,"returnSlots":0},"@hasRole_181":{"entryPoint":2687,"id":181,"parameterSlots":2,"returnSlots":1},"@hasRole_433":{"entryPoint":null,"id":433,"parameterSlots":3,"returnSlots":1},"@increaseAllowance_1640":{"entryPoint":1795,"id":1640,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_3361":{"entryPoint":6749,"id":3361,"parameterSlots":4,"returnSlots":0},"@initERC20BatchTransfers_3198":{"entryPoint":4478,"id":3198,"parameterSlots":0,"returnSlots":0},"@initERC20Burnable_3249":{"entryPoint":4386,"id":3249,"parameterSlots":0,"returnSlots":0},"@initERC20Mintable_3232":{"entryPoint":4340,"id":3232,"parameterSlots":0,"returnSlots":0},"@initERC20SafeTransfers_3215":{"entryPoint":4432,"id":3215,"parameterSlots":0,"returnSlots":0},"@init_2796":{"entryPoint":4292,"id":2796,"parameterSlots":0,"returnSlots":0},"@init_2902":{"entryPoint":4524,"id":2902,"parameterSlots":0,"returnSlots":0},"@init_3181":{"entryPoint":3791,"id":3181,"parameterSlots":0,"returnSlots":0},"@isContract_5164":{"entryPoint":null,"id":5164,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_873":{"entryPoint":null,"id":873,"parameterSlots":1,"returnSlots":1},"@layout_2746":{"entryPoint":3891,"id":2746,"parameterSlots":0,"returnSlots":1},"@layout_2837":{"entryPoint":7209,"id":2837,"parameterSlots":0,"returnSlots":1},"@layout_3066":{"entryPoint":10118,"id":3066,"parameterSlots":0,"returnSlots":1},"@layout_4474":{"entryPoint":5258,"id":4474,"parameterSlots":0,"returnSlots":1},"@layout_479":{"entryPoint":6334,"id":479,"parameterSlots":0,"returnSlots":1},"@layout_681":{"entryPoint":4064,"id":681,"parameterSlots":0,"returnSlots":1},"@layout_823":{"entryPoint":4566,"id":823,"parameterSlots":0,"returnSlots":1},"@mint_2057":{"entryPoint":1839,"id":2057,"parameterSlots":2,"returnSlots":0},"@mint_4048":{"entryPoint":7427,"id":4048,"parameterSlots":3,"returnSlots":0},"@msgSender_1031":{"entryPoint":null,"id":1031,"parameterSlots":0,"returnSlots":1},"@name_1911":{"entryPoint":1532,"id":1911,"parameterSlots":0,"returnSlots":1},"@name_2708":{"entryPoint":5098,"id":2708,"parameterSlots":1,"returnSlots":1},"@nonces_2157":{"entryPoint":2569,"id":2157,"parameterSlots":1,"returnSlots":1},"@nonces_3016":{"entryPoint":null,"id":3016,"parameterSlots":2,"returnSlots":1},"@owner_213":{"entryPoint":2648,"id":213,"parameterSlots":0,"returnSlots":1},"@owner_651":{"entryPoint":null,"id":651,"parameterSlots":1,"returnSlots":1},"@permit_2140":{"entryPoint":3300,"id":2140,"parameterSlots":7,"returnSlots":0},"@permit_2999":{"entryPoint":12267,"id":2999,"parameterSlots":8,"returnSlots":0},"@recoverERC20s_1248":{"entryPoint":2234,"id":1248,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1318":{"entryPoint":2879,"id":1318,"parameterSlots":6,"returnSlots":0},"@recoverETH_1182":{"entryPoint":3553,"id":1182,"parameterSlots":4,"returnSlots":0},"@renounceRole_162":{"entryPoint":2618,"id":162,"parameterSlots":1,"returnSlots":0},"@renounceRole_412":{"entryPoint":11158,"id":412,"parameterSlots":3,"returnSlots":0},"@revokeRole_145":{"entryPoint":3339,"id":145,"parameterSlots":2,"returnSlots":0},"@revokeRole_377":{"entryPoint":13031,"id":377,"parameterSlots":4,"returnSlots":0},"@safeTransferFrom_2246":{"entryPoint":2842,"id":2246,"parameterSlots":5,"returnSlots":1},"@safeTransferFrom_3979":{"entryPoint":12158,"id":3979,"parameterSlots":7,"returnSlots":0},"@safeTransfer_2215":{"entryPoint":3491,"id":2215,"parameterSlots":4,"returnSlots":1},"@safeTransfer_3939":{"entryPoint":13245,"id":3939,"parameterSlots":6,"returnSlots":0},"@safeTransfer_4897":{"entryPoint":9903,"id":4897,"parameterSlots":3,"returnSlots":0},"@sendValue_5198":{"entryPoint":13653,"id":5198,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_777":{"entryPoint":4612,"id":777,"parameterSlots":3,"returnSlots":0},"@setTokenURI_1987":{"entryPoint":3460,"id":1987,"parameterSlots":2,"returnSlots":0},"@setTokenURI_2812":{"entryPoint":13233,"id":2812,"parameterSlots":3,"returnSlots":0},"@supportsInterface_712":{"entryPoint":1506,"id":712,"parameterSlots":1,"returnSlots":1},"@supportsInterface_811":{"entryPoint":4880,"id":811,"parameterSlots":2,"returnSlots":1},"@symbol_1925":{"entryPoint":2762,"id":1925,"parameterSlots":0,"returnSlots":1},"@symbol_2721":{"entryPoint":11322,"id":2721,"parameterSlots":1,"returnSlots":1},"@toASCIIString_4747":{"entryPoint":14326,"id":4747,"parameterSlots":1,"returnSlots":1},"@tokenURI_2001":{"entryPoint":1826,"id":2001,"parameterSlots":0,"returnSlots":1},"@tokenURI_2825":{"entryPoint":null,"id":2825,"parameterSlots":1,"returnSlots":1},"@totalSupply_1679":{"entryPoint":1595,"id":1679,"parameterSlots":0,"returnSlots":1},"@totalSupply_4424":{"entryPoint":null,"id":4424,"parameterSlots":1,"returnSlots":1},"@transferFrom_1615":{"entryPoint":1662,"id":1615,"parameterSlots":3,"returnSlots":1},"@transferFrom_3555":{"entryPoint":6121,"id":3555,"parameterSlots":5,"returnSlots":0},"@transferOwnership_231":{"entryPoint":3526,"id":231,"parameterSlots":1,"returnSlots":0},"@transferOwnership_638":{"entryPoint":13353,"id":638,"parameterSlots":3,"returnSlots":0},"@transfer_1587":{"entryPoint":2811,"id":1587,"parameterSlots":2,"returnSlots":1},"@transfer_3518":{"entryPoint":11677,"id":3518,"parameterSlots":4,"returnSlots":0},"@verifyCallResultFromTarget_5431":{"entryPoint":15436,"id":5431,"parameterSlots":4,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":15941,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":16577,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":16394,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":16860,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":16125,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":16643,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":16741,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":16263,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":15897,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":16972,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":16423,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":16017,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":18029,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":16190,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":15705,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":18136,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$4829":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$4591":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptr":{"entryPoint":16906,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":16238,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":15770,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":18165,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_t_string_memory_ptr_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17639,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18063,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1020__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15844,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_06533093aac81b304d828c29fba4bcc9a9242c05998beeb0c6637f18930d9235__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ac59a98b6fe7e99399c85395b7df87e761b25e505bace1750860cfaa1803c24__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_32cace037c0659d6f07eeb77b1740914591f2b0927e7b227d741fbb03823b40d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_357f75c7f4cdbe2492cf8e424be0b1f3fbf884416a3c5ab251c16e149296f9be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3a6dd7da9592c148a3c1346620b226302bc667b6fd5e83c82aa507db666797af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_555ebf03264be25a26b5120044887f13a64477e19db4facbaaee717abfa82472__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7e7a3a2e3040cbfa3c00db0248b72c5f4c00492e57a5353baf25410416702f76__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":17099,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":17287,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage":{"entryPoint":17747,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":17357,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":15734,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":17204,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":17052,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":17157,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":15863,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":15659,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:31859:58","statements":[{"nodeType":"YulBlock","src":"6:3:58","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:133:58","statements":[{"body":{"nodeType":"YulBlock","src":"169:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:58"},"nodeType":"YulFunctionCall","src":"171:12:58"},"nodeType":"YulExpressionStatement","src":"171:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:58"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:58"},{"kind":"number","nodeType":"YulLiteral","src":"99:66:58","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:58"},"nodeType":"YulFunctionCall","src":"88:78:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:58"},"nodeType":"YulFunctionCall","src":"78:89:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:58"},"nodeType":"YulFunctionCall","src":"71:97:58"},"nodeType":"YulIf","src":"68:117:58"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:58","type":""}],"src":"14:177:58"},{"body":{"nodeType":"YulBlock","src":"265:176:58","statements":[{"body":{"nodeType":"YulBlock","src":"311:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"323:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"313:6:58"},"nodeType":"YulFunctionCall","src":"313:12:58"},"nodeType":"YulExpressionStatement","src":"313:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"286:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"295:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"282:3:58"},"nodeType":"YulFunctionCall","src":"282:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"307:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"278:3:58"},"nodeType":"YulFunctionCall","src":"278:32:58"},"nodeType":"YulIf","src":"275:52:58"},{"nodeType":"YulVariableDeclaration","src":"336:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"349:12:58"},"nodeType":"YulFunctionCall","src":"349:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"340:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"405:5:58"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"381:23:58"},"nodeType":"YulFunctionCall","src":"381:30:58"},"nodeType":"YulExpressionStatement","src":"381:30:58"},{"nodeType":"YulAssignment","src":"420:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"430:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"420:6:58"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"231:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"242:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"254:6:58","type":""}],"src":"196:245:58"},{"body":{"nodeType":"YulBlock","src":"541:92:58","statements":[{"nodeType":"YulAssignment","src":"551:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"563:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"574:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"559:3:58"},"nodeType":"YulFunctionCall","src":"559:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"551:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:58"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"618:6:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"611:6:58"},"nodeType":"YulFunctionCall","src":"611:14:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"604:6:58"},"nodeType":"YulFunctionCall","src":"604:22:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"586:6:58"},"nodeType":"YulFunctionCall","src":"586:41:58"},"nodeType":"YulExpressionStatement","src":"586:41:58"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"510:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"521:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"532:4:58","type":""}],"src":"446:187:58"},{"body":{"nodeType":"YulBlock","src":"704:184:58","statements":[{"nodeType":"YulVariableDeclaration","src":"714:10:58","value":{"kind":"number","nodeType":"YulLiteral","src":"723:1:58","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"718:1:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"783:63:58","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"808:3:58"},{"name":"i","nodeType":"YulIdentifier","src":"813:1:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:58"},"nodeType":"YulFunctionCall","src":"804:11:58"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"827:3:58"},{"name":"i","nodeType":"YulIdentifier","src":"832:1:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"823:3:58"},"nodeType":"YulFunctionCall","src":"823:11:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"817:5:58"},"nodeType":"YulFunctionCall","src":"817:18:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"797:6:58"},"nodeType":"YulFunctionCall","src":"797:39:58"},"nodeType":"YulExpressionStatement","src":"797:39:58"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"744:1:58"},{"name":"length","nodeType":"YulIdentifier","src":"747:6:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"741:2:58"},"nodeType":"YulFunctionCall","src":"741:13:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"755:19:58","statements":[{"nodeType":"YulAssignment","src":"757:15:58","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"766:1:58"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:58"},"nodeType":"YulFunctionCall","src":"762:10:58"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"757:1:58"}]}]},"pre":{"nodeType":"YulBlock","src":"737:3:58","statements":[]},"src":"733:113:58"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"866:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"871:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"862:3:58"},"nodeType":"YulFunctionCall","src":"862:16:58"},{"kind":"number","nodeType":"YulLiteral","src":"880:1:58","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"855:6:58"},"nodeType":"YulFunctionCall","src":"855:27:58"},"nodeType":"YulExpressionStatement","src":"855:27:58"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"682:3:58","type":""},{"name":"dst","nodeType":"YulTypedName","src":"687:3:58","type":""},{"name":"length","nodeType":"YulTypedName","src":"692:6:58","type":""}],"src":"638:250:58"},{"body":{"nodeType":"YulBlock","src":"943:280:58","statements":[{"nodeType":"YulVariableDeclaration","src":"953:26:58","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"973:5:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"967:5:58"},"nodeType":"YulFunctionCall","src":"967:12:58"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"957:6:58","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"995:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"1000:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"988:6:58"},"nodeType":"YulFunctionCall","src":"988:19:58"},"nodeType":"YulExpressionStatement","src":"988:19:58"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1055:5:58"},{"kind":"number","nodeType":"YulLiteral","src":"1062:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:58"},"nodeType":"YulFunctionCall","src":"1051:16:58"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1073:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"1078:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:58"},"nodeType":"YulFunctionCall","src":"1069:14:58"},{"name":"length","nodeType":"YulIdentifier","src":"1085:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1016:34:58"},"nodeType":"YulFunctionCall","src":"1016:76:58"},"nodeType":"YulExpressionStatement","src":"1016:76:58"},{"nodeType":"YulAssignment","src":"1101:116:58","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1116:3:58"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1129:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"1137:2:58","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1125:3:58"},"nodeType":"YulFunctionCall","src":"1125:15:58"},{"kind":"number","nodeType":"YulLiteral","src":"1142:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1121:3:58"},"nodeType":"YulFunctionCall","src":"1121:88:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1112:3:58"},"nodeType":"YulFunctionCall","src":"1112:98:58"},{"kind":"number","nodeType":"YulLiteral","src":"1212:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1108:3:58"},"nodeType":"YulFunctionCall","src":"1108:109:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1101:3:58"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"920:5:58","type":""},{"name":"pos","nodeType":"YulTypedName","src":"927:3:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"935:3:58","type":""}],"src":"893:330:58"},{"body":{"nodeType":"YulBlock","src":"1349:99:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1366:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1377:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1359:6:58"},"nodeType":"YulFunctionCall","src":"1359:21:58"},"nodeType":"YulExpressionStatement","src":"1359:21:58"},{"nodeType":"YulAssignment","src":"1389:53:58","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1415:6:58"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1427:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1438:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1423:3:58"},"nodeType":"YulFunctionCall","src":"1423:18:58"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1397:17:58"},"nodeType":"YulFunctionCall","src":"1397:45:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1389:4:58"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1318:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1329:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1340:4:58","type":""}],"src":"1228:220:58"},{"body":{"nodeType":"YulBlock","src":"1498:109:58","statements":[{"body":{"nodeType":"YulBlock","src":"1585:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1594:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1597:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1587:6:58"},"nodeType":"YulFunctionCall","src":"1587:12:58"},"nodeType":"YulExpressionStatement","src":"1587:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1521:5:58"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1532:5:58"},{"kind":"number","nodeType":"YulLiteral","src":"1539:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1528:3:58"},"nodeType":"YulFunctionCall","src":"1528:54:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1518:2:58"},"nodeType":"YulFunctionCall","src":"1518:65:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1511:6:58"},"nodeType":"YulFunctionCall","src":"1511:73:58"},"nodeType":"YulIf","src":"1508:93:58"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1487:5:58","type":""}],"src":"1453:154:58"},{"body":{"nodeType":"YulBlock","src":"1699:228:58","statements":[{"body":{"nodeType":"YulBlock","src":"1745:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1754:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1757:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1747:6:58"},"nodeType":"YulFunctionCall","src":"1747:12:58"},"nodeType":"YulExpressionStatement","src":"1747:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1720:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"1729:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1716:3:58"},"nodeType":"YulFunctionCall","src":"1716:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"1741:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1712:3:58"},"nodeType":"YulFunctionCall","src":"1712:32:58"},"nodeType":"YulIf","src":"1709:52:58"},{"nodeType":"YulVariableDeclaration","src":"1770:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1796:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1783:12:58"},"nodeType":"YulFunctionCall","src":"1783:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1774:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1840:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1815:24:58"},"nodeType":"YulFunctionCall","src":"1815:31:58"},"nodeType":"YulExpressionStatement","src":"1815:31:58"},{"nodeType":"YulAssignment","src":"1855:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"1865:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1855:6:58"}]},{"nodeType":"YulAssignment","src":"1879:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1906:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"1917:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1902:3:58"},"nodeType":"YulFunctionCall","src":"1902:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1889:12:58"},"nodeType":"YulFunctionCall","src":"1889:32:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1879:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1657:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1668:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1680:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1688:6:58","type":""}],"src":"1612:315:58"},{"body":{"nodeType":"YulBlock","src":"2033:76:58","statements":[{"nodeType":"YulAssignment","src":"2043:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2055:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"2066:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2051:3:58"},"nodeType":"YulFunctionCall","src":"2051:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2043:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2085:9:58"},{"name":"value0","nodeType":"YulIdentifier","src":"2096:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2078:6:58"},"nodeType":"YulFunctionCall","src":"2078:25:58"},"nodeType":"YulExpressionStatement","src":"2078:25:58"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2002:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2013:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2024:4:58","type":""}],"src":"1932:177:58"},{"body":{"nodeType":"YulBlock","src":"2198:283:58","statements":[{"body":{"nodeType":"YulBlock","src":"2247:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2256:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2259:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2249:6:58"},"nodeType":"YulFunctionCall","src":"2249:12:58"},"nodeType":"YulExpressionStatement","src":"2249:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2226:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"2234:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2222:3:58"},"nodeType":"YulFunctionCall","src":"2222:17:58"},{"name":"end","nodeType":"YulIdentifier","src":"2241:3:58"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2218:3:58"},"nodeType":"YulFunctionCall","src":"2218:27:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2211:6:58"},"nodeType":"YulFunctionCall","src":"2211:35:58"},"nodeType":"YulIf","src":"2208:55:58"},{"nodeType":"YulAssignment","src":"2272:30:58","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2295:6:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2282:12:58"},"nodeType":"YulFunctionCall","src":"2282:20:58"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2272:6:58"}]},{"body":{"nodeType":"YulBlock","src":"2345:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2354:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2357:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2347:6:58"},"nodeType":"YulFunctionCall","src":"2347:12:58"},"nodeType":"YulExpressionStatement","src":"2347:12:58"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2317:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"2325:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2314:2:58"},"nodeType":"YulFunctionCall","src":"2314:30:58"},"nodeType":"YulIf","src":"2311:50:58"},{"nodeType":"YulAssignment","src":"2370:29:58","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2386:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"2394:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2382:3:58"},"nodeType":"YulFunctionCall","src":"2382:17:58"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2370:8:58"}]},{"body":{"nodeType":"YulBlock","src":"2459:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2468:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2471:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2461:6:58"},"nodeType":"YulFunctionCall","src":"2461:12:58"},"nodeType":"YulExpressionStatement","src":"2461:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2422:6:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2434:1:58","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2437:6:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2430:3:58"},"nodeType":"YulFunctionCall","src":"2430:14:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2418:3:58"},"nodeType":"YulFunctionCall","src":"2418:27:58"},{"kind":"number","nodeType":"YulLiteral","src":"2447:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2414:3:58"},"nodeType":"YulFunctionCall","src":"2414:38:58"},{"name":"end","nodeType":"YulIdentifier","src":"2454:3:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2411:2:58"},"nodeType":"YulFunctionCall","src":"2411:47:58"},"nodeType":"YulIf","src":"2408:67:58"}]},"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2161:6:58","type":""},{"name":"end","nodeType":"YulTypedName","src":"2169:3:58","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"2177:8:58","type":""},{"name":"length","nodeType":"YulTypedName","src":"2187:6:58","type":""}],"src":"2114:367:58"},{"body":{"nodeType":"YulBlock","src":"2643:616:58","statements":[{"body":{"nodeType":"YulBlock","src":"2689:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2698:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2701:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2691:6:58"},"nodeType":"YulFunctionCall","src":"2691:12:58"},"nodeType":"YulExpressionStatement","src":"2691:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2664:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"2673:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2660:3:58"},"nodeType":"YulFunctionCall","src":"2660:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"2685:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2656:3:58"},"nodeType":"YulFunctionCall","src":"2656:32:58"},"nodeType":"YulIf","src":"2653:52:58"},{"nodeType":"YulVariableDeclaration","src":"2714:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2728:12:58"},"nodeType":"YulFunctionCall","src":"2728:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2718:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2760:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"2770:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2764:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"2815:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2824:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2827:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2817:6:58"},"nodeType":"YulFunctionCall","src":"2817:12:58"},"nodeType":"YulExpressionStatement","src":"2817:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2803:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"2811:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2800:2:58"},"nodeType":"YulFunctionCall","src":"2800:14:58"},"nodeType":"YulIf","src":"2797:34:58"},{"nodeType":"YulVariableDeclaration","src":"2840:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2908:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"2919:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2904:3:58"},"nodeType":"YulFunctionCall","src":"2904:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2928:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2866:37:58"},"nodeType":"YulFunctionCall","src":"2866:70:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2844:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2854:8:58","type":""}]},{"nodeType":"YulAssignment","src":"2945:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2955:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2945:6:58"}]},{"nodeType":"YulAssignment","src":"2972:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2982:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2972:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"2999:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3032:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3043:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3028:3:58"},"nodeType":"YulFunctionCall","src":"3028:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3015:12:58"},"nodeType":"YulFunctionCall","src":"3015:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3003:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"3076:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3085:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3088:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3078:6:58"},"nodeType":"YulFunctionCall","src":"3078:12:58"},"nodeType":"YulExpressionStatement","src":"3078:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3062:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"3072:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3059:2:58"},"nodeType":"YulFunctionCall","src":"3059:16:58"},"nodeType":"YulIf","src":"3056:36:58"},{"nodeType":"YulVariableDeclaration","src":"3101:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3169:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3180:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3165:3:58"},"nodeType":"YulFunctionCall","src":"3165:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3191:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3127:37:58"},"nodeType":"YulFunctionCall","src":"3127:72:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3105:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3115:8:58","type":""}]},{"nodeType":"YulAssignment","src":"3208:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3218:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3208:6:58"}]},{"nodeType":"YulAssignment","src":"3235:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3245:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3235:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2585:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2596:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2608:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2616:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2624:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2632:6:58","type":""}],"src":"2486:773:58"},{"body":{"nodeType":"YulBlock","src":"3368:352:58","statements":[{"body":{"nodeType":"YulBlock","src":"3414:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3423:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3426:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3416:6:58"},"nodeType":"YulFunctionCall","src":"3416:12:58"},"nodeType":"YulExpressionStatement","src":"3416:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3389:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"3398:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3385:3:58"},"nodeType":"YulFunctionCall","src":"3385:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"3410:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3381:3:58"},"nodeType":"YulFunctionCall","src":"3381:32:58"},"nodeType":"YulIf","src":"3378:52:58"},{"nodeType":"YulVariableDeclaration","src":"3439:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3465:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3452:12:58"},"nodeType":"YulFunctionCall","src":"3452:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3443:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3509:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3484:24:58"},"nodeType":"YulFunctionCall","src":"3484:31:58"},"nodeType":"YulExpressionStatement","src":"3484:31:58"},{"nodeType":"YulAssignment","src":"3524:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"3534:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3524:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"3548:47:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3591:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3576:3:58"},"nodeType":"YulFunctionCall","src":"3576:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3563:12:58"},"nodeType":"YulFunctionCall","src":"3563:32:58"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3552:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3629:7:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3604:24:58"},"nodeType":"YulFunctionCall","src":"3604:33:58"},"nodeType":"YulExpressionStatement","src":"3604:33:58"},{"nodeType":"YulAssignment","src":"3646:17:58","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3656:7:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3646:6:58"}]},{"nodeType":"YulAssignment","src":"3672:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3699:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3710:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3695:3:58"},"nodeType":"YulFunctionCall","src":"3695:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3682:12:58"},"nodeType":"YulFunctionCall","src":"3682:32:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3672:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3318:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3329:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3341:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3349:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3357:6:58","type":""}],"src":"3264:456:58"},{"body":{"nodeType":"YulBlock","src":"3853:125:58","statements":[{"nodeType":"YulAssignment","src":"3863:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3875:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"3886:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3871:3:58"},"nodeType":"YulFunctionCall","src":"3871:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3863:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3905:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3920:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"3928:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3916:3:58"},"nodeType":"YulFunctionCall","src":"3916:55:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3898:6:58"},"nodeType":"YulFunctionCall","src":"3898:74:58"},"nodeType":"YulExpressionStatement","src":"3898:74:58"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1020__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3822:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3833:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3844:4:58","type":""}],"src":"3725:253:58"},{"body":{"nodeType":"YulBlock","src":"4070:228:58","statements":[{"body":{"nodeType":"YulBlock","src":"4116:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4125:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4128:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4118:6:58"},"nodeType":"YulFunctionCall","src":"4118:12:58"},"nodeType":"YulExpressionStatement","src":"4118:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4091:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"4100:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4087:3:58"},"nodeType":"YulFunctionCall","src":"4087:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"4112:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4083:3:58"},"nodeType":"YulFunctionCall","src":"4083:32:58"},"nodeType":"YulIf","src":"4080:52:58"},{"nodeType":"YulAssignment","src":"4141:33:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4164:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4151:12:58"},"nodeType":"YulFunctionCall","src":"4151:23:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4141:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"4183:45:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4213:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"4224:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4209:3:58"},"nodeType":"YulFunctionCall","src":"4209:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4196:12:58"},"nodeType":"YulFunctionCall","src":"4196:32:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4187:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4262:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4237:24:58"},"nodeType":"YulFunctionCall","src":"4237:31:58"},"nodeType":"YulExpressionStatement","src":"4237:31:58"},{"nodeType":"YulAssignment","src":"4277:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"4287:5:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4277:6:58"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4028:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4039:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4051:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4059:6:58","type":""}],"src":"3983:315:58"},{"body":{"nodeType":"YulBlock","src":"4400:87:58","statements":[{"nodeType":"YulAssignment","src":"4410:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4422:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"4433:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4418:3:58"},"nodeType":"YulFunctionCall","src":"4418:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4410:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4452:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4467:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"4475:4:58","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4463:3:58"},"nodeType":"YulFunctionCall","src":"4463:17:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4445:6:58"},"nodeType":"YulFunctionCall","src":"4445:36:58"},"nodeType":"YulExpressionStatement","src":"4445:36:58"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4369:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4380:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4391:4:58","type":""}],"src":"4303:184:58"},{"body":{"nodeType":"YulBlock","src":"4593:76:58","statements":[{"nodeType":"YulAssignment","src":"4603:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4615:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"4626:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4611:3:58"},"nodeType":"YulFunctionCall","src":"4611:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4603:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4645:9:58"},{"name":"value0","nodeType":"YulIdentifier","src":"4656:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4638:6:58"},"nodeType":"YulFunctionCall","src":"4638:25:58"},"nodeType":"YulExpressionStatement","src":"4638:25:58"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4562:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4573:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4584:4:58","type":""}],"src":"4492:177:58"},{"body":{"nodeType":"YulBlock","src":"4744:110:58","statements":[{"body":{"nodeType":"YulBlock","src":"4790:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4799:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4802:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4792:6:58"},"nodeType":"YulFunctionCall","src":"4792:12:58"},"nodeType":"YulExpressionStatement","src":"4792:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4765:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"4774:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4761:3:58"},"nodeType":"YulFunctionCall","src":"4761:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"4786:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4757:3:58"},"nodeType":"YulFunctionCall","src":"4757:32:58"},"nodeType":"YulIf","src":"4754:52:58"},{"nodeType":"YulAssignment","src":"4815:33:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4838:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4825:12:58"},"nodeType":"YulFunctionCall","src":"4825:23:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4815:6:58"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4710:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4721:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4733:6:58","type":""}],"src":"4674:180:58"},{"body":{"nodeType":"YulBlock","src":"5033:734:58","statements":[{"body":{"nodeType":"YulBlock","src":"5079:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5088:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5091:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5081:6:58"},"nodeType":"YulFunctionCall","src":"5081:12:58"},"nodeType":"YulExpressionStatement","src":"5081:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5054:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"5063:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5050:3:58"},"nodeType":"YulFunctionCall","src":"5050:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"5075:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5046:3:58"},"nodeType":"YulFunctionCall","src":"5046:32:58"},"nodeType":"YulIf","src":"5043:52:58"},{"nodeType":"YulVariableDeclaration","src":"5104:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5130:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5117:12:58"},"nodeType":"YulFunctionCall","src":"5117:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5108:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5174:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5149:24:58"},"nodeType":"YulFunctionCall","src":"5149:31:58"},"nodeType":"YulExpressionStatement","src":"5149:31:58"},{"nodeType":"YulAssignment","src":"5189:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"5199:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5189:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"5213:46:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5244:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"5255:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5240:3:58"},"nodeType":"YulFunctionCall","src":"5240:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5227:12:58"},"nodeType":"YulFunctionCall","src":"5227:32:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5217:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5268:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"5278:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5272:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"5323:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5332:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5335:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5325:6:58"},"nodeType":"YulFunctionCall","src":"5325:12:58"},"nodeType":"YulExpressionStatement","src":"5325:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5311:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"5319:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5308:2:58"},"nodeType":"YulFunctionCall","src":"5308:14:58"},"nodeType":"YulIf","src":"5305:34:58"},{"nodeType":"YulVariableDeclaration","src":"5348:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5416:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"5427:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5412:3:58"},"nodeType":"YulFunctionCall","src":"5412:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5436:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"5374:37:58"},"nodeType":"YulFunctionCall","src":"5374:70:58"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"5352:8:58","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"5362:8:58","type":""}]},{"nodeType":"YulAssignment","src":"5453:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"5463:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5453:6:58"}]},{"nodeType":"YulAssignment","src":"5480:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"5490:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5480:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"5507:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5540:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"5551:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5536:3:58"},"nodeType":"YulFunctionCall","src":"5536:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5523:12:58"},"nodeType":"YulFunctionCall","src":"5523:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5511:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"5584:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5593:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5596:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5586:6:58"},"nodeType":"YulFunctionCall","src":"5586:12:58"},"nodeType":"YulExpressionStatement","src":"5586:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5570:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"5580:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5567:2:58"},"nodeType":"YulFunctionCall","src":"5567:16:58"},"nodeType":"YulIf","src":"5564:36:58"},{"nodeType":"YulVariableDeclaration","src":"5609:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5677:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5688:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5673:3:58"},"nodeType":"YulFunctionCall","src":"5673:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5699:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"5635:37:58"},"nodeType":"YulFunctionCall","src":"5635:72:58"},"variables":[{"name":"value3_1","nodeType":"YulTypedName","src":"5613:8:58","type":""},{"name":"value4_1","nodeType":"YulTypedName","src":"5623:8:58","type":""}]},{"nodeType":"YulAssignment","src":"5716:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"5726:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5716:6:58"}]},{"nodeType":"YulAssignment","src":"5743:18:58","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"5753:8:58"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5743:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4967:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4978:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4990:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4998:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5006:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5014:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5022:6:58","type":""}],"src":"4859:908:58"},{"body":{"nodeType":"YulBlock","src":"5842:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"5888:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5897:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5900:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5890:6:58"},"nodeType":"YulFunctionCall","src":"5890:12:58"},"nodeType":"YulExpressionStatement","src":"5890:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5863:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"5872:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5859:3:58"},"nodeType":"YulFunctionCall","src":"5859:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"5884:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5855:3:58"},"nodeType":"YulFunctionCall","src":"5855:32:58"},"nodeType":"YulIf","src":"5852:52:58"},{"nodeType":"YulVariableDeclaration","src":"5913:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5939:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5926:12:58"},"nodeType":"YulFunctionCall","src":"5926:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5917:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5983:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5958:24:58"},"nodeType":"YulFunctionCall","src":"5958:31:58"},"nodeType":"YulExpressionStatement","src":"5958:31:58"},{"nodeType":"YulAssignment","src":"5998:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"6008:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5998:6:58"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5808:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5819:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5831:6:58","type":""}],"src":"5772:247:58"},{"body":{"nodeType":"YulBlock","src":"6248:879:58","statements":[{"body":{"nodeType":"YulBlock","src":"6294:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6303:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6306:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6296:6:58"},"nodeType":"YulFunctionCall","src":"6296:12:58"},"nodeType":"YulExpressionStatement","src":"6296:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6269:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"6278:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6265:3:58"},"nodeType":"YulFunctionCall","src":"6265:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"6290:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6261:3:58"},"nodeType":"YulFunctionCall","src":"6261:32:58"},"nodeType":"YulIf","src":"6258:52:58"},{"nodeType":"YulVariableDeclaration","src":"6319:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6346:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6333:12:58"},"nodeType":"YulFunctionCall","src":"6333:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6323:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6365:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"6375:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6369:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"6420:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6429:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6432:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6422:6:58"},"nodeType":"YulFunctionCall","src":"6422:12:58"},"nodeType":"YulExpressionStatement","src":"6422:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6408:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"6416:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6405:2:58"},"nodeType":"YulFunctionCall","src":"6405:14:58"},"nodeType":"YulIf","src":"6402:34:58"},{"nodeType":"YulVariableDeclaration","src":"6445:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6513:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"6524:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6509:3:58"},"nodeType":"YulFunctionCall","src":"6509:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6533:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"6471:37:58"},"nodeType":"YulFunctionCall","src":"6471:70:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"6449:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"6459:8:58","type":""}]},{"nodeType":"YulAssignment","src":"6550:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"6560:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6550:6:58"}]},{"nodeType":"YulAssignment","src":"6577:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6587:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6577:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"6604:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6637:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6648:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6633:3:58"},"nodeType":"YulFunctionCall","src":"6633:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6620:12:58"},"nodeType":"YulFunctionCall","src":"6620:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6608:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"6681:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6690:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6693:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6683:6:58"},"nodeType":"YulFunctionCall","src":"6683:12:58"},"nodeType":"YulExpressionStatement","src":"6683:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6667:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"6677:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6664:2:58"},"nodeType":"YulFunctionCall","src":"6664:16:58"},"nodeType":"YulIf","src":"6661:36:58"},{"nodeType":"YulVariableDeclaration","src":"6706:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6774:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6785:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6770:3:58"},"nodeType":"YulFunctionCall","src":"6770:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6796:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"6732:37:58"},"nodeType":"YulFunctionCall","src":"6732:72:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"6710:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"6720:8:58","type":""}]},{"nodeType":"YulAssignment","src":"6813:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"6823:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6813:6:58"}]},{"nodeType":"YulAssignment","src":"6840:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"6850:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6840:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"6867:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6900:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"6911:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6896:3:58"},"nodeType":"YulFunctionCall","src":"6896:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6883:12:58"},"nodeType":"YulFunctionCall","src":"6883:32:58"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6871:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"6944:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6953:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6956:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6946:6:58"},"nodeType":"YulFunctionCall","src":"6946:12:58"},"nodeType":"YulExpressionStatement","src":"6946:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6930:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"6940:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6927:2:58"},"nodeType":"YulFunctionCall","src":"6927:16:58"},"nodeType":"YulIf","src":"6924:36:58"},{"nodeType":"YulVariableDeclaration","src":"6969:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7037:9:58"},{"name":"offset_2","nodeType":"YulIdentifier","src":"7048:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:58"},"nodeType":"YulFunctionCall","src":"7033:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7059:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"6995:37:58"},"nodeType":"YulFunctionCall","src":"6995:72:58"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"6973:8:58","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"6983:8:58","type":""}]},{"nodeType":"YulAssignment","src":"7076:18:58","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"7086:8:58"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7076:6:58"}]},{"nodeType":"YulAssignment","src":"7103:18:58","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"7113:8:58"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7103:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6174:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6185:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6197:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6205:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6213:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6221:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6229:6:58","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6237:6:58","type":""}],"src":"6024:1103:58"},{"body":{"nodeType":"YulBlock","src":"7202:110:58","statements":[{"body":{"nodeType":"YulBlock","src":"7248:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7257:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7260:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7250:6:58"},"nodeType":"YulFunctionCall","src":"7250:12:58"},"nodeType":"YulExpressionStatement","src":"7250:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7223:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"7232:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7219:3:58"},"nodeType":"YulFunctionCall","src":"7219:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"7244:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7215:3:58"},"nodeType":"YulFunctionCall","src":"7215:32:58"},"nodeType":"YulIf","src":"7212:52:58"},{"nodeType":"YulAssignment","src":"7273:33:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7296:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7283:12:58"},"nodeType":"YulFunctionCall","src":"7283:23:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7273:6:58"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7168:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7179:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7191:6:58","type":""}],"src":"7132:180:58"},{"body":{"nodeType":"YulBlock","src":"7418:125:58","statements":[{"nodeType":"YulAssignment","src":"7428:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7440:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"7451:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7436:3:58"},"nodeType":"YulFunctionCall","src":"7436:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7428:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7470:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7485:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"7493:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7481:3:58"},"nodeType":"YulFunctionCall","src":"7481:55:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7463:6:58"},"nodeType":"YulFunctionCall","src":"7463:74:58"},"nodeType":"YulExpressionStatement","src":"7463:74:58"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7387:9:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7398:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7409:4:58","type":""}],"src":"7317:226:58"},{"body":{"nodeType":"YulBlock","src":"7620:275:58","statements":[{"body":{"nodeType":"YulBlock","src":"7669:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7678:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7681:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7671:6:58"},"nodeType":"YulFunctionCall","src":"7671:12:58"},"nodeType":"YulExpressionStatement","src":"7671:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7648:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"7656:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7644:3:58"},"nodeType":"YulFunctionCall","src":"7644:17:58"},{"name":"end","nodeType":"YulIdentifier","src":"7663:3:58"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7640:3:58"},"nodeType":"YulFunctionCall","src":"7640:27:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7633:6:58"},"nodeType":"YulFunctionCall","src":"7633:35:58"},"nodeType":"YulIf","src":"7630:55:58"},{"nodeType":"YulAssignment","src":"7694:30:58","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7717:6:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7704:12:58"},"nodeType":"YulFunctionCall","src":"7704:20:58"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7694:6:58"}]},{"body":{"nodeType":"YulBlock","src":"7767:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7776:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7779:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7769:6:58"},"nodeType":"YulFunctionCall","src":"7769:12:58"},"nodeType":"YulExpressionStatement","src":"7769:12:58"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7739:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"7747:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7736:2:58"},"nodeType":"YulFunctionCall","src":"7736:30:58"},"nodeType":"YulIf","src":"7733:50:58"},{"nodeType":"YulAssignment","src":"7792:29:58","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7808:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"7816:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7804:3:58"},"nodeType":"YulFunctionCall","src":"7804:17:58"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"7792:8:58"}]},{"body":{"nodeType":"YulBlock","src":"7873:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7882:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7885:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7875:6:58"},"nodeType":"YulFunctionCall","src":"7875:12:58"},"nodeType":"YulExpressionStatement","src":"7875:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7844:6:58"},{"name":"length","nodeType":"YulIdentifier","src":"7852:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7840:3:58"},"nodeType":"YulFunctionCall","src":"7840:19:58"},{"kind":"number","nodeType":"YulLiteral","src":"7861:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7836:3:58"},"nodeType":"YulFunctionCall","src":"7836:30:58"},{"name":"end","nodeType":"YulIdentifier","src":"7868:3:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7833:2:58"},"nodeType":"YulFunctionCall","src":"7833:39:58"},"nodeType":"YulIf","src":"7830:59:58"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7583:6:58","type":""},{"name":"end","nodeType":"YulTypedName","src":"7591:3:58","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"7599:8:58","type":""},{"name":"length","nodeType":"YulTypedName","src":"7609:6:58","type":""}],"src":"7548:347:58"},{"body":{"nodeType":"YulBlock","src":"8040:614:58","statements":[{"body":{"nodeType":"YulBlock","src":"8087:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8096:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8099:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8089:6:58"},"nodeType":"YulFunctionCall","src":"8089:12:58"},"nodeType":"YulExpressionStatement","src":"8089:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8061:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"8070:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8057:3:58"},"nodeType":"YulFunctionCall","src":"8057:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"8082:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8053:3:58"},"nodeType":"YulFunctionCall","src":"8053:33:58"},"nodeType":"YulIf","src":"8050:53:58"},{"nodeType":"YulVariableDeclaration","src":"8112:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8138:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8125:12:58"},"nodeType":"YulFunctionCall","src":"8125:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8116:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8182:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8157:24:58"},"nodeType":"YulFunctionCall","src":"8157:31:58"},"nodeType":"YulExpressionStatement","src":"8157:31:58"},{"nodeType":"YulAssignment","src":"8197:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"8207:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8197:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"8221:47:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8253:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8264:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8249:3:58"},"nodeType":"YulFunctionCall","src":"8249:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8236:12:58"},"nodeType":"YulFunctionCall","src":"8236:32:58"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"8225:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"8302:7:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8277:24:58"},"nodeType":"YulFunctionCall","src":"8277:33:58"},"nodeType":"YulExpressionStatement","src":"8277:33:58"},{"nodeType":"YulAssignment","src":"8319:17:58","value":{"name":"value_1","nodeType":"YulIdentifier","src":"8329:7:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8319:6:58"}]},{"nodeType":"YulAssignment","src":"8345:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8372:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8383:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8368:3:58"},"nodeType":"YulFunctionCall","src":"8368:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8355:12:58"},"nodeType":"YulFunctionCall","src":"8355:32:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8345:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"8396:46:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8427:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"8438:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8423:3:58"},"nodeType":"YulFunctionCall","src":"8423:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8410:12:58"},"nodeType":"YulFunctionCall","src":"8410:32:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8400:6:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"8485:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8494:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8497:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8487:6:58"},"nodeType":"YulFunctionCall","src":"8487:12:58"},"nodeType":"YulExpressionStatement","src":"8487:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8457:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"8465:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8454:2:58"},"nodeType":"YulFunctionCall","src":"8454:30:58"},"nodeType":"YulIf","src":"8451:50:58"},{"nodeType":"YulVariableDeclaration","src":"8510:84:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8566:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"8577:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8562:3:58"},"nodeType":"YulFunctionCall","src":"8562:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8586:7:58"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"8536:25:58"},"nodeType":"YulFunctionCall","src":"8536:58:58"},"variables":[{"name":"value3_1","nodeType":"YulTypedName","src":"8514:8:58","type":""},{"name":"value4_1","nodeType":"YulTypedName","src":"8524:8:58","type":""}]},{"nodeType":"YulAssignment","src":"8603:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"8613:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8603:6:58"}]},{"nodeType":"YulAssignment","src":"8630:18:58","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"8640:8:58"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8630:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7974:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7985:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7997:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8005:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8013:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8021:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8029:6:58","type":""}],"src":"7900:754:58"},{"body":{"nodeType":"YulBlock","src":"8884:879:58","statements":[{"body":{"nodeType":"YulBlock","src":"8930:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8939:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8942:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8932:6:58"},"nodeType":"YulFunctionCall","src":"8932:12:58"},"nodeType":"YulExpressionStatement","src":"8932:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8905:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"8914:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8901:3:58"},"nodeType":"YulFunctionCall","src":"8901:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"8926:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8897:3:58"},"nodeType":"YulFunctionCall","src":"8897:32:58"},"nodeType":"YulIf","src":"8894:52:58"},{"nodeType":"YulVariableDeclaration","src":"8955:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8982:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8969:12:58"},"nodeType":"YulFunctionCall","src":"8969:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8959:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9001:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"9011:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9005:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"9056:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9065:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9068:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9058:6:58"},"nodeType":"YulFunctionCall","src":"9058:12:58"},"nodeType":"YulExpressionStatement","src":"9058:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9044:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"9052:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9041:2:58"},"nodeType":"YulFunctionCall","src":"9041:14:58"},"nodeType":"YulIf","src":"9038:34:58"},{"nodeType":"YulVariableDeclaration","src":"9081:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9149:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"9160:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9145:3:58"},"nodeType":"YulFunctionCall","src":"9145:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9169:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"9107:37:58"},"nodeType":"YulFunctionCall","src":"9107:70:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"9085:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"9095:8:58","type":""}]},{"nodeType":"YulAssignment","src":"9186:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"9196:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9186:6:58"}]},{"nodeType":"YulAssignment","src":"9213:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"9223:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9213:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"9240:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9273:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9284:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9269:3:58"},"nodeType":"YulFunctionCall","src":"9269:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9256:12:58"},"nodeType":"YulFunctionCall","src":"9256:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"9244:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"9317:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9326:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9329:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9319:6:58"},"nodeType":"YulFunctionCall","src":"9319:12:58"},"nodeType":"YulExpressionStatement","src":"9319:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9303:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"9313:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9300:2:58"},"nodeType":"YulFunctionCall","src":"9300:16:58"},"nodeType":"YulIf","src":"9297:36:58"},{"nodeType":"YulVariableDeclaration","src":"9342:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9410:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"9421:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9406:3:58"},"nodeType":"YulFunctionCall","src":"9406:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9432:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"9368:37:58"},"nodeType":"YulFunctionCall","src":"9368:72:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"9346:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"9356:8:58","type":""}]},{"nodeType":"YulAssignment","src":"9449:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"9459:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9449:6:58"}]},{"nodeType":"YulAssignment","src":"9476:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"9486:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9476:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"9503:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9536:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"9547:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9532:3:58"},"nodeType":"YulFunctionCall","src":"9532:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9519:12:58"},"nodeType":"YulFunctionCall","src":"9519:32:58"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"9507:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"9580:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9589:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9592:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9582:6:58"},"nodeType":"YulFunctionCall","src":"9582:12:58"},"nodeType":"YulExpressionStatement","src":"9582:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"9566:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"9576:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9563:2:58"},"nodeType":"YulFunctionCall","src":"9563:16:58"},"nodeType":"YulIf","src":"9560:36:58"},{"nodeType":"YulVariableDeclaration","src":"9605:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9673:9:58"},{"name":"offset_2","nodeType":"YulIdentifier","src":"9684:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9669:3:58"},"nodeType":"YulFunctionCall","src":"9669:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9695:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"9631:37:58"},"nodeType":"YulFunctionCall","src":"9631:72:58"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"9609:8:58","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"9619:8:58","type":""}]},{"nodeType":"YulAssignment","src":"9712:18:58","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"9722:8:58"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"9712:6:58"}]},{"nodeType":"YulAssignment","src":"9739:18:58","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"9749:8:58"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9739:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8810:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8821:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8833:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8841:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8849:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8857:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8865:6:58","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8873:6:58","type":""}],"src":"8659:1104:58"},{"body":{"nodeType":"YulBlock","src":"9938:659:58","statements":[{"body":{"nodeType":"YulBlock","src":"9985:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9994:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9997:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9987:6:58"},"nodeType":"YulFunctionCall","src":"9987:12:58"},"nodeType":"YulExpressionStatement","src":"9987:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9959:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"9968:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9955:3:58"},"nodeType":"YulFunctionCall","src":"9955:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"9980:3:58","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9951:3:58"},"nodeType":"YulFunctionCall","src":"9951:33:58"},"nodeType":"YulIf","src":"9948:53:58"},{"nodeType":"YulVariableDeclaration","src":"10010:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10036:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10023:12:58"},"nodeType":"YulFunctionCall","src":"10023:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10014:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10080:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10055:24:58"},"nodeType":"YulFunctionCall","src":"10055:31:58"},"nodeType":"YulExpressionStatement","src":"10055:31:58"},{"nodeType":"YulAssignment","src":"10095:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"10105:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10095:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"10119:47:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10151:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"10162:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10147:3:58"},"nodeType":"YulFunctionCall","src":"10147:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10134:12:58"},"nodeType":"YulFunctionCall","src":"10134:32:58"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"10123:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"10200:7:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10175:24:58"},"nodeType":"YulFunctionCall","src":"10175:33:58"},"nodeType":"YulExpressionStatement","src":"10175:33:58"},{"nodeType":"YulAssignment","src":"10217:17:58","value":{"name":"value_1","nodeType":"YulIdentifier","src":"10227:7:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10217:6:58"}]},{"nodeType":"YulAssignment","src":"10243:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10270:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"10281:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10266:3:58"},"nodeType":"YulFunctionCall","src":"10266:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10253:12:58"},"nodeType":"YulFunctionCall","src":"10253:32:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10243:6:58"}]},{"nodeType":"YulAssignment","src":"10294:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10321:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"10332:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10317:3:58"},"nodeType":"YulFunctionCall","src":"10317:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10304:12:58"},"nodeType":"YulFunctionCall","src":"10304:32:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10294:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"10345:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10377:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"10388:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10373:3:58"},"nodeType":"YulFunctionCall","src":"10373:19:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10360:12:58"},"nodeType":"YulFunctionCall","src":"10360:33:58"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"10349:7:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"10445:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10454:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10457:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10447:6:58"},"nodeType":"YulFunctionCall","src":"10447:12:58"},"nodeType":"YulExpressionStatement","src":"10447:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"10415:7:58"},{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"10428:7:58"},{"kind":"number","nodeType":"YulLiteral","src":"10437:4:58","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10424:3:58"},"nodeType":"YulFunctionCall","src":"10424:18:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10412:2:58"},"nodeType":"YulFunctionCall","src":"10412:31:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10405:6:58"},"nodeType":"YulFunctionCall","src":"10405:39:58"},"nodeType":"YulIf","src":"10402:59:58"},{"nodeType":"YulAssignment","src":"10470:17:58","value":{"name":"value_2","nodeType":"YulIdentifier","src":"10480:7:58"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10470:6:58"}]},{"nodeType":"YulAssignment","src":"10496:43:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10523:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"10534:3:58","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10519:3:58"},"nodeType":"YulFunctionCall","src":"10519:19:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10506:12:58"},"nodeType":"YulFunctionCall","src":"10506:33:58"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"10496:6:58"}]},{"nodeType":"YulAssignment","src":"10548:43:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10575:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"10586:3:58","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10571:3:58"},"nodeType":"YulFunctionCall","src":"10571:19:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10558:12:58"},"nodeType":"YulFunctionCall","src":"10558:33:58"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"10548:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9856:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9867:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9879:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9887:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9895:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9903:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9911:6:58","type":""},{"name":"value5","nodeType":"YulTypedName","src":"9919:6:58","type":""},{"name":"value6","nodeType":"YulTypedName","src":"9927:6:58","type":""}],"src":"9768:829:58"},{"body":{"nodeType":"YulBlock","src":"10689:301:58","statements":[{"body":{"nodeType":"YulBlock","src":"10735:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10744:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10747:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10737:6:58"},"nodeType":"YulFunctionCall","src":"10737:12:58"},"nodeType":"YulExpressionStatement","src":"10737:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10710:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"10719:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10706:3:58"},"nodeType":"YulFunctionCall","src":"10706:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"10731:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10702:3:58"},"nodeType":"YulFunctionCall","src":"10702:32:58"},"nodeType":"YulIf","src":"10699:52:58"},{"nodeType":"YulVariableDeclaration","src":"10760:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10786:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10773:12:58"},"nodeType":"YulFunctionCall","src":"10773:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10764:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10830:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10805:24:58"},"nodeType":"YulFunctionCall","src":"10805:31:58"},"nodeType":"YulExpressionStatement","src":"10805:31:58"},{"nodeType":"YulAssignment","src":"10845:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"10855:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10845:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"10869:47:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10901:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"10912:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10897:3:58"},"nodeType":"YulFunctionCall","src":"10897:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10884:12:58"},"nodeType":"YulFunctionCall","src":"10884:32:58"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"10873:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"10950:7:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10925:24:58"},"nodeType":"YulFunctionCall","src":"10925:33:58"},"nodeType":"YulExpressionStatement","src":"10925:33:58"},{"nodeType":"YulAssignment","src":"10967:17:58","value":{"name":"value_1","nodeType":"YulIdentifier","src":"10977:7:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10967:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10647:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10658:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10670:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10678:6:58","type":""}],"src":"10602:388:58"},{"body":{"nodeType":"YulBlock","src":"11085:320:58","statements":[{"body":{"nodeType":"YulBlock","src":"11131:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11140:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11143:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11133:6:58"},"nodeType":"YulFunctionCall","src":"11133:12:58"},"nodeType":"YulExpressionStatement","src":"11133:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11106:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"11115:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11102:3:58"},"nodeType":"YulFunctionCall","src":"11102:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"11127:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11098:3:58"},"nodeType":"YulFunctionCall","src":"11098:32:58"},"nodeType":"YulIf","src":"11095:52:58"},{"nodeType":"YulVariableDeclaration","src":"11156:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11183:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11170:12:58"},"nodeType":"YulFunctionCall","src":"11170:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11160:6:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"11236:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11245:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11248:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11238:6:58"},"nodeType":"YulFunctionCall","src":"11238:12:58"},"nodeType":"YulExpressionStatement","src":"11238:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11208:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"11216:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11205:2:58"},"nodeType":"YulFunctionCall","src":"11205:30:58"},"nodeType":"YulIf","src":"11202:50:58"},{"nodeType":"YulVariableDeclaration","src":"11261:84:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11317:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"11328:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11313:3:58"},"nodeType":"YulFunctionCall","src":"11313:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11337:7:58"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"11287:25:58"},"nodeType":"YulFunctionCall","src":"11287:58:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"11265:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"11275:8:58","type":""}]},{"nodeType":"YulAssignment","src":"11354:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"11364:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11354:6:58"}]},{"nodeType":"YulAssignment","src":"11381:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"11391:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11381:6:58"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11043:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11054:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11066:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11074:6:58","type":""}],"src":"10995:410:58"},{"body":{"nodeType":"YulBlock","src":"11533:489:58","statements":[{"body":{"nodeType":"YulBlock","src":"11579:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11588:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11591:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11581:6:58"},"nodeType":"YulFunctionCall","src":"11581:12:58"},"nodeType":"YulExpressionStatement","src":"11581:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11554:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"11563:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11550:3:58"},"nodeType":"YulFunctionCall","src":"11550:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"11575:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11546:3:58"},"nodeType":"YulFunctionCall","src":"11546:32:58"},"nodeType":"YulIf","src":"11543:52:58"},{"nodeType":"YulVariableDeclaration","src":"11604:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11630:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11617:12:58"},"nodeType":"YulFunctionCall","src":"11617:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11608:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11674:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11649:24:58"},"nodeType":"YulFunctionCall","src":"11649:31:58"},"nodeType":"YulExpressionStatement","src":"11649:31:58"},{"nodeType":"YulAssignment","src":"11689:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"11699:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11689:6:58"}]},{"nodeType":"YulAssignment","src":"11713:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11740:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"11751:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11736:3:58"},"nodeType":"YulFunctionCall","src":"11736:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11723:12:58"},"nodeType":"YulFunctionCall","src":"11723:32:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11713:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"11764:46:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11795:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"11806:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11791:3:58"},"nodeType":"YulFunctionCall","src":"11791:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11778:12:58"},"nodeType":"YulFunctionCall","src":"11778:32:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11768:6:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"11853:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11862:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11865:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11855:6:58"},"nodeType":"YulFunctionCall","src":"11855:12:58"},"nodeType":"YulExpressionStatement","src":"11855:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11825:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"11833:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11822:2:58"},"nodeType":"YulFunctionCall","src":"11822:30:58"},"nodeType":"YulIf","src":"11819:50:58"},{"nodeType":"YulVariableDeclaration","src":"11878:84:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11934:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"11945:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11930:3:58"},"nodeType":"YulFunctionCall","src":"11930:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11954:7:58"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"11904:25:58"},"nodeType":"YulFunctionCall","src":"11904:58:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"11882:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"11892:8:58","type":""}]},{"nodeType":"YulAssignment","src":"11971:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"11981:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11971:6:58"}]},{"nodeType":"YulAssignment","src":"11998:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"12008:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11998:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11475:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11486:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11498:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11506:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11514:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11522:6:58","type":""}],"src":"11410:612:58"},{"body":{"nodeType":"YulBlock","src":"12192:616:58","statements":[{"body":{"nodeType":"YulBlock","src":"12238:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12247:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12250:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12240:6:58"},"nodeType":"YulFunctionCall","src":"12240:12:58"},"nodeType":"YulExpressionStatement","src":"12240:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12213:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"12222:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12209:3:58"},"nodeType":"YulFunctionCall","src":"12209:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"12234:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12205:3:58"},"nodeType":"YulFunctionCall","src":"12205:32:58"},"nodeType":"YulIf","src":"12202:52:58"},{"nodeType":"YulVariableDeclaration","src":"12263:37:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12290:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12277:12:58"},"nodeType":"YulFunctionCall","src":"12277:23:58"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12267:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12309:28:58","value":{"kind":"number","nodeType":"YulLiteral","src":"12319:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12313:2:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"12364:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12373:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12376:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12366:6:58"},"nodeType":"YulFunctionCall","src":"12366:12:58"},"nodeType":"YulExpressionStatement","src":"12366:12:58"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12352:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"12360:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12349:2:58"},"nodeType":"YulFunctionCall","src":"12349:14:58"},"nodeType":"YulIf","src":"12346:34:58"},{"nodeType":"YulVariableDeclaration","src":"12389:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12457:9:58"},{"name":"offset","nodeType":"YulIdentifier","src":"12468:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12453:3:58"},"nodeType":"YulFunctionCall","src":"12453:22:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12477:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"12415:37:58"},"nodeType":"YulFunctionCall","src":"12415:70:58"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"12393:8:58","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"12403:8:58","type":""}]},{"nodeType":"YulAssignment","src":"12494:18:58","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"12504:8:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12494:6:58"}]},{"nodeType":"YulAssignment","src":"12521:18:58","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"12531:8:58"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12521:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"12548:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12581:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"12592:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12577:3:58"},"nodeType":"YulFunctionCall","src":"12577:18:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12564:12:58"},"nodeType":"YulFunctionCall","src":"12564:32:58"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"12552:8:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"12625:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12634:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12637:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12627:6:58"},"nodeType":"YulFunctionCall","src":"12627:12:58"},"nodeType":"YulExpressionStatement","src":"12627:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"12611:8:58"},{"name":"_1","nodeType":"YulIdentifier","src":"12621:2:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12608:2:58"},"nodeType":"YulFunctionCall","src":"12608:16:58"},"nodeType":"YulIf","src":"12605:36:58"},{"nodeType":"YulVariableDeclaration","src":"12650:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12718:9:58"},{"name":"offset_1","nodeType":"YulIdentifier","src":"12729:8:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12714:3:58"},"nodeType":"YulFunctionCall","src":"12714:24:58"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12740:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"12676:37:58"},"nodeType":"YulFunctionCall","src":"12676:72:58"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"12654:8:58","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"12664:8:58","type":""}]},{"nodeType":"YulAssignment","src":"12757:18:58","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"12767:8:58"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12757:6:58"}]},{"nodeType":"YulAssignment","src":"12784:18:58","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"12794:8:58"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"12784:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12134:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12145:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12157:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12165:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12173:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12181:6:58","type":""}],"src":"12027:781:58"},{"body":{"nodeType":"YulBlock","src":"12987:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13004:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"13015:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12997:6:58"},"nodeType":"YulFunctionCall","src":"12997:21:58"},"nodeType":"YulExpressionStatement","src":"12997:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13038:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"13049:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13034:3:58"},"nodeType":"YulFunctionCall","src":"13034:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"13054:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13027:6:58"},"nodeType":"YulFunctionCall","src":"13027:30:58"},"nodeType":"YulExpressionStatement","src":"13027:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13077:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"13088:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13073:3:58"},"nodeType":"YulFunctionCall","src":"13073:18:58"},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","kind":"string","nodeType":"YulLiteral","src":"13093:31:58","type":"","value":"Recovery: inconsistent arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13066:6:58"},"nodeType":"YulFunctionCall","src":"13066:59:58"},"nodeType":"YulExpressionStatement","src":"13066:59:58"},{"nodeType":"YulAssignment","src":"13134:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13146:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"13157:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13142:3:58"},"nodeType":"YulFunctionCall","src":"13142:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13134:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12964:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12978:4:58","type":""}],"src":"12813:353:58"},{"body":{"nodeType":"YulBlock","src":"13203:152:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13220:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13223:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13213:6:58"},"nodeType":"YulFunctionCall","src":"13213:88:58"},"nodeType":"YulExpressionStatement","src":"13213:88:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13317:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13320:4:58","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13310:6:58"},"nodeType":"YulFunctionCall","src":"13310:15:58"},"nodeType":"YulExpressionStatement","src":"13310:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13341:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13344:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13334:6:58"},"nodeType":"YulFunctionCall","src":"13334:15:58"},"nodeType":"YulExpressionStatement","src":"13334:15:58"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"13171:184:58"},{"body":{"nodeType":"YulBlock","src":"13445:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"13491:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13500:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13503:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13493:6:58"},"nodeType":"YulFunctionCall","src":"13493:12:58"},"nodeType":"YulExpressionStatement","src":"13493:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13466:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"13475:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13462:3:58"},"nodeType":"YulFunctionCall","src":"13462:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"13487:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13458:3:58"},"nodeType":"YulFunctionCall","src":"13458:32:58"},"nodeType":"YulIf","src":"13455:52:58"},{"nodeType":"YulVariableDeclaration","src":"13516:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13542:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13529:12:58"},"nodeType":"YulFunctionCall","src":"13529:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13520:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13586:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13561:24:58"},"nodeType":"YulFunctionCall","src":"13561:31:58"},"nodeType":"YulExpressionStatement","src":"13561:31:58"},{"nodeType":"YulAssignment","src":"13601:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"13611:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13601:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$4829","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13411:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13422:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13434:6:58","type":""}],"src":"13360:262:58"},{"body":{"nodeType":"YulBlock","src":"13713:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"13759:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13768:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13771:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13761:6:58"},"nodeType":"YulFunctionCall","src":"13761:12:58"},"nodeType":"YulExpressionStatement","src":"13761:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13734:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"13743:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13730:3:58"},"nodeType":"YulFunctionCall","src":"13730:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"13755:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13726:3:58"},"nodeType":"YulFunctionCall","src":"13726:32:58"},"nodeType":"YulIf","src":"13723:52:58"},{"nodeType":"YulVariableDeclaration","src":"13784:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13810:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13797:12:58"},"nodeType":"YulFunctionCall","src":"13797:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13788:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13854:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13829:24:58"},"nodeType":"YulFunctionCall","src":"13829:31:58"},"nodeType":"YulExpressionStatement","src":"13829:31:58"},{"nodeType":"YulAssignment","src":"13869:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"13879:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13869:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$4591","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13679:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13690:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13702:6:58","type":""}],"src":"13627:263:58"},{"body":{"nodeType":"YulBlock","src":"14052:241:58","statements":[{"nodeType":"YulAssignment","src":"14062:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14074:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"14085:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14070:3:58"},"nodeType":"YulFunctionCall","src":"14070:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14062:4:58"}]},{"nodeType":"YulVariableDeclaration","src":"14097:52:58","value":{"kind":"number","nodeType":"YulLiteral","src":"14107:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14101:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14165:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14180:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"14188:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14176:3:58"},"nodeType":"YulFunctionCall","src":"14176:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14158:6:58"},"nodeType":"YulFunctionCall","src":"14158:34:58"},"nodeType":"YulExpressionStatement","src":"14158:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14212:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"14223:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14208:3:58"},"nodeType":"YulFunctionCall","src":"14208:18:58"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14232:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"14240:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14228:3:58"},"nodeType":"YulFunctionCall","src":"14228:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14201:6:58"},"nodeType":"YulFunctionCall","src":"14201:43:58"},"nodeType":"YulExpressionStatement","src":"14201:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14264:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"14275:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14260:3:58"},"nodeType":"YulFunctionCall","src":"14260:18:58"},{"name":"value2","nodeType":"YulIdentifier","src":"14280:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14253:6:58"},"nodeType":"YulFunctionCall","src":"14253:34:58"},"nodeType":"YulExpressionStatement","src":"14253:34:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14005:9:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14016:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14024:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14032:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14043:4:58","type":""}],"src":"13895:398:58"},{"body":{"nodeType":"YulBlock","src":"14376:177:58","statements":[{"body":{"nodeType":"YulBlock","src":"14422:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14431:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14434:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14424:6:58"},"nodeType":"YulFunctionCall","src":"14424:12:58"},"nodeType":"YulExpressionStatement","src":"14424:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14397:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"14406:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14393:3:58"},"nodeType":"YulFunctionCall","src":"14393:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"14418:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14389:3:58"},"nodeType":"YulFunctionCall","src":"14389:32:58"},"nodeType":"YulIf","src":"14386:52:58"},{"nodeType":"YulVariableDeclaration","src":"14447:36:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14473:9:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14460:12:58"},"nodeType":"YulFunctionCall","src":"14460:23:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14451:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14517:5:58"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14492:24:58"},"nodeType":"YulFunctionCall","src":"14492:31:58"},"nodeType":"YulExpressionStatement","src":"14492:31:58"},{"nodeType":"YulAssignment","src":"14532:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"14542:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14532:6:58"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14342:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14353:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14365:6:58","type":""}],"src":"14298:255:58"},{"body":{"nodeType":"YulBlock","src":"14607:233:58","statements":[{"nodeType":"YulAssignment","src":"14617:17:58","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14629:1:58"},{"name":"y","nodeType":"YulIdentifier","src":"14632:1:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14625:3:58"},"nodeType":"YulFunctionCall","src":"14625:9:58"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14617:4:58"}]},{"body":{"nodeType":"YulBlock","src":"14666:168:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14687:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14690:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14680:6:58"},"nodeType":"YulFunctionCall","src":"14680:88:58"},"nodeType":"YulExpressionStatement","src":"14680:88:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14788:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14791:4:58","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14781:6:58"},"nodeType":"YulFunctionCall","src":"14781:15:58"},"nodeType":"YulExpressionStatement","src":"14781:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14816:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14819:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14809:6:58"},"nodeType":"YulFunctionCall","src":"14809:15:58"},"nodeType":"YulExpressionStatement","src":"14809:15:58"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"14649:4:58"},{"name":"x","nodeType":"YulIdentifier","src":"14655:1:58"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14646:2:58"},"nodeType":"YulFunctionCall","src":"14646:11:58"},"nodeType":"YulIf","src":"14643:191:58"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14589:1:58","type":""},{"name":"y","nodeType":"YulTypedName","src":"14592:1:58","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14598:4:58","type":""}],"src":"14558:282:58"},{"body":{"nodeType":"YulBlock","src":"14877:152:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14894:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14897:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14887:6:58"},"nodeType":"YulFunctionCall","src":"14887:88:58"},"nodeType":"YulExpressionStatement","src":"14887:88:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14991:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14994:4:58","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14984:6:58"},"nodeType":"YulFunctionCall","src":"14984:15:58"},"nodeType":"YulExpressionStatement","src":"14984:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15015:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15018:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15008:6:58"},"nodeType":"YulFunctionCall","src":"15008:15:58"},"nodeType":"YulExpressionStatement","src":"15008:15:58"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14845:184:58"},{"body":{"nodeType":"YulBlock","src":"15089:382:58","statements":[{"nodeType":"YulAssignment","src":"15099:22:58","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15113:1:58","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"15116:4:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15109:3:58"},"nodeType":"YulFunctionCall","src":"15109:12:58"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15099:6:58"}]},{"nodeType":"YulVariableDeclaration","src":"15130:38:58","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15160:4:58"},{"kind":"number","nodeType":"YulLiteral","src":"15166:1:58","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15156:3:58"},"nodeType":"YulFunctionCall","src":"15156:12:58"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"15134:18:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"15207:31:58","statements":[{"nodeType":"YulAssignment","src":"15209:27:58","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15223:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"15231:4:58","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15219:3:58"},"nodeType":"YulFunctionCall","src":"15219:17:58"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15209:6:58"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15187:18:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15180:6:58"},"nodeType":"YulFunctionCall","src":"15180:26:58"},"nodeType":"YulIf","src":"15177:61:58"},{"body":{"nodeType":"YulBlock","src":"15297:168:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15318:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15321:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15311:6:58"},"nodeType":"YulFunctionCall","src":"15311:88:58"},"nodeType":"YulExpressionStatement","src":"15311:88:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15419:1:58","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15422:4:58","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15412:6:58"},"nodeType":"YulFunctionCall","src":"15412:15:58"},"nodeType":"YulExpressionStatement","src":"15412:15:58"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15447:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15450:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15440:6:58"},"nodeType":"YulFunctionCall","src":"15440:15:58"},"nodeType":"YulExpressionStatement","src":"15440:15:58"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15253:18:58"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15276:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"15284:2:58","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15273:2:58"},"nodeType":"YulFunctionCall","src":"15273:14:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15250:2:58"},"nodeType":"YulFunctionCall","src":"15250:38:58"},"nodeType":"YulIf","src":"15247:218:58"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15069:4:58","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"15078:6:58","type":""}],"src":"15034:437:58"},{"body":{"nodeType":"YulBlock","src":"15532:65:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15549:1:58","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"15552:3:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15542:6:58"},"nodeType":"YulFunctionCall","src":"15542:14:58"},"nodeType":"YulExpressionStatement","src":"15542:14:58"},{"nodeType":"YulAssignment","src":"15565:26:58","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15583:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15586:4:58","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"15573:9:58"},"nodeType":"YulFunctionCall","src":"15573:18:58"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15565:4:58"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"15515:3:58","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"15523:4:58","type":""}],"src":"15476:121:58"},{"body":{"nodeType":"YulBlock","src":"15683:464:58","statements":[{"body":{"nodeType":"YulBlock","src":"15716:425:58","statements":[{"nodeType":"YulVariableDeclaration","src":"15730:11:58","value":{"kind":"number","nodeType":"YulLiteral","src":"15740:1:58","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15734:2:58","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"15761:2:58"},{"name":"array","nodeType":"YulIdentifier","src":"15765:5:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15754:6:58"},"nodeType":"YulFunctionCall","src":"15754:17:58"},"nodeType":"YulExpressionStatement","src":"15754:17:58"},{"nodeType":"YulVariableDeclaration","src":"15784:31:58","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"15806:2:58"},{"kind":"number","nodeType":"YulLiteral","src":"15810:4:58","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"15796:9:58"},"nodeType":"YulFunctionCall","src":"15796:19:58"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"15788:4:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15828:57:58","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15851:4:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15861:1:58","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"15868:10:58"},{"kind":"number","nodeType":"YulLiteral","src":"15880:2:58","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15864:3:58"},"nodeType":"YulFunctionCall","src":"15864:19:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15857:3:58"},"nodeType":"YulFunctionCall","src":"15857:27:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15847:3:58"},"nodeType":"YulFunctionCall","src":"15847:38:58"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"15832:11:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"15922:23:58","statements":[{"nodeType":"YulAssignment","src":"15924:19:58","value":{"name":"data","nodeType":"YulIdentifier","src":"15939:4:58"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"15924:11:58"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"15904:10:58"},{"kind":"number","nodeType":"YulLiteral","src":"15916:4:58","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15901:2:58"},"nodeType":"YulFunctionCall","src":"15901:20:58"},"nodeType":"YulIf","src":"15898:47:58"},{"nodeType":"YulVariableDeclaration","src":"15958:41:58","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15972:4:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15982:1:58","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"15989:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"15994:2:58","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15985:3:58"},"nodeType":"YulFunctionCall","src":"15985:12:58"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15978:3:58"},"nodeType":"YulFunctionCall","src":"15978:20:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15968:3:58"},"nodeType":"YulFunctionCall","src":"15968:31:58"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"15962:2:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16012:24:58","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"16025:11:58"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"16016:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"16110:21:58","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"16119:5:58"},{"name":"_1","nodeType":"YulIdentifier","src":"16126:2:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16112:6:58"},"nodeType":"YulFunctionCall","src":"16112:17:58"},"nodeType":"YulExpressionStatement","src":"16112:17:58"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"16060:5:58"},{"name":"_2","nodeType":"YulIdentifier","src":"16067:2:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16057:2:58"},"nodeType":"YulFunctionCall","src":"16057:13:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16071:26:58","statements":[{"nodeType":"YulAssignment","src":"16073:22:58","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"16086:5:58"},{"kind":"number","nodeType":"YulLiteral","src":"16093:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16082:3:58"},"nodeType":"YulFunctionCall","src":"16082:13:58"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"16073:5:58"}]}]},"pre":{"nodeType":"YulBlock","src":"16053:3:58","statements":[]},"src":"16049:82:58"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"15699:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"15704:2:58","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15696:2:58"},"nodeType":"YulFunctionCall","src":"15696:11:58"},"nodeType":"YulIf","src":"15693:448:58"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"15655:5:58","type":""},{"name":"len","nodeType":"YulTypedName","src":"15662:3:58","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"15667:10:58","type":""}],"src":"15602:545:58"},{"body":{"nodeType":"YulBlock","src":"16237:141:58","statements":[{"nodeType":"YulAssignment","src":"16247:125:58","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"16262:4:58"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16280:1:58","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"16283:3:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16276:3:58"},"nodeType":"YulFunctionCall","src":"16276:11:58"},{"kind":"number","nodeType":"YulLiteral","src":"16289:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16272:3:58"},"nodeType":"YulFunctionCall","src":"16272:84:58"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16268:3:58"},"nodeType":"YulFunctionCall","src":"16268:89:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16258:3:58"},"nodeType":"YulFunctionCall","src":"16258:100:58"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16364:1:58","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"16367:3:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16360:3:58"},"nodeType":"YulFunctionCall","src":"16360:11:58"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"16255:2:58"},"nodeType":"YulFunctionCall","src":"16255:117:58"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"16247:4:58"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"16214:4:58","type":""},{"name":"len","nodeType":"YulTypedName","src":"16220:3:58","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"16228:4:58","type":""}],"src":"16152:226:58"},{"body":{"nodeType":"YulBlock","src":"16479:1375:58","statements":[{"nodeType":"YulVariableDeclaration","src":"16489:24:58","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16509:3:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16503:5:58"},"nodeType":"YulFunctionCall","src":"16503:10:58"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"16493:6:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"16556:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16558:16:58"},"nodeType":"YulFunctionCall","src":"16558:18:58"},"nodeType":"YulExpressionStatement","src":"16558:18:58"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16528:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"16536:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16525:2:58"},"nodeType":"YulFunctionCall","src":"16525:30:58"},"nodeType":"YulIf","src":"16522:56:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16631:4:58"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16669:4:58"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16663:5:58"},"nodeType":"YulFunctionCall","src":"16663:11:58"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"16637:25:58"},"nodeType":"YulFunctionCall","src":"16637:38:58"},{"name":"newLen","nodeType":"YulIdentifier","src":"16677:6:58"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"16587:43:58"},"nodeType":"YulFunctionCall","src":"16587:97:58"},"nodeType":"YulExpressionStatement","src":"16587:97:58"},{"nodeType":"YulVariableDeclaration","src":"16693:18:58","value":{"kind":"number","nodeType":"YulLiteral","src":"16710:1:58","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"16697:9:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16720:23:58","value":{"kind":"number","nodeType":"YulLiteral","src":"16739:4:58","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"16724:11:58","type":""}]},{"nodeType":"YulAssignment","src":"16752:24:58","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"16765:11:58"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16752:9:58"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16822:775:58","statements":[{"nodeType":"YulVariableDeclaration","src":"16836:94:58","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16855:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"16863:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16851:3:58"},"nodeType":"YulFunctionCall","src":"16851:79:58"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"16840:7:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16943:49:58","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16987:4:58"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"16957:29:58"},"nodeType":"YulFunctionCall","src":"16957:35:58"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"16947:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17005:10:58","value":{"kind":"number","nodeType":"YulLiteral","src":"17014:1:58","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"17009:1:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"17092:172:58","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"17117:6:58"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17135:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"17140:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17131:3:58"},"nodeType":"YulFunctionCall","src":"17131:19:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17125:5:58"},"nodeType":"YulFunctionCall","src":"17125:26:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17110:6:58"},"nodeType":"YulFunctionCall","src":"17110:42:58"},"nodeType":"YulExpressionStatement","src":"17110:42:58"},{"nodeType":"YulAssignment","src":"17169:24:58","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"17183:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"17191:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17179:3:58"},"nodeType":"YulFunctionCall","src":"17179:14:58"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"17169:6:58"}]},{"nodeType":"YulAssignment","src":"17210:40:58","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"17227:9:58"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"17238:11:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17223:3:58"},"nodeType":"YulFunctionCall","src":"17223:27:58"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"17210:9:58"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17039:1:58"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"17042:7:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17036:2:58"},"nodeType":"YulFunctionCall","src":"17036:14:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17051:28:58","statements":[{"nodeType":"YulAssignment","src":"17053:24:58","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17062:1:58"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"17065:11:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17058:3:58"},"nodeType":"YulFunctionCall","src":"17058:19:58"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"17053:1:58"}]}]},"pre":{"nodeType":"YulBlock","src":"17032:3:58","statements":[]},"src":"17028:236:58"},{"body":{"nodeType":"YulBlock","src":"17312:226:58","statements":[{"nodeType":"YulVariableDeclaration","src":"17330:43:58","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17357:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"17362:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17353:3:58"},"nodeType":"YulFunctionCall","src":"17353:19:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17347:5:58"},"nodeType":"YulFunctionCall","src":"17347:26:58"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"17334:9:58","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"17397:6:58"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"17409:9:58"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17436:1:58","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"17439:6:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17432:3:58"},"nodeType":"YulFunctionCall","src":"17432:14:58"},{"kind":"number","nodeType":"YulLiteral","src":"17448:3:58","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17428:3:58"},"nodeType":"YulFunctionCall","src":"17428:24:58"},{"kind":"number","nodeType":"YulLiteral","src":"17454:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17424:3:58"},"nodeType":"YulFunctionCall","src":"17424:97:58"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17420:3:58"},"nodeType":"YulFunctionCall","src":"17420:102:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17405:3:58"},"nodeType":"YulFunctionCall","src":"17405:118:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17390:6:58"},"nodeType":"YulFunctionCall","src":"17390:134:58"},"nodeType":"YulExpressionStatement","src":"17390:134:58"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"17283:7:58"},{"name":"newLen","nodeType":"YulIdentifier","src":"17292:6:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17280:2:58"},"nodeType":"YulFunctionCall","src":"17280:19:58"},"nodeType":"YulIf","src":"17277:261:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"17558:4:58"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17572:1:58","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"17575:6:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17568:3:58"},"nodeType":"YulFunctionCall","src":"17568:14:58"},{"kind":"number","nodeType":"YulLiteral","src":"17584:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17564:3:58"},"nodeType":"YulFunctionCall","src":"17564:22:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17551:6:58"},"nodeType":"YulFunctionCall","src":"17551:36:58"},"nodeType":"YulExpressionStatement","src":"17551:36:58"}]},"nodeType":"YulCase","src":"16815:782:58","value":{"kind":"number","nodeType":"YulLiteral","src":"16820:1:58","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"17614:234:58","statements":[{"nodeType":"YulVariableDeclaration","src":"17628:14:58","value":{"kind":"number","nodeType":"YulLiteral","src":"17641:1:58","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"17632:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"17677:67:58","statements":[{"nodeType":"YulAssignment","src":"17695:35:58","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17714:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"17719:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17710:3:58"},"nodeType":"YulFunctionCall","src":"17710:19:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17704:5:58"},"nodeType":"YulFunctionCall","src":"17704:26:58"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17695:5:58"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"17658:6:58"},"nodeType":"YulIf","src":"17655:89:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"17764:4:58"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17823:5:58"},{"name":"newLen","nodeType":"YulIdentifier","src":"17830:6:58"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"17770:52:58"},"nodeType":"YulFunctionCall","src":"17770:67:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17757:6:58"},"nodeType":"YulFunctionCall","src":"17757:81:58"},"nodeType":"YulExpressionStatement","src":"17757:81:58"}]},"nodeType":"YulCase","src":"17606:242:58","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16795:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"16803:2:58","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16792:2:58"},"nodeType":"YulFunctionCall","src":"16792:14:58"},"nodeType":"YulSwitch","src":"16785:1063:58"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"16464:4:58","type":""},{"name":"src","nodeType":"YulTypedName","src":"16470:3:58","type":""}],"src":"16383:1471:58"},{"body":{"nodeType":"YulBlock","src":"18033:181:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18050:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18061:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18043:6:58"},"nodeType":"YulFunctionCall","src":"18043:21:58"},"nodeType":"YulExpressionStatement","src":"18043:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18084:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18095:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18080:3:58"},"nodeType":"YulFunctionCall","src":"18080:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"18100:2:58","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18073:6:58"},"nodeType":"YulFunctionCall","src":"18073:30:58"},"nodeType":"YulExpressionStatement","src":"18073:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18123:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18134:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18119:3:58"},"nodeType":"YulFunctionCall","src":"18119:18:58"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"18139:33:58","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18112:6:58"},"nodeType":"YulFunctionCall","src":"18112:61:58"},"nodeType":"YulExpressionStatement","src":"18112:61:58"},{"nodeType":"YulAssignment","src":"18182:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18194:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18205:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18190:3:58"},"nodeType":"YulFunctionCall","src":"18190:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18182:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18010:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18024:4:58","type":""}],"src":"17859:355:58"},{"body":{"nodeType":"YulBlock","src":"18393:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18410:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18421:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18403:6:58"},"nodeType":"YulFunctionCall","src":"18403:21:58"},"nodeType":"YulExpressionStatement","src":"18403:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18444:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18455:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18440:3:58"},"nodeType":"YulFunctionCall","src":"18440:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"18460:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18433:6:58"},"nodeType":"YulFunctionCall","src":"18433:30:58"},"nodeType":"YulExpressionStatement","src":"18433:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18483:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18494:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18479:3:58"},"nodeType":"YulFunctionCall","src":"18479:18:58"},{"hexValue":"45524332303a20617070726f76616c20746f2061646472657373283029","kind":"string","nodeType":"YulLiteral","src":"18499:31:58","type":"","value":"ERC20: approval to address(0)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18472:6:58"},"nodeType":"YulFunctionCall","src":"18472:59:58"},"nodeType":"YulExpressionStatement","src":"18472:59:58"},{"nodeType":"YulAssignment","src":"18540:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18552:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18563:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18548:3:58"},"nodeType":"YulFunctionCall","src":"18548:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18540:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18370:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18384:4:58","type":""}],"src":"18219:353:58"},{"body":{"nodeType":"YulBlock","src":"18751:176:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18768:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18779:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18761:6:58"},"nodeType":"YulFunctionCall","src":"18761:21:58"},"nodeType":"YulExpressionStatement","src":"18761:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18802:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18813:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18798:3:58"},"nodeType":"YulFunctionCall","src":"18798:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"18818:2:58","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18791:6:58"},"nodeType":"YulFunctionCall","src":"18791:30:58"},"nodeType":"YulExpressionStatement","src":"18791:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18841:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18852:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18837:3:58"},"nodeType":"YulFunctionCall","src":"18837:18:58"},{"hexValue":"45524332303a20696e636f6e73697374656e7420617272617973","kind":"string","nodeType":"YulLiteral","src":"18857:28:58","type":"","value":"ERC20: inconsistent arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18830:6:58"},"nodeType":"YulFunctionCall","src":"18830:56:58"},"nodeType":"YulExpressionStatement","src":"18830:56:58"},{"nodeType":"YulAssignment","src":"18895:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18907:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"18918:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18903:3:58"},"nodeType":"YulFunctionCall","src":"18903:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18895:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18728:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18742:4:58","type":""}],"src":"18577:350:58"},{"body":{"nodeType":"YulBlock","src":"19106:177:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19123:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19134:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19116:6:58"},"nodeType":"YulFunctionCall","src":"19116:21:58"},"nodeType":"YulExpressionStatement","src":"19116:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19157:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19168:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19153:3:58"},"nodeType":"YulFunctionCall","src":"19153:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"19173:2:58","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19146:6:58"},"nodeType":"YulFunctionCall","src":"19146:30:58"},"nodeType":"YulExpressionStatement","src":"19146:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19196:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19207:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19192:3:58"},"nodeType":"YulFunctionCall","src":"19192:18:58"},{"hexValue":"45524332303a20696e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"19212:29:58","type":"","value":"ERC20: insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19185:6:58"},"nodeType":"YulFunctionCall","src":"19185:57:58"},"nodeType":"YulExpressionStatement","src":"19185:57:58"},{"nodeType":"YulAssignment","src":"19251:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19263:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19274:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19259:3:58"},"nodeType":"YulFunctionCall","src":"19259:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19251:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19083:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19097:4:58","type":""}],"src":"18932:351:58"},{"body":{"nodeType":"YulBlock","src":"19462:174:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19479:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19490:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19472:6:58"},"nodeType":"YulFunctionCall","src":"19472:21:58"},"nodeType":"YulExpressionStatement","src":"19472:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19513:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19524:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19509:3:58"},"nodeType":"YulFunctionCall","src":"19509:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"19529:2:58","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19502:6:58"},"nodeType":"YulFunctionCall","src":"19502:30:58"},"nodeType":"YulExpressionStatement","src":"19502:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19552:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19563:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19548:3:58"},"nodeType":"YulFunctionCall","src":"19548:18:58"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"19568:26:58","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19541:6:58"},"nodeType":"YulFunctionCall","src":"19541:54:58"},"nodeType":"YulExpressionStatement","src":"19541:54:58"},{"nodeType":"YulAssignment","src":"19604:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19616:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19627:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19612:3:58"},"nodeType":"YulFunctionCall","src":"19612:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19604:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19439:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19453:4:58","type":""}],"src":"19288:348:58"},{"body":{"nodeType":"YulBlock","src":"19798:241:58","statements":[{"nodeType":"YulAssignment","src":"19808:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19820:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19831:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19816:3:58"},"nodeType":"YulFunctionCall","src":"19816:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19808:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19850:9:58"},{"name":"value0","nodeType":"YulIdentifier","src":"19861:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19843:6:58"},"nodeType":"YulFunctionCall","src":"19843:25:58"},"nodeType":"YulExpressionStatement","src":"19843:25:58"},{"nodeType":"YulVariableDeclaration","src":"19877:52:58","value":{"kind":"number","nodeType":"YulLiteral","src":"19887:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19881:2:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19949:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"19960:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19945:3:58"},"nodeType":"YulFunctionCall","src":"19945:18:58"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19969:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"19977:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19965:3:58"},"nodeType":"YulFunctionCall","src":"19965:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19938:6:58"},"nodeType":"YulFunctionCall","src":"19938:43:58"},"nodeType":"YulExpressionStatement","src":"19938:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20001:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20012:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19997:3:58"},"nodeType":"YulFunctionCall","src":"19997:18:58"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20021:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"20029:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20017:3:58"},"nodeType":"YulFunctionCall","src":"20017:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19990:6:58"},"nodeType":"YulFunctionCall","src":"19990:43:58"},"nodeType":"YulExpressionStatement","src":"19990:43:58"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19751:9:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19762:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19770:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19778:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19789:4:58","type":""}],"src":"19641:398:58"},{"body":{"nodeType":"YulBlock","src":"20257:299:58","statements":[{"nodeType":"YulAssignment","src":"20267:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20279:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20290:3:58","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20275:3:58"},"nodeType":"YulFunctionCall","src":"20275:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20267:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20310:9:58"},{"name":"value0","nodeType":"YulIdentifier","src":"20321:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20303:6:58"},"nodeType":"YulFunctionCall","src":"20303:25:58"},"nodeType":"YulExpressionStatement","src":"20303:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20348:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20359:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20344:3:58"},"nodeType":"YulFunctionCall","src":"20344:18:58"},{"name":"value1","nodeType":"YulIdentifier","src":"20364:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20337:6:58"},"nodeType":"YulFunctionCall","src":"20337:34:58"},"nodeType":"YulExpressionStatement","src":"20337:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20391:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20402:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20387:3:58"},"nodeType":"YulFunctionCall","src":"20387:18:58"},{"name":"value2","nodeType":"YulIdentifier","src":"20407:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20380:6:58"},"nodeType":"YulFunctionCall","src":"20380:34:58"},"nodeType":"YulExpressionStatement","src":"20380:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20434:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20445:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20430:3:58"},"nodeType":"YulFunctionCall","src":"20430:18:58"},{"name":"value3","nodeType":"YulIdentifier","src":"20450:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20423:6:58"},"nodeType":"YulFunctionCall","src":"20423:34:58"},"nodeType":"YulExpressionStatement","src":"20423:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20477:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20488:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20473:3:58"},"nodeType":"YulFunctionCall","src":"20473:19:58"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"20498:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"20506:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20494:3:58"},"nodeType":"YulFunctionCall","src":"20494:55:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20466:6:58"},"nodeType":"YulFunctionCall","src":"20466:84:58"},"nodeType":"YulExpressionStatement","src":"20466:84:58"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20194:9:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"20205:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"20213:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20221:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20229:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20237:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20248:4:58","type":""}],"src":"20044:512:58"},{"body":{"nodeType":"YulBlock","src":"20735:175:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20752:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20763:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20745:6:58"},"nodeType":"YulFunctionCall","src":"20745:21:58"},"nodeType":"YulExpressionStatement","src":"20745:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20786:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20797:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20782:3:58"},"nodeType":"YulFunctionCall","src":"20782:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"20802:2:58","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20775:6:58"},"nodeType":"YulFunctionCall","src":"20775:30:58"},"nodeType":"YulExpressionStatement","src":"20775:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20825:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20836:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20821:3:58"},"nodeType":"YulFunctionCall","src":"20821:18:58"},{"hexValue":"45524332303a20616c6c6f77616e6365206f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"20841:27:58","type":"","value":"ERC20: allowance overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20814:6:58"},"nodeType":"YulFunctionCall","src":"20814:55:58"},"nodeType":"YulExpressionStatement","src":"20814:55:58"},{"nodeType":"YulAssignment","src":"20878:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20890:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"20901:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20886:3:58"},"nodeType":"YulFunctionCall","src":"20886:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20878:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_357f75c7f4cdbe2492cf8e424be0b1f3fbf884416a3c5ab251c16e149296f9be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20712:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20726:4:58","type":""}],"src":"20561:349:58"},{"body":{"nodeType":"YulBlock","src":"21256:275:58","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21273:3:58"},{"hexValue":"416363657373436f6e74726f6c3a206d697373696e672027","kind":"string","nodeType":"YulLiteral","src":"21278:26:58","type":"","value":"AccessControl: missing '"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21266:6:58"},"nodeType":"YulFunctionCall","src":"21266:39:58"},"nodeType":"YulExpressionStatement","src":"21266:39:58"},{"nodeType":"YulVariableDeclaration","src":"21314:27:58","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21334:6:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21328:5:58"},"nodeType":"YulFunctionCall","src":"21328:13:58"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"21318:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21389:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"21397:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21385:3:58"},"nodeType":"YulFunctionCall","src":"21385:17:58"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21408:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"21413:2:58","type":"","value":"24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21404:3:58"},"nodeType":"YulFunctionCall","src":"21404:12:58"},{"name":"length","nodeType":"YulIdentifier","src":"21418:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"21350:34:58"},"nodeType":"YulFunctionCall","src":"21350:75:58"},"nodeType":"YulExpressionStatement","src":"21350:75:58"},{"nodeType":"YulVariableDeclaration","src":"21434:26:58","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21448:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"21453:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21444:3:58"},"nodeType":"YulFunctionCall","src":"21444:16:58"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21438:2:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"21480:2:58"},{"kind":"number","nodeType":"YulLiteral","src":"21484:2:58","type":"","value":"24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21476:3:58"},"nodeType":"YulFunctionCall","src":"21476:11:58"},{"hexValue":"2720726f6c65","kind":"string","nodeType":"YulLiteral","src":"21489:8:58","type":"","value":"' role"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21469:6:58"},"nodeType":"YulFunctionCall","src":"21469:29:58"},"nodeType":"YulExpressionStatement","src":"21469:29:58"},{"nodeType":"YulAssignment","src":"21507:18:58","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"21518:2:58"},{"kind":"number","nodeType":"YulLiteral","src":"21522:2:58","type":"","value":"30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21514:3:58"},"nodeType":"YulFunctionCall","src":"21514:11:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21507:3:58"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_t_string_memory_ptr_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21232:3:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21237:6:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21248:3:58","type":""}],"src":"20915:616:58"},{"body":{"nodeType":"YulBlock","src":"21710:175:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21727:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"21738:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21720:6:58"},"nodeType":"YulFunctionCall","src":"21720:21:58"},"nodeType":"YulExpressionStatement","src":"21720:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21761:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"21772:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21757:3:58"},"nodeType":"YulFunctionCall","src":"21757:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"21777:2:58","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21750:6:58"},"nodeType":"YulFunctionCall","src":"21750:30:58"},"nodeType":"YulExpressionStatement","src":"21750:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21800:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"21811:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21796:3:58"},"nodeType":"YulFunctionCall","src":"21796:18:58"},{"hexValue":"45524332303a206d696e7420746f2061646472657373283029","kind":"string","nodeType":"YulLiteral","src":"21816:27:58","type":"","value":"ERC20: mint to address(0)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21789:6:58"},"nodeType":"YulFunctionCall","src":"21789:55:58"},"nodeType":"YulExpressionStatement","src":"21789:55:58"},{"nodeType":"YulAssignment","src":"21853:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21865:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"21876:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21861:3:58"},"nodeType":"YulFunctionCall","src":"21861:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21853:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_32cace037c0659d6f07eeb77b1740914591f2b0927e7b227d741fbb03823b40d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21687:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21701:4:58","type":""}],"src":"21536:349:58"},{"body":{"nodeType":"YulBlock","src":"22064:172:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22081:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22092:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22074:6:58"},"nodeType":"YulFunctionCall","src":"22074:21:58"},"nodeType":"YulExpressionStatement","src":"22074:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22115:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22126:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22111:3:58"},"nodeType":"YulFunctionCall","src":"22111:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"22131:2:58","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22104:6:58"},"nodeType":"YulFunctionCall","src":"22104:30:58"},"nodeType":"YulExpressionStatement","src":"22104:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22154:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22165:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22150:3:58"},"nodeType":"YulFunctionCall","src":"22150:18:58"},{"hexValue":"45524332303a20737570706c79206f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"22170:24:58","type":"","value":"ERC20: supply overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22143:6:58"},"nodeType":"YulFunctionCall","src":"22143:52:58"},"nodeType":"YulExpressionStatement","src":"22143:52:58"},{"nodeType":"YulAssignment","src":"22204:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22216:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22227:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22212:3:58"},"nodeType":"YulFunctionCall","src":"22212:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22204:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_555ebf03264be25a26b5120044887f13a64477e19db4facbaaee717abfa82472__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22041:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22055:4:58","type":""}],"src":"21890:346:58"},{"body":{"nodeType":"YulBlock","src":"22415:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22432:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22443:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22425:6:58"},"nodeType":"YulFunctionCall","src":"22425:21:58"},"nodeType":"YulExpressionStatement","src":"22425:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22466:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22477:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22462:3:58"},"nodeType":"YulFunctionCall","src":"22462:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"22482:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22455:6:58"},"nodeType":"YulFunctionCall","src":"22455:30:58"},"nodeType":"YulExpressionStatement","src":"22455:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22505:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22516:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22501:3:58"},"nodeType":"YulFunctionCall","src":"22501:18:58"},{"hexValue":"45524332303a207472616e7366657220746f2061646472657373283029","kind":"string","nodeType":"YulLiteral","src":"22521:31:58","type":"","value":"ERC20: transfer to address(0)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22494:6:58"},"nodeType":"YulFunctionCall","src":"22494:59:58"},"nodeType":"YulExpressionStatement","src":"22494:59:58"},{"nodeType":"YulAssignment","src":"22562:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22574:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22585:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22570:3:58"},"nodeType":"YulFunctionCall","src":"22570:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22562:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22392:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22406:4:58","type":""}],"src":"22241:353:58"},{"body":{"nodeType":"YulBlock","src":"22773:172:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22790:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22801:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22783:6:58"},"nodeType":"YulFunctionCall","src":"22783:21:58"},"nodeType":"YulExpressionStatement","src":"22783:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22824:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22835:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22820:3:58"},"nodeType":"YulFunctionCall","src":"22820:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"22840:2:58","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22813:6:58"},"nodeType":"YulFunctionCall","src":"22813:30:58"},"nodeType":"YulExpressionStatement","src":"22813:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22863:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22874:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22859:3:58"},"nodeType":"YulFunctionCall","src":"22859:18:58"},{"hexValue":"45524332303a2076616c756573206f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"22879:24:58","type":"","value":"ERC20: values overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22852:6:58"},"nodeType":"YulFunctionCall","src":"22852:52:58"},"nodeType":"YulExpressionStatement","src":"22852:52:58"},{"nodeType":"YulAssignment","src":"22913:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22925:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"22936:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22921:3:58"},"nodeType":"YulFunctionCall","src":"22921:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22913:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22750:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22764:4:58","type":""}],"src":"22599:346:58"},{"body":{"nodeType":"YulBlock","src":"23079:168:58","statements":[{"nodeType":"YulAssignment","src":"23089:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23101:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23112:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23097:3:58"},"nodeType":"YulFunctionCall","src":"23097:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23089:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23131:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23146:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"23154:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23142:3:58"},"nodeType":"YulFunctionCall","src":"23142:55:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23124:6:58"},"nodeType":"YulFunctionCall","src":"23124:74:58"},"nodeType":"YulExpressionStatement","src":"23124:74:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23218:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23229:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23214:3:58"},"nodeType":"YulFunctionCall","src":"23214:18:58"},{"name":"value1","nodeType":"YulIdentifier","src":"23234:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23207:6:58"},"nodeType":"YulFunctionCall","src":"23207:34:58"},"nodeType":"YulExpressionStatement","src":"23207:34:58"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23040:9:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23051:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23059:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23070:4:58","type":""}],"src":"22950:297:58"},{"body":{"nodeType":"YulBlock","src":"23426:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23443:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23454:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23436:6:58"},"nodeType":"YulFunctionCall","src":"23436:21:58"},"nodeType":"YulExpressionStatement","src":"23436:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23477:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23488:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23473:3:58"},"nodeType":"YulFunctionCall","src":"23473:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"23493:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23466:6:58"},"nodeType":"YulFunctionCall","src":"23466:30:58"},"nodeType":"YulExpressionStatement","src":"23466:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23516:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23527:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23512:3:58"},"nodeType":"YulFunctionCall","src":"23512:18:58"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"23532:31:58","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23505:6:58"},"nodeType":"YulFunctionCall","src":"23505:59:58"},"nodeType":"YulExpressionStatement","src":"23505:59:58"},{"nodeType":"YulAssignment","src":"23573:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23585:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23596:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23581:3:58"},"nodeType":"YulFunctionCall","src":"23581:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23573:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23403:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23417:4:58","type":""}],"src":"23252:353:58"},{"body":{"nodeType":"YulBlock","src":"23784:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23801:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23812:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23794:6:58"},"nodeType":"YulFunctionCall","src":"23794:21:58"},"nodeType":"YulExpressionStatement","src":"23794:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23835:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23846:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23831:3:58"},"nodeType":"YulFunctionCall","src":"23831:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"23851:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23824:6:58"},"nodeType":"YulFunctionCall","src":"23824:30:58"},"nodeType":"YulExpressionStatement","src":"23824:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23874:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23885:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23870:3:58"},"nodeType":"YulFunctionCall","src":"23870:18:58"},{"hexValue":"45524332303a207065726d69742066726f6d2061646472657373283029","kind":"string","nodeType":"YulLiteral","src":"23890:31:58","type":"","value":"ERC20: permit from address(0)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23863:6:58"},"nodeType":"YulFunctionCall","src":"23863:59:58"},"nodeType":"YulExpressionStatement","src":"23863:59:58"},{"nodeType":"YulAssignment","src":"23931:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23943:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"23954:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23939:3:58"},"nodeType":"YulFunctionCall","src":"23939:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23931:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_3a6dd7da9592c148a3c1346620b226302bc667b6fd5e83c82aa507db666797af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23761:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23775:4:58","type":""}],"src":"23610:353:58"},{"body":{"nodeType":"YulBlock","src":"24142:171:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24159:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24170:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24152:6:58"},"nodeType":"YulFunctionCall","src":"24152:21:58"},"nodeType":"YulExpressionStatement","src":"24152:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24193:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24204:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24189:3:58"},"nodeType":"YulFunctionCall","src":"24189:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"24209:2:58","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24182:6:58"},"nodeType":"YulFunctionCall","src":"24182:30:58"},"nodeType":"YulExpressionStatement","src":"24182:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24232:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24243:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24228:3:58"},"nodeType":"YulFunctionCall","src":"24228:18:58"},{"hexValue":"45524332303a2065787069726564207065726d6974","kind":"string","nodeType":"YulLiteral","src":"24248:23:58","type":"","value":"ERC20: expired permit"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24221:6:58"},"nodeType":"YulFunctionCall","src":"24221:51:58"},"nodeType":"YulExpressionStatement","src":"24221:51:58"},{"nodeType":"YulAssignment","src":"24281:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24293:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24304:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24289:3:58"},"nodeType":"YulFunctionCall","src":"24289:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24281:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ac59a98b6fe7e99399c85395b7df87e761b25e505bace1750860cfaa1803c24__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24119:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24133:4:58","type":""}],"src":"23968:345:58"},{"body":{"nodeType":"YulBlock","src":"24559:373:58","statements":[{"nodeType":"YulAssignment","src":"24569:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24581:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24592:3:58","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24577:3:58"},"nodeType":"YulFunctionCall","src":"24577:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24569:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24612:9:58"},{"name":"value0","nodeType":"YulIdentifier","src":"24623:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24605:6:58"},"nodeType":"YulFunctionCall","src":"24605:25:58"},"nodeType":"YulExpressionStatement","src":"24605:25:58"},{"nodeType":"YulVariableDeclaration","src":"24639:52:58","value":{"kind":"number","nodeType":"YulLiteral","src":"24649:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24643:2:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24711:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24722:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24707:3:58"},"nodeType":"YulFunctionCall","src":"24707:18:58"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24731:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"24739:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24727:3:58"},"nodeType":"YulFunctionCall","src":"24727:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24700:6:58"},"nodeType":"YulFunctionCall","src":"24700:43:58"},"nodeType":"YulExpressionStatement","src":"24700:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24763:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24774:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24759:3:58"},"nodeType":"YulFunctionCall","src":"24759:18:58"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24783:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"24791:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24779:3:58"},"nodeType":"YulFunctionCall","src":"24779:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24752:6:58"},"nodeType":"YulFunctionCall","src":"24752:43:58"},"nodeType":"YulExpressionStatement","src":"24752:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24815:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24826:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24811:3:58"},"nodeType":"YulFunctionCall","src":"24811:18:58"},{"name":"value3","nodeType":"YulIdentifier","src":"24831:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24804:6:58"},"nodeType":"YulFunctionCall","src":"24804:34:58"},"nodeType":"YulExpressionStatement","src":"24804:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24858:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24869:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24854:3:58"},"nodeType":"YulFunctionCall","src":"24854:19:58"},{"name":"value4","nodeType":"YulIdentifier","src":"24875:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24847:6:58"},"nodeType":"YulFunctionCall","src":"24847:35:58"},"nodeType":"YulExpressionStatement","src":"24847:35:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24902:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"24913:3:58","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24898:3:58"},"nodeType":"YulFunctionCall","src":"24898:19:58"},{"name":"value5","nodeType":"YulIdentifier","src":"24919:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24891:6:58"},"nodeType":"YulFunctionCall","src":"24891:35:58"},"nodeType":"YulExpressionStatement","src":"24891:35:58"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24488:9:58","type":""},{"name":"value5","nodeType":"YulTypedName","src":"24499:6:58","type":""},{"name":"value4","nodeType":"YulTypedName","src":"24507:6:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"24515:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24523:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24531:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24539:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24550:4:58","type":""}],"src":"24318:614:58"},{"body":{"nodeType":"YulBlock","src":"25185:196:58","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25202:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"25207:66:58","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25195:6:58"},"nodeType":"YulFunctionCall","src":"25195:79:58"},"nodeType":"YulExpressionStatement","src":"25195:79:58"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25294:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"25299:1:58","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25290:3:58"},"nodeType":"YulFunctionCall","src":"25290:11:58"},{"name":"value0","nodeType":"YulIdentifier","src":"25303:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25283:6:58"},"nodeType":"YulFunctionCall","src":"25283:27:58"},"nodeType":"YulExpressionStatement","src":"25283:27:58"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25330:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"25335:2:58","type":"","value":"34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25326:3:58"},"nodeType":"YulFunctionCall","src":"25326:12:58"},{"name":"value1","nodeType":"YulIdentifier","src":"25340:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25319:6:58"},"nodeType":"YulFunctionCall","src":"25319:28:58"},"nodeType":"YulExpressionStatement","src":"25319:28:58"},{"nodeType":"YulAssignment","src":"25356:19:58","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25367:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"25372:2:58","type":"","value":"66"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25363:3:58"},"nodeType":"YulFunctionCall","src":"25363:12:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25356:3:58"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25153:3:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25158:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25166:6:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25177:3:58","type":""}],"src":"24937:444:58"},{"body":{"nodeType":"YulBlock","src":"25567:217:58","statements":[{"nodeType":"YulAssignment","src":"25577:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25589:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"25600:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25585:3:58"},"nodeType":"YulFunctionCall","src":"25585:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25577:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25620:9:58"},{"name":"value0","nodeType":"YulIdentifier","src":"25631:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25613:6:58"},"nodeType":"YulFunctionCall","src":"25613:25:58"},"nodeType":"YulExpressionStatement","src":"25613:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25658:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"25669:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25654:3:58"},"nodeType":"YulFunctionCall","src":"25654:18:58"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25678:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"25686:4:58","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25674:3:58"},"nodeType":"YulFunctionCall","src":"25674:17:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25647:6:58"},"nodeType":"YulFunctionCall","src":"25647:45:58"},"nodeType":"YulExpressionStatement","src":"25647:45:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25712:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"25723:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25708:3:58"},"nodeType":"YulFunctionCall","src":"25708:18:58"},{"name":"value2","nodeType":"YulIdentifier","src":"25728:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25701:6:58"},"nodeType":"YulFunctionCall","src":"25701:34:58"},"nodeType":"YulExpressionStatement","src":"25701:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25755:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"25766:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25751:3:58"},"nodeType":"YulFunctionCall","src":"25751:18:58"},{"name":"value3","nodeType":"YulIdentifier","src":"25771:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25744:6:58"},"nodeType":"YulFunctionCall","src":"25744:34:58"},"nodeType":"YulExpressionStatement","src":"25744:34:58"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25512:9:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"25523:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"25531:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25539:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25547:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25558:4:58","type":""}],"src":"25386:398:58"},{"body":{"nodeType":"YulBlock","src":"25963:171:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25980:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"25991:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25973:6:58"},"nodeType":"YulFunctionCall","src":"25973:21:58"},"nodeType":"YulExpressionStatement","src":"25973:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26014:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"26025:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26010:3:58"},"nodeType":"YulFunctionCall","src":"26010:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"26030:2:58","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26003:6:58"},"nodeType":"YulFunctionCall","src":"26003:30:58"},"nodeType":"YulExpressionStatement","src":"26003:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26053:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"26064:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26049:3:58"},"nodeType":"YulFunctionCall","src":"26049:18:58"},{"hexValue":"45524332303a20696e76616c6964207065726d6974","kind":"string","nodeType":"YulLiteral","src":"26069:23:58","type":"","value":"ERC20: invalid permit"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26042:6:58"},"nodeType":"YulFunctionCall","src":"26042:51:58"},"nodeType":"YulExpressionStatement","src":"26042:51:58"},{"nodeType":"YulAssignment","src":"26102:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26114:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"26125:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26110:3:58"},"nodeType":"YulFunctionCall","src":"26110:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26102:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_7e7a3a2e3040cbfa3c00db0248b72c5f4c00492e57a5353baf25410416702f76__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25940:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25954:4:58","type":""}],"src":"25789:345:58"},{"body":{"nodeType":"YulBlock","src":"26242:1222:58","statements":[{"body":{"nodeType":"YulBlock","src":"26283:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"26285:16:58"},"nodeType":"YulFunctionCall","src":"26285:18:58"},"nodeType":"YulExpressionStatement","src":"26285:18:58"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"26258:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"26263:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26255:2:58"},"nodeType":"YulFunctionCall","src":"26255:27:58"},"nodeType":"YulIf","src":"26252:53:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26358:4:58"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26396:4:58"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"26390:5:58"},"nodeType":"YulFunctionCall","src":"26390:11:58"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"26364:25:58"},"nodeType":"YulFunctionCall","src":"26364:38:58"},{"name":"len","nodeType":"YulIdentifier","src":"26404:3:58"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"26314:43:58"},"nodeType":"YulFunctionCall","src":"26314:94:58"},"nodeType":"YulExpressionStatement","src":"26314:94:58"},{"nodeType":"YulVariableDeclaration","src":"26417:18:58","value":{"kind":"number","nodeType":"YulLiteral","src":"26434:1:58","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"26421:9:58","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"26478:728:58","statements":[{"nodeType":"YulVariableDeclaration","src":"26492:91:58","value":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"26511:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"26516:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26507:3:58"},"nodeType":"YulFunctionCall","src":"26507:76:58"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"26496:7:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26596:49:58","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26640:4:58"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"26610:29:58"},"nodeType":"YulFunctionCall","src":"26610:35:58"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"26600:6:58","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26658:18:58","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"26667:9:58"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"26662:1:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"26746:172:58","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26771:6:58"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26796:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"26801:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26792:3:58"},"nodeType":"YulFunctionCall","src":"26792:19:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"26779:12:58"},"nodeType":"YulFunctionCall","src":"26779:33:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"26764:6:58"},"nodeType":"YulFunctionCall","src":"26764:49:58"},"nodeType":"YulExpressionStatement","src":"26764:49:58"},{"nodeType":"YulAssignment","src":"26830:24:58","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26844:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"26852:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26840:3:58"},"nodeType":"YulFunctionCall","src":"26840:14:58"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26830:6:58"}]},{"nodeType":"YulAssignment","src":"26871:33:58","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"26888:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"26899:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26884:3:58"},"nodeType":"YulFunctionCall","src":"26884:20:58"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"26871:9:58"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"26700:1:58"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"26703:7:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26697:2:58"},"nodeType":"YulFunctionCall","src":"26697:14:58"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"26712:21:58","statements":[{"nodeType":"YulAssignment","src":"26714:17:58","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"26723:1:58"},{"kind":"number","nodeType":"YulLiteral","src":"26726:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26719:3:58"},"nodeType":"YulFunctionCall","src":"26719:12:58"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"26714:1:58"}]}]},"pre":{"nodeType":"YulBlock","src":"26693:3:58","statements":[]},"src":"26689:229:58"},{"body":{"nodeType":"YulBlock","src":"26963:187:58","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"26988:6:58"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27017:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"27022:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27013:3:58"},"nodeType":"YulFunctionCall","src":"27013:19:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"27000:12:58"},"nodeType":"YulFunctionCall","src":"27000:33:58"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27051:1:58","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"27054:3:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"27047:3:58"},"nodeType":"YulFunctionCall","src":"27047:11:58"},{"kind":"number","nodeType":"YulLiteral","src":"27060:3:58","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27043:3:58"},"nodeType":"YulFunctionCall","src":"27043:21:58"},{"kind":"number","nodeType":"YulLiteral","src":"27066:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"27039:3:58"},"nodeType":"YulFunctionCall","src":"27039:94:58"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27035:3:58"},"nodeType":"YulFunctionCall","src":"27035:99:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26996:3:58"},"nodeType":"YulFunctionCall","src":"26996:139:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"26981:6:58"},"nodeType":"YulFunctionCall","src":"26981:155:58"},"nodeType":"YulExpressionStatement","src":"26981:155:58"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"26937:7:58"},{"name":"len","nodeType":"YulIdentifier","src":"26946:3:58"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26934:2:58"},"nodeType":"YulFunctionCall","src":"26934:16:58"},"nodeType":"YulIf","src":"26931:219:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27170:4:58"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27184:1:58","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"27187:3:58"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"27180:3:58"},"nodeType":"YulFunctionCall","src":"27180:11:58"},{"kind":"number","nodeType":"YulLiteral","src":"27193:1:58","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27176:3:58"},"nodeType":"YulFunctionCall","src":"27176:19:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27163:6:58"},"nodeType":"YulFunctionCall","src":"27163:33:58"},"nodeType":"YulExpressionStatement","src":"27163:33:58"}]},"nodeType":"YulCase","src":"26471:735:58","value":{"kind":"number","nodeType":"YulLiteral","src":"26476:1:58","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"27223:235:58","statements":[{"nodeType":"YulVariableDeclaration","src":"27237:14:58","value":{"kind":"number","nodeType":"YulLiteral","src":"27250:1:58","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"27241:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"27283:74:58","statements":[{"nodeType":"YulAssignment","src":"27301:42:58","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27327:3:58"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"27332:9:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27323:3:58"},"nodeType":"YulFunctionCall","src":"27323:19:58"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"27310:12:58"},"nodeType":"YulFunctionCall","src":"27310:33:58"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27301:5:58"}]}]},"condition":{"name":"len","nodeType":"YulIdentifier","src":"27267:3:58"},"nodeType":"YulIf","src":"27264:93:58"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27377:4:58"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27436:5:58"},{"name":"len","nodeType":"YulIdentifier","src":"27443:3:58"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"27383:52:58"},"nodeType":"YulFunctionCall","src":"27383:64:58"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27370:6:58"},"nodeType":"YulFunctionCall","src":"27370:78:58"},"nodeType":"YulExpressionStatement","src":"27370:78:58"}]},"nodeType":"YulCase","src":"27215:243:58","value":"default"}],"expression":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"26454:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"26459:2:58","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26451:2:58"},"nodeType":"YulFunctionCall","src":"26451:11:58"},"nodeType":"YulSwitch","src":"26444:1014:58"}]},"name":"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"26222:4:58","type":""},{"name":"src","nodeType":"YulTypedName","src":"26228:3:58","type":""},{"name":"len","nodeType":"YulTypedName","src":"26233:3:58","type":""}],"src":"26139:1325:58"},{"body":{"nodeType":"YulBlock","src":"27643:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27660:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"27671:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27653:6:58"},"nodeType":"YulFunctionCall","src":"27653:21:58"},"nodeType":"YulExpressionStatement","src":"27653:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27694:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"27705:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27690:3:58"},"nodeType":"YulFunctionCall","src":"27690:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"27710:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27683:6:58"},"nodeType":"YulFunctionCall","src":"27683:30:58"},"nodeType":"YulExpressionStatement","src":"27683:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27733:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"27744:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27729:3:58"},"nodeType":"YulFunctionCall","src":"27729:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"27749:31:58","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27722:6:58"},"nodeType":"YulFunctionCall","src":"27722:59:58"},"nodeType":"YulExpressionStatement","src":"27722:59:58"},{"nodeType":"YulAssignment","src":"27790:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27802:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"27813:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27798:3:58"},"nodeType":"YulFunctionCall","src":"27798:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27790:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27620:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27634:4:58","type":""}],"src":"27469:353:58"},{"body":{"nodeType":"YulBlock","src":"28018:14:58","statements":[{"nodeType":"YulAssignment","src":"28020:10:58","value":{"name":"pos","nodeType":"YulIdentifier","src":"28027:3:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28020:3:58"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28002:3:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28010:3:58","type":""}],"src":"27827:205:58"},{"body":{"nodeType":"YulBlock","src":"28211:248:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28228:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"28239:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28221:6:58"},"nodeType":"YulFunctionCall","src":"28221:21:58"},"nodeType":"YulExpressionStatement","src":"28221:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28262:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"28273:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28258:3:58"},"nodeType":"YulFunctionCall","src":"28258:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"28278:2:58","type":"","value":"58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28251:6:58"},"nodeType":"YulFunctionCall","src":"28251:30:58"},"nodeType":"YulExpressionStatement","src":"28251:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28301:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"28312:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28297:3:58"},"nodeType":"YulFunctionCall","src":"28297:18:58"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nodeType":"YulLiteral","src":"28317:34:58","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28290:6:58"},"nodeType":"YulFunctionCall","src":"28290:62:58"},"nodeType":"YulExpressionStatement","src":"28290:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28372:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"28383:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28368:3:58"},"nodeType":"YulFunctionCall","src":"28368:18:58"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nodeType":"YulLiteral","src":"28388:28:58","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28361:6:58"},"nodeType":"YulFunctionCall","src":"28361:56:58"},"nodeType":"YulExpressionStatement","src":"28361:56:58"},{"nodeType":"YulAssignment","src":"28426:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28438:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"28449:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28434:3:58"},"nodeType":"YulFunctionCall","src":"28434:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28426:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28188:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28202:4:58","type":""}],"src":"28037:422:58"},{"body":{"nodeType":"YulBlock","src":"28593:198:58","statements":[{"nodeType":"YulAssignment","src":"28603:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28615:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"28626:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28611:3:58"},"nodeType":"YulFunctionCall","src":"28611:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28603:4:58"}]},{"nodeType":"YulVariableDeclaration","src":"28638:52:58","value":{"kind":"number","nodeType":"YulLiteral","src":"28648:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"28642:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28706:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28721:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"28729:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28717:3:58"},"nodeType":"YulFunctionCall","src":"28717:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28699:6:58"},"nodeType":"YulFunctionCall","src":"28699:34:58"},"nodeType":"YulExpressionStatement","src":"28699:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28753:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"28764:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28749:3:58"},"nodeType":"YulFunctionCall","src":"28749:18:58"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28773:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"28781:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28769:3:58"},"nodeType":"YulFunctionCall","src":"28769:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28742:6:58"},"nodeType":"YulFunctionCall","src":"28742:43:58"},"nodeType":"YulExpressionStatement","src":"28742:43:58"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28554:9:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28565:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28573:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28584:4:58","type":""}],"src":"28464:327:58"},{"body":{"nodeType":"YulBlock","src":"28874:199:58","statements":[{"body":{"nodeType":"YulBlock","src":"28920:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28929:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28932:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28922:6:58"},"nodeType":"YulFunctionCall","src":"28922:12:58"},"nodeType":"YulExpressionStatement","src":"28922:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"28895:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"28904:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28891:3:58"},"nodeType":"YulFunctionCall","src":"28891:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"28916:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"28887:3:58"},"nodeType":"YulFunctionCall","src":"28887:32:58"},"nodeType":"YulIf","src":"28884:52:58"},{"nodeType":"YulVariableDeclaration","src":"28945:29:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28964:9:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28958:5:58"},"nodeType":"YulFunctionCall","src":"28958:16:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"28949:5:58","type":""}]},{"body":{"nodeType":"YulBlock","src":"29027:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29036:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29039:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29029:6:58"},"nodeType":"YulFunctionCall","src":"29029:12:58"},"nodeType":"YulExpressionStatement","src":"29029:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28996:5:58"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29017:5:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29010:6:58"},"nodeType":"YulFunctionCall","src":"29010:13:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29003:6:58"},"nodeType":"YulFunctionCall","src":"29003:21:58"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28993:2:58"},"nodeType":"YulFunctionCall","src":"28993:32:58"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28986:6:58"},"nodeType":"YulFunctionCall","src":"28986:40:58"},"nodeType":"YulIf","src":"28983:60:58"},{"nodeType":"YulAssignment","src":"29052:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"29062:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"29052:6:58"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28840:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"28851:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"28863:6:58","type":""}],"src":"28796:277:58"},{"body":{"nodeType":"YulBlock","src":"29197:63:58","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29214:3:58"},{"name":"value0","nodeType":"YulIdentifier","src":"29219:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29207:6:58"},"nodeType":"YulFunctionCall","src":"29207:19:58"},"nodeType":"YulExpressionStatement","src":"29207:19:58"},{"nodeType":"YulAssignment","src":"29235:19:58","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29246:3:58"},{"kind":"number","nodeType":"YulLiteral","src":"29251:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29242:3:58"},"nodeType":"YulFunctionCall","src":"29242:12:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29235:3:58"}]}]},"name":"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29173:3:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29178:6:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29189:3:58","type":""}],"src":"29078:182:58"},{"body":{"nodeType":"YulBlock","src":"29439:232:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29456:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"29467:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29449:6:58"},"nodeType":"YulFunctionCall","src":"29449:21:58"},"nodeType":"YulExpressionStatement","src":"29449:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29490:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"29501:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29486:3:58"},"nodeType":"YulFunctionCall","src":"29486:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"29506:2:58","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29479:6:58"},"nodeType":"YulFunctionCall","src":"29479:30:58"},"nodeType":"YulExpressionStatement","src":"29479:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29529:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"29540:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29525:3:58"},"nodeType":"YulFunctionCall","src":"29525:18:58"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"29545:34:58","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29518:6:58"},"nodeType":"YulFunctionCall","src":"29518:62:58"},"nodeType":"YulExpressionStatement","src":"29518:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29600:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"29611:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29596:3:58"},"nodeType":"YulFunctionCall","src":"29596:18:58"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"29616:12:58","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29589:6:58"},"nodeType":"YulFunctionCall","src":"29589:40:58"},"nodeType":"YulExpressionStatement","src":"29589:40:58"},{"nodeType":"YulAssignment","src":"29638:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29650:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"29661:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29646:3:58"},"nodeType":"YulFunctionCall","src":"29646:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29638:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29416:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29430:4:58","type":""}],"src":"29265:406:58"},{"body":{"nodeType":"YulBlock","src":"29879:309:58","statements":[{"nodeType":"YulVariableDeclaration","src":"29889:52:58","value":{"kind":"number","nodeType":"YulLiteral","src":"29899:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"29893:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29957:9:58"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29972:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"29980:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29968:3:58"},"nodeType":"YulFunctionCall","src":"29968:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29950:6:58"},"nodeType":"YulFunctionCall","src":"29950:34:58"},"nodeType":"YulExpressionStatement","src":"29950:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30004:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30015:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30000:3:58"},"nodeType":"YulFunctionCall","src":"30000:18:58"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30024:6:58"},{"name":"_1","nodeType":"YulIdentifier","src":"30032:2:58"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30020:3:58"},"nodeType":"YulFunctionCall","src":"30020:15:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29993:6:58"},"nodeType":"YulFunctionCall","src":"29993:43:58"},"nodeType":"YulExpressionStatement","src":"29993:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30056:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30067:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30052:3:58"},"nodeType":"YulFunctionCall","src":"30052:18:58"},{"name":"value2","nodeType":"YulIdentifier","src":"30072:6:58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30045:6:58"},"nodeType":"YulFunctionCall","src":"30045:34:58"},"nodeType":"YulExpressionStatement","src":"30045:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30099:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30110:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30095:3:58"},"nodeType":"YulFunctionCall","src":"30095:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"30115:3:58","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30088:6:58"},"nodeType":"YulFunctionCall","src":"30088:31:58"},"nodeType":"YulExpressionStatement","src":"30088:31:58"},{"nodeType":"YulAssignment","src":"30128:54:58","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"30154:6:58"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30166:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30177:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30162:3:58"},"nodeType":"YulFunctionCall","src":"30162:19:58"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"30136:17:58"},"nodeType":"YulFunctionCall","src":"30136:46:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30128:4:58"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29824:9:58","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29835:6:58","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29843:6:58","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29851:6:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29859:6:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29870:4:58","type":""}],"src":"29676:512:58"},{"body":{"nodeType":"YulBlock","src":"30273:169:58","statements":[{"body":{"nodeType":"YulBlock","src":"30319:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30328:1:58","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30331:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30321:6:58"},"nodeType":"YulFunctionCall","src":"30321:12:58"},"nodeType":"YulExpressionStatement","src":"30321:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"30294:7:58"},{"name":"headStart","nodeType":"YulIdentifier","src":"30303:9:58"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30290:3:58"},"nodeType":"YulFunctionCall","src":"30290:23:58"},{"kind":"number","nodeType":"YulLiteral","src":"30315:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"30286:3:58"},"nodeType":"YulFunctionCall","src":"30286:32:58"},"nodeType":"YulIf","src":"30283:52:58"},{"nodeType":"YulVariableDeclaration","src":"30344:29:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30363:9:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"30357:5:58"},"nodeType":"YulFunctionCall","src":"30357:16:58"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"30348:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30406:5:58"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"30382:23:58"},"nodeType":"YulFunctionCall","src":"30382:30:58"},"nodeType":"YulExpressionStatement","src":"30382:30:58"},{"nodeType":"YulAssignment","src":"30421:15:58","value":{"name":"value","nodeType":"YulIdentifier","src":"30431:5:58"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"30421:6:58"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30239:9:58","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"30250:7:58","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"30262:6:58","type":""}],"src":"30193:249:58"},{"body":{"nodeType":"YulBlock","src":"30621:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30638:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30649:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30631:6:58"},"nodeType":"YulFunctionCall","src":"30631:21:58"},"nodeType":"YulExpressionStatement","src":"30631:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30672:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30683:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30668:3:58"},"nodeType":"YulFunctionCall","src":"30668:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"30688:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30661:6:58"},"nodeType":"YulFunctionCall","src":"30661:30:58"},"nodeType":"YulExpressionStatement","src":"30661:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30711:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30722:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30707:3:58"},"nodeType":"YulFunctionCall","src":"30707:18:58"},{"hexValue":"45524332303a2073616665207472616e736665722072656a6563746564","kind":"string","nodeType":"YulLiteral","src":"30727:31:58","type":"","value":"ERC20: safe transfer rejected"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30700:6:58"},"nodeType":"YulFunctionCall","src":"30700:59:58"},"nodeType":"YulExpressionStatement","src":"30700:59:58"},{"nodeType":"YulAssignment","src":"30768:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30780:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"30791:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30776:3:58"},"nodeType":"YulFunctionCall","src":"30776:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30768:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_06533093aac81b304d828c29fba4bcc9a9242c05998beeb0c6637f18930d9235__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30598:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30612:4:58","type":""}],"src":"30447:353:58"},{"body":{"nodeType":"YulBlock","src":"30979:228:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30996:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31007:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30989:6:58"},"nodeType":"YulFunctionCall","src":"30989:21:58"},"nodeType":"YulExpressionStatement","src":"30989:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31030:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31041:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31026:3:58"},"nodeType":"YulFunctionCall","src":"31026:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"31046:2:58","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31019:6:58"},"nodeType":"YulFunctionCall","src":"31019:30:58"},"nodeType":"YulExpressionStatement","src":"31019:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31069:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31080:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31065:3:58"},"nodeType":"YulFunctionCall","src":"31065:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"31085:34:58","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31058:6:58"},"nodeType":"YulFunctionCall","src":"31058:62:58"},"nodeType":"YulExpressionStatement","src":"31058:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31140:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31151:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31136:3:58"},"nodeType":"YulFunctionCall","src":"31136:18:58"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"31156:8:58","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31129:6:58"},"nodeType":"YulFunctionCall","src":"31129:36:58"},"nodeType":"YulExpressionStatement","src":"31129:36:58"},{"nodeType":"YulAssignment","src":"31174:27:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31186:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31197:3:58","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31182:3:58"},"nodeType":"YulFunctionCall","src":"31182:19:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31174:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30956:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30970:4:58","type":""}],"src":"30805:402:58"},{"body":{"nodeType":"YulBlock","src":"31349:150:58","statements":[{"nodeType":"YulVariableDeclaration","src":"31359:27:58","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31379:6:58"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31373:5:58"},"nodeType":"YulFunctionCall","src":"31373:13:58"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"31363:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31434:6:58"},{"kind":"number","nodeType":"YulLiteral","src":"31442:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31430:3:58"},"nodeType":"YulFunctionCall","src":"31430:17:58"},{"name":"pos","nodeType":"YulIdentifier","src":"31449:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"31454:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"31395:34:58"},"nodeType":"YulFunctionCall","src":"31395:66:58"},"nodeType":"YulExpressionStatement","src":"31395:66:58"},{"nodeType":"YulAssignment","src":"31470:23:58","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31481:3:58"},{"name":"length","nodeType":"YulIdentifier","src":"31486:6:58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31477:3:58"},"nodeType":"YulFunctionCall","src":"31477:16:58"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31470:3:58"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31325:3:58","type":""},{"name":"value0","nodeType":"YulTypedName","src":"31330:6:58","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31341:3:58","type":""}],"src":"31212:287:58"},{"body":{"nodeType":"YulBlock","src":"31678:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31695:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31706:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31688:6:58"},"nodeType":"YulFunctionCall","src":"31688:21:58"},"nodeType":"YulExpressionStatement","src":"31688:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31729:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31740:2:58","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31725:3:58"},"nodeType":"YulFunctionCall","src":"31725:18:58"},{"kind":"number","nodeType":"YulLiteral","src":"31745:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31718:6:58"},"nodeType":"YulFunctionCall","src":"31718:30:58"},"nodeType":"YulExpressionStatement","src":"31718:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31768:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31779:2:58","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31764:3:58"},"nodeType":"YulFunctionCall","src":"31764:18:58"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"31784:31:58","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31757:6:58"},"nodeType":"YulFunctionCall","src":"31757:59:58"},"nodeType":"YulExpressionStatement","src":"31757:59:58"},{"nodeType":"YulAssignment","src":"31825:26:58","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31837:9:58"},{"kind":"number","nodeType":"YulLiteral","src":"31848:2:58","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31833:3:58"},"nodeType":"YulFunctionCall","src":"31833:18:58"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31825:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31655:9:58","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31669:4:58","type":""}],"src":"31504:353:58"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1020__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$4829_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$4591_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$4829(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$4591(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_017fa02763caa2725c84e6b583883ae2809fbda27b9670c33f9ad3b7b24100af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: approval to address(0)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e95c96836e656718b0ff0a4d24263e8dcfd630813f94aada96d5a0c7faf0cfb5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"ERC20: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_53c0a9b372dd4d10e0466e474511916fb244dbbc3766b7c40c21d1ec47086e63__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"ERC20: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_357f75c7f4cdbe2492cf8e424be0b1f3fbf884416a3c5ab251c16e149296f9be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC20: allowance overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_415c6941cad4c57d250451275b00d3cc4adfbd970d2f838c204368b9ace4d29a_t_string_memory_ptr_t_stringliteral_748a4dae8f6307cb84c627a9091688f0c3c8607ee7b37d7f3f2eaeeb40cb3223__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"AccessControl: missing '\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 24), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 24), \"' role\")\n        end := add(_1, 30)\n    }\n    function abi_encode_tuple_t_stringliteral_32cace037c0659d6f07eeb77b1740914591f2b0927e7b227d741fbb03823b40d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC20: mint to address(0)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_555ebf03264be25a26b5120044887f13a64477e19db4facbaaee717abfa82472__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"ERC20: supply overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_18901677926d9fedd48273799b30053f4d5082e721fbe2b429a24e39ce95c5f7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: transfer to address(0)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1042b868d03dd202c94535497b0aea159ffb0ed92f9c8495054728ee0acf7ff1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"ERC20: values overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3a6dd7da9592c148a3c1346620b226302bc667b6fd5e83c82aa507db666797af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: permit from address(0)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0ac59a98b6fe7e99399c85395b7df87e761b25e505bace1750860cfaa1803c24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"ERC20: expired permit\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, 0x1901000000000000000000000000000000000000000000000000000000000000)\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_7e7a3a2e3040cbfa3c00db0248b72c5f4c00492e57a5353baf25410416702f76__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"ERC20: invalid permit\")\n        tail := add(headStart, 96)\n    }\n    function copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, value0)\n        end := add(pos, 32)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_06533093aac81b304d828c29fba4bcc9a9242c05998beeb0c6637f18930d9235__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: safe transfer rejected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}","id":58,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"884":[{"length":32,"start":805},{"length":32,"start":1029},{"length":32,"start":14066},{"length":32,"start":14202}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106102925760003560e01c806379cc679011610160578063b88d4fde116100d8578063dd62ed3e1161008c578063eb79554911610071578063eb795549146105a9578063f2fde38b146105bc578063f7ba94bd146105cf57600080fd5b8063dd62ed3e14610583578063e0df5b6f1461059657600080fd5b8063d505accf116100bd578063d505accf14610536578063d539139314610549578063d547741f1461057057600080fd5b8063b88d4fde14610510578063c3666c361461052357600080fd5b80638da5cb5b1161012f57806395d89b411161011457806395d89b41146104e2578063a457c2d7146104ea578063a9059cbb146104fd57600080fd5b80638da5cb5b146104c757806391d14854146104cf57600080fd5b806379cc67901461047b5780637ecebe001461048e57806388d695b2146104a15780638bb9c5bf146104b457600080fd5b80633644e5151161020e5780634885b254116101c257806368573107116101a7578063685731071461044257806370a082311461045557806373c8a9581461046857600080fd5b80634885b254146103e2578063572b6c05146103f557600080fd5b80633c130d90116101f35780633c130d90146103b457806340c10f19146103bc57806342966c68146103cf57600080fd5b80633644e5151461039957806339509351146103a157600080fd5b80631b9a7529116102655780632b4c9f161161024a5780632b4c9f16146103235780632f2ff15d1461036a578063313ce5671461037f57600080fd5b80631b9a7529146102fd57806323b872dd1461031057600080fd5b806301ffc9a71461029757806306fdde03146102bf578063095ea7b3146102d457806318160ddd146102e7575b600080fd5b6102aa6102a5366004613d59565b6105e2565b60405190151581526020015b60405180910390f35b6102c76105fc565b6040516102b69190613de4565b6102aa6102e2366004613e19565b610613565b6102ef61063b565b6040519081526020016102b6565b6102aa61030b366004613e91565b61064f565b6102aa61031e366004613efd565b61067e565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102b6565b61037d610378366004613f3e565b6106a9565b005b6103876106e2565b60405160ff90911681526020016102b6565b6102ef6106f9565b6102aa6103af366004613e19565b610703565b6102c7610722565b61037d6103ca366004613e19565b61072f565b6102aa6103dd366004613f6e565b610782565b6102aa6103f0366004613f87565b6107a7565b6102aa61040336600461400a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61037d610450366004613e91565b6107d8565b6102ef61046336600461400a565b610882565b61037d610476366004614027565b6108ba565b6102aa610489366004613e19565b6109ea565b6102ef61049c36600461400a565b610a09565b6102aa6104af366004613e91565b610a17565b61037d6104c2366004613f6e565b610a3a565b610345610a58565b6102aa6104dd366004613f3e565b610a7f565b6102c7610aca565b6102aa6104f8366004613e19565b610adc565b6102aa61050b366004613e19565b610afb565b6102aa61051e366004614103565b610b1a565b61037d610531366004614027565b610b3f565b61037d610544366004614165565b610ce4565b6102ef7f6d696e746572000000000000000000000000000000000000000000000000000081565b61037d61057e366004613f3e565b610d0b565b6102ef6105913660046141dc565b610d39565b61037d6105a436600461420a565b610d84565b6102aa6105b736600461424c565b610da3565b61037d6105ca36600461400a565b610dc6565b61037d6105dd366004613e91565b610de1565b60006105f6826105f06111d6565b90611310565b92915050565b606061060e610609610f33565b6113ea565b905090565b6000610632610620611480565b848461062a61148a565b9291906114b8565b50600192915050565b600061060e61064861148a565b6002015490565b600061067261065c611480565b8686868661066861148a565b94939291906115a7565b5060015b949350505050565b600061069f61068b611480565b85858561069661148a565b939291906117e9565b5060019392505050565b60006106b3611480565b90506106c7816106c1610fe0565b9061183b565b6106dd8383836106d56118be565b9291906118ec565b505050565b600061060e6106ef610f33565b6002015460ff1690565b600061060e6119c2565b6000610632610710611480565b848461071a61148a565b929190611a5d565b606061060e610609611c29565b61076a7f6d696e746572000000000000000000000000000000000000000000000000000061075b611480565b6107636118be565b9190611c57565b61077e828261077761148a565b9190611d03565b5050565b600061079f61078f611480565b8361079861148a565b9190611e7d565b506001919050565b60006107cc6107b4611480565b87878787876107c161148a565b959493929190611f93565b50600195945050505050565b6108047f6d696e746572000000000000000000000000000000000000000000000000000061075b611480565b61087c84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808802828101820190935287825290935087925086918291850190849080828437600092019190915250610875925061148a915050565b91906123d9565b50505050565b60006105f68261089061148a565b9073ffffffffffffffffffffffffffffffffffffffff166000908152602091909152604090205490565b6108cd6108c5611480565b6106c1610fe0565b8483811480156108dc57508082145b610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064015b60405180910390fd5b60005b8181146109e0576109d88888838181106109665761096661429c565b905060200201602081019061097b919061400a565b85858481811061098d5761098d61429c565b905060200201358888858181106109a6576109a661429c565b90506020020160208101906109bb919061400a565b73ffffffffffffffffffffffffffffffffffffffff1691906126af565b60010161094a565b5050505050505050565b60006106326109f7611480565b8484610a0161148a565b92919061273c565b60006105f682610890612786565b6000610672610a24611480565b86868686610a3061148a565b94939291906127b4565b610a55610a45611480565b82610a4e6118be565b9190612b96565b50565b600061060e610a65610fe0565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6000610ac38383610a8e6118be565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b606061060e610ad7610f33565b612c3a565b6000610632610ae9611480565b8484610af361148a565b929190612c4b565b6000610632610b08611480565b8484610b1261148a565b929190612d9d565b60006107cc610b27611480565b8787878787610b3461148a565b959493929190612f7e565b610b4a6108c5611480565b848381148015610b5957508082145b610bbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161093e565b60005b8181146109e057858582818110610bdb57610bdb61429c565b9050602002016020810190610bf0919061400a565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a85818110610c1e57610c1e61429c565b9050602002016020810190610c33919061400a565b878786818110610c4557610c4561429c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b50505050806001019050610bc2565b610d0287878787878787610cf6612786565b96959493929190612feb565b50505050505050565b6000610d15611480565b9050610d23816106c1610fe0565b6106dd838383610d316118be565b9291906132e7565b6000610ac38383610d4861148a565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600193909301602090815260408085209290931684525290205490565b610d8f6108c5611480565b61077e8282610d9c611c29565b91906133b1565b6000610672610db0611480565b86868686610dbc61148a565b94939291906133bd565b610a55610dd1611480565b82610dda610fe0565b9190613429565b610dec6108c5611480565b82818114610e56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161093e565b60005b818114610ec757610ebf848483818110610e7557610e7561429c565b90506020020135878784818110610e8e57610e8e61429c565b9050602002016020810190610ea3919061400a565b73ffffffffffffffffffffffffffffffffffffffff1690613555565b600101610e59565b505050505050565b6000610ed96111d6565b9050610f07817f36372b07000000000000000000000000000000000000000000000000000000006001611204565b610a55817f9d075186000000000000000000000000000000000000000000000000000000006001611204565b6000806105f660017f335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a826142cb565b83610f6c84826143cd565b5060018401610f7b83826143cd565b506002840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff831617905561087c7fa219a025000000000000000000000000000000000000000000000000000000006001610fd96111d6565b9190611204565b6000806105f660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6142cb565b73ffffffffffffffffffffffffffffffffffffffff8116156110965781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b61077e7f7f5828d0000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f3c130d90000000000000000000000000000000000000000000000000000000006001610fd96111d6565b565b6110f27f28963e1e000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f20c07ed1000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f53f41a97000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27fc05327e6000000000000000000000000000000000000000000000000000000006001610fd96111d6565b6110f27f9d8ff7da000000000000000000000000000000000000000000000000000000006001610fd95b6000806105f660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6142cb565b7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016112ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500604482015260640161093e565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601611360575060006105f6565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016113b1575060016105f6565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60608160000180546113fb90614334565b80601f016020809104026020016040519081016040528092919081815260200182805461142790614334565b80156114745780601f1061144957610100808354040283529160200191611474565b820191906000526020600020905b81548152906001019060200180831161145757829003601f168201915b50505050509050919050565b600061060e6136af565b6000806105f660017f1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef6142cb565b73ffffffffffffffffffffffffffffffffffffffff8216611535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20617070726f76616c20746f2061646472657373283029000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260018701602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350505050565b82818114611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b8060000361161f5750610ec7565b6000805b8281146117cd57600087878381811061163e5761163e61429c565b9050602002016020810190611653919061400a565b905060008686848181106116695761166961429c565b9050602002013590508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146116b1576116b18b838c84612c4b565b80156117755773ffffffffffffffffffffffffffffffffffffffff8216600090815260208c90526040902054818103818110611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208e9052604090205550928301925b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050600101611623565b5080156109e05760028801805482900390555050505050505050565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146118285761182885848684612c4b565b61183485848484612d9d565b5050505050565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161093e565b6000806105f660017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236142cb565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661087c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b6000467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6119f1610609610f33565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c0016040516020818303038152906040528051906020012091505090565b73ffffffffffffffffffffffffffffffffffffffff8216611ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20617070726f76616c20746f2061646472657373283029000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220548115611bbb57808201818111611b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a20616c6c6f77616e6365206f766572666c6f7700000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600188016020908152604080832093881683529290522081905590505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611c1a91815260200190565b60405180910390a35050505050565b6000806105f660017ff41bf6a5db26bffdfab174dcf66b31fbba8fdb7e3db040721ce1e62d61839ceb6142cb565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166106dd57611c95826137f6565b604051602001611ca591906144e7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261093e91600401613de4565b73ffffffffffffffffffffffffffffffffffffffff8216611d80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a206d696e7420746f206164647265737328302900000000000000604482015260640161093e565b8015611e29576002830154818101818111611df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a20737570706c79206f766572666c6f7700000000000000000000604482015260640161093e565b60028501555073ffffffffffffffffffffffffffffffffffffffff821660009081526020849052604090208054820190555b60405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050565b8015611f485773ffffffffffffffffffffffffffffffffffffffff8216600090815260208490526040902054818103818110611f15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602086905260409020555060028301805482900390555b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611e70565b82818114611ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b8060000361200b5750610d02565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602089905260408120549080805b8481146122e15760008989838181106120505761205061429c565b9050602002016020810190612065919061400a565b905073ffffffffffffffffffffffffffffffffffffffff81166120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161093e565b60008888848181106120f8576120f861429c565b9050602002013590508060001461227057848101858111612175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2076616c756573206f766572666c6f7700000000000000000000604482015260640161093e565b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146121ff57818f60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061226e565b86821115612269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516122cf91815260200190565b60405180910390a35050600101612035565b5081158015906122f15750808214155b1561238d57818303838110612362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260208d90526040902090820190555b8973ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146123cc576123cc8b8a8c85612c4b565b5050505050505050505050565b815181518114612445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b806000036124535750505050565b6000805b82811461262a5760008582815181106124725761247261429c565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332303a206d696e7420746f206164647265737328302900000000000000604482015260640161093e565b60008583815181106125265761252661429c565b60200260200101519050806000146125d2578381018481116125a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2076616c756573206f766572666c6f7700000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208a90526040902080548301905593505b60405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050600101612457565b5080156118345760028501548181018181116126a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a20737570706c79206f766572666c6f7700000000000000000000604482015260640161093e565b6002870155505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526106dd908490613988565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461277b5761277b84838584612c4b565b61087c848383611e7d565b6000806105f660017f93fe0ff7226b064a4a8f0b09910762afb4bc2441835792c021ffd78cd513011e6142cb565b8281811461281e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f45524332303a20696e636f6e73697374656e7420617272617973000000000000604482015260640161093e565b8060000361282c5750610ec7565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602088905260408120549080805b848114612ade5760008989838181106128715761287161429c565b9050602002016020810190612886919061400a565b905073ffffffffffffffffffffffffffffffffffffffff8116612905576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161093e565b60008888848181106129195761291961429c565b90506020020135905080600014612a6d57848101858111612996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2076616c756573206f766572666c6f7700000000000000000000604482015260640161093e565b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146129fc5773ffffffffffffffffffffffffffffffffffffffff8316600090815260208f905260409020805483019055612a6b565b86821115612a66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612acc91815260200190565b60405180910390a35050600101612856565b508115801590612aee5750808214155b15612b8a57818303838110612b5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260208c90526040902090820190555b50505050505050505050565b612ba1838284611c57565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60608160010180546113fb90614334565b73ffffffffffffffffffffffffffffffffffffffff8216612cc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20617070726f76616c20746f2061646472657373283029000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114801590612d2c57508115155b15611bbb57818103818110611b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff8216612e1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207472616e7366657220746f2061646472657373283029000000604482015260640161093e565b8015612f1f5773ffffffffffffffffffffffffffffffffffffffff8316600090815260208590526040902054818103818110612eb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e63650000000000604482015260640161093e565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612f1c5773ffffffffffffffffffffffffffffffffffffffff8086166000908152602088905260408082208490559186168152208054840190555b50505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161159991815260200190565b612f8b87878787876117e9565b73ffffffffffffffffffffffffffffffffffffffff84163b15610d0257610d028686868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a9492505050565b73ffffffffffffffffffffffffffffffffffffffff8716613068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a207065726d69742066726f6d2061646472657373283029000000604482015260640161093e565b834211156130d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45524332303a2065787069726564207065726d69740000000000000000000000604482015260640161093e565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260208b8152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e090930190935281519190920120906131716119c2565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa158015613235573d6000803e3d6000fd5b5050506020604051035190508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146132d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45524332303a20696e76616c6964207065726d69740000000000000000000000604482015260640161093e565b5050506109e087878761062a61148a565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561087c5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016119b4565b8261087c828483614553565b6133c986868686612d9d565b73ffffffffffffffffffffffffffffffffffffffff84163b15610ec757610ec78586868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a9492505050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146134ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161093e565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461087c5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b804710156135bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161093e565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114613619576040519150601f19603f3d011682016040523d82523d6000602084013e61361e565b606091505b50509050806106dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161093e565b6000333214806136bf5750601836105b156136c957503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806137e557506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156137c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e5919061466d565b156137ef57919050565b3391505090565b6060600082900361381557505060408051602081019091526000815290565b60008260405160200161382a91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050601f5b81818151811061386f5761386f61429c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000166000036138c4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161385d565b60008160010167ffffffffffffffff8111156138e2576138e2614305565b6040519080825280601f01601f19166020018201604052801561390c576020820181803683370190505b50905060005b82811161397f5783818151811061392b5761392b61429c565b602001015160f81c60f81b8282815181106139485761394861429c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101613912565b50949350505050565b60006139ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613bba9092919063ffffffff16565b8051909150156106dd5780806020019051810190613a08919061466d565b6106dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161093e565b6040517f4fc35859000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff851690634fc3585990613aee90899089908890889060040161468f565b6020604051808303816000875af1158015613b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3191906146d8565b7fffffffff000000000000000000000000000000000000000000000000000000001614611834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a2073616665207472616e736665722072656a6563746564000000604482015260640161093e565b60606106768484600085856000808673ffffffffffffffffffffffffffffffffffffffff168587604051613bee91906146f5565b60006040518083038185875af1925050503d8060008114613c2b576040519150601f19603f3d011682016040523d82523d6000602084013e613c30565b606091505b5091509150613c4187838387613c4c565b979650505050505050565b60608315613ce2578251600003613cdb5773ffffffffffffffffffffffffffffffffffffffff85163b613cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161093e565b5081610676565b6106768383815115613cf75781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e9190613de4565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610a5557600080fd5b600060208284031215613d6b57600080fd5b8135610ac381613d2b565b60005b83811015613d91578181015183820152602001613d79565b50506000910152565b60008151808452613db2816020860160208601613d76565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610ac36020830184613d9a565b73ffffffffffffffffffffffffffffffffffffffff81168114610a5557600080fd5b60008060408385031215613e2c57600080fd5b8235613e3781613df7565b946020939093013593505050565b60008083601f840112613e5757600080fd5b50813567ffffffffffffffff811115613e6f57600080fd5b6020830191508360208260051b8501011115613e8a57600080fd5b9250929050565b60008060008060408587031215613ea757600080fd5b843567ffffffffffffffff80821115613ebf57600080fd5b613ecb88838901613e45565b90965094506020870135915080821115613ee457600080fd5b50613ef187828801613e45565b95989497509550505050565b600080600060608486031215613f1257600080fd5b8335613f1d81613df7565b92506020840135613f2d81613df7565b929592945050506040919091013590565b60008060408385031215613f5157600080fd5b823591506020830135613f6381613df7565b809150509250929050565b600060208284031215613f8057600080fd5b5035919050565b600080600080600060608688031215613f9f57600080fd5b8535613faa81613df7565b9450602086013567ffffffffffffffff80821115613fc757600080fd5b613fd389838a01613e45565b90965094506040880135915080821115613fec57600080fd5b50613ff988828901613e45565b969995985093965092949392505050565b60006020828403121561401c57600080fd5b8135610ac381613df7565b6000806000806000806060878903121561404057600080fd5b863567ffffffffffffffff8082111561405857600080fd5b6140648a838b01613e45565b9098509650602089013591508082111561407d57600080fd5b6140898a838b01613e45565b909650945060408901359150808211156140a257600080fd5b506140af89828a01613e45565b979a9699509497509295939492505050565b60008083601f8401126140d357600080fd5b50813567ffffffffffffffff8111156140eb57600080fd5b602083019150836020828501011115613e8a57600080fd5b60008060008060006080868803121561411b57600080fd5b853561412681613df7565b9450602086013561413681613df7565b935060408601359250606086013567ffffffffffffffff81111561415957600080fd5b613ff9888289016140c1565b600080600080600080600060e0888a03121561418057600080fd5b873561418b81613df7565b9650602088013561419b81613df7565b95506040880135945060608801359350608088013560ff811681146141bf57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156141ef57600080fd5b82356141fa81613df7565b91506020830135613f6381613df7565b6000806020838503121561421d57600080fd5b823567ffffffffffffffff81111561423457600080fd5b614240858286016140c1565b90969095509350505050565b6000806000806060858703121561426257600080fd5b843561426d81613df7565b935060208501359250604085013567ffffffffffffffff81111561429057600080fd5b613ef1878288016140c1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818103818111156105f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061434857607f821691505b602082108103614381577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156106dd57600081815260208120601f850160051c810160208610156143ae5750805b601f850160051c820191505b81811015610ec7578281556001016143ba565b815167ffffffffffffffff8111156143e7576143e7614305565b6143fb816143f58454614334565b84614387565b602080601f83116001811461444e57600084156144185750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610ec7565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561449b5788860151825594840194600190910190840161447c565b50858210156144d757878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f416363657373436f6e74726f6c3a206d697373696e672027000000000000000081526000825161451f816018850160208701613d76565b7f2720726f6c6500000000000000000000000000000000000000000000000000006018939091019283015250601e01919050565b67ffffffffffffffff83111561456b5761456b614305565b61457f836145798354614334565b83614387565b6000601f8411600181146145d1576000851561459b5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611834565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156146205786850135825560209485019460019092019101614600565b508682101561465b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561467f57600080fd5b81518015158114610ac357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526146ce6080830184613d9a565b9695505050505050565b6000602082840312156146ea57600080fd5b8151610ac381613d2b565b60008251614707818460208701613d76565b919091019291505056fea2646970667358221220b19159545f5c30e0bd31d66004481365e80a01246ff28ade3e273e10e353dc4564736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x292 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x160 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEB795549 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEB795549 EQ PUSH2 0x5A9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5BC JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x5CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD505ACCF GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x536 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x549 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x570 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x12F JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x4EA JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0x88D695B2 EQ PUSH2 0x4A1 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x20E JUMPI DUP1 PUSH4 0x4885B254 GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x68573107 GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x68573107 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4885B254 EQ PUSH2 0x3E2 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3C130D90 GT PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x3C130D90 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3644E515 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B9A7529 GT PUSH2 0x265 JUMPI DUP1 PUSH4 0x2B4C9F16 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B9A7529 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2E7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AA PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D59 JUMP JUMPDEST PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2C7 PUSH2 0x5FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x3DE4 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x613 JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x63B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x64F JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x3EFD JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3E JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x387 PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x6F9 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2C7 PUSH2 0x722 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x72F JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x3DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3F6E JUMP JUMPDEST PUSH2 0x782 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x3F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F87 JUMP JUMPDEST PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x403 CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0x7D8 JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH2 0x882 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x476 CALLDATASIZE PUSH1 0x4 PUSH2 0x4027 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0x9EA JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x49C CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH2 0xA09 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F6E JUMP JUMPDEST PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x345 PUSH2 0xA58 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3E JUMP JUMPDEST PUSH2 0xA7F JUMP JUMPDEST PUSH2 0x2C7 PUSH2 0xACA JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x50B CALLDATASIZE PUSH1 0x4 PUSH2 0x3E19 JUMP JUMPDEST PUSH2 0xAFB JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x51E CALLDATASIZE PUSH1 0x4 PUSH2 0x4103 JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x37D PUSH2 0x531 CALLDATASIZE PUSH1 0x4 PUSH2 0x4027 JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH2 0x37D PUSH2 0x544 CALLDATASIZE PUSH1 0x4 PUSH2 0x4165 JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST PUSH2 0x2EF PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x57E CALLDATASIZE PUSH1 0x4 PUSH2 0x3F3E JUMP JUMPDEST PUSH2 0xD0B JUMP JUMPDEST PUSH2 0x2EF PUSH2 0x591 CALLDATASIZE PUSH1 0x4 PUSH2 0x41DC JUMP JUMPDEST PUSH2 0xD39 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x420A JUMP JUMPDEST PUSH2 0xD84 JUMP JUMPDEST PUSH2 0x2AA PUSH2 0x5B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x424C JUMP JUMPDEST PUSH2 0xDA3 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5CA CALLDATASIZE PUSH1 0x4 PUSH2 0x400A JUMP JUMPDEST PUSH2 0xDC6 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0x3E91 JUMP JUMPDEST PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x5F0 PUSH2 0x11D6 JUMP JUMPDEST SWAP1 PUSH2 0x1310 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60E PUSH2 0x609 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0x13EA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0x620 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x62A PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x14B8 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x648 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x672 PUSH2 0x65C PUSH2 0x1480 JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH2 0x668 PUSH2 0x148A JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15A7 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69F PUSH2 0x68B PUSH2 0x1480 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x696 PUSH2 0x148A JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17E9 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B3 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH2 0x6C7 DUP2 PUSH2 0x6C1 PUSH2 0xFE0 JUMP JUMPDEST SWAP1 PUSH2 0x183B JUMP JUMPDEST PUSH2 0x6DD DUP4 DUP4 DUP4 PUSH2 0x6D5 PUSH2 0x18BE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x18EC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x6EF PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x19C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0x710 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x71A PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1A5D JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60E PUSH2 0x609 PUSH2 0x1C29 JUMP JUMPDEST PUSH2 0x76A PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 PUSH2 0x75B PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x763 PUSH2 0x18BE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C57 JUMP JUMPDEST PUSH2 0x77E DUP3 DUP3 PUSH2 0x777 PUSH2 0x148A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79F PUSH2 0x78F PUSH2 0x1480 JUMP JUMPDEST DUP4 PUSH2 0x798 PUSH2 0x148A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1E7D JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CC PUSH2 0x7B4 PUSH2 0x1480 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x7C1 PUSH2 0x148A JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F93 JUMP JUMPDEST POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x804 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 PUSH2 0x75B PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x87C DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP9 MUL DUP3 DUP2 ADD DUP3 ADD SWAP1 SWAP4 MSTORE DUP8 DUP3 MSTORE SWAP1 SWAP4 POP DUP8 SWAP3 POP DUP7 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x875 SWAP3 POP PUSH2 0x148A SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x23D9 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x890 PUSH2 0x148A JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x8CD PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0xFE0 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x8DC JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9E0 JUMPI PUSH2 0x9D8 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x966 JUMPI PUSH2 0x966 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x97B SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x98D JUMPI PUSH2 0x98D PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x9A6 JUMPI PUSH2 0x9A6 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9BB SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x26AF JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x94A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0x9F7 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xA01 PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x273C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x890 PUSH2 0x2786 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x672 PUSH2 0xA24 PUSH2 0x1480 JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH2 0xA30 PUSH2 0x148A JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B4 JUMP JUMPDEST PUSH2 0xA55 PUSH2 0xA45 PUSH2 0x1480 JUMP JUMPDEST DUP3 PUSH2 0xA4E PUSH2 0x18BE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2B96 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0xA65 PUSH2 0xFE0 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC3 DUP4 DUP4 PUSH2 0xA8E PUSH2 0x18BE JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x60E PUSH2 0xAD7 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0x2C3A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xAE9 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xAF3 PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2C4B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 PUSH2 0xB08 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB12 PUSH2 0x148A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2D9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CC PUSH2 0xB27 PUSH2 0x1480 JUMP JUMPDEST DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xB34 PUSH2 0x148A JUMP JUMPDEST SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F7E JUMP JUMPDEST PUSH2 0xB4A PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xB59 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0xBBF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9E0 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xBDB JUMPI PUSH2 0xBDB PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBF0 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xC1E JUMPI PUSH2 0xC1E PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC33 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xC45 JUMPI PUSH2 0xC45 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xBC2 JUMP JUMPDEST PUSH2 0xD02 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0xCF6 PUSH2 0x2786 JUMP JUMPDEST SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2FEB JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD15 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH2 0xD23 DUP2 PUSH2 0x6C1 PUSH2 0xFE0 JUMP JUMPDEST PUSH2 0x6DD DUP4 DUP4 DUP4 PUSH2 0xD31 PUSH2 0x18BE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x32E7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC3 DUP4 DUP4 PUSH2 0xD48 PUSH2 0x148A JUMP JUMPDEST SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP3 SWAP1 SWAP4 AND DUP5 MSTORE MSTORE SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD8F PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x77E DUP3 DUP3 PUSH2 0xD9C PUSH2 0x1C29 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x33B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x672 PUSH2 0xDB0 PUSH2 0x1480 JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 PUSH2 0xDBC PUSH2 0x148A JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33BD JUMP JUMPDEST PUSH2 0xA55 PUSH2 0xDD1 PUSH2 0x1480 JUMP JUMPDEST DUP3 PUSH2 0xDDA PUSH2 0xFE0 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3429 JUMP JUMPDEST PUSH2 0xDEC PUSH2 0x8C5 PUSH2 0x1480 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xE56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xEC7 JUMPI PUSH2 0xEBF DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xE75 JUMPI PUSH2 0xE75 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xE8E JUMPI PUSH2 0xE8E PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xEA3 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3555 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xE59 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED9 PUSH2 0x11D6 JUMP JUMPDEST SWAP1 POP PUSH2 0xF07 DUP2 PUSH32 0x36372B0700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x1204 JUMP JUMPDEST PUSH2 0xA55 DUP2 PUSH32 0x9D07518600000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0x335DF4119BBB04F056B33EBA33B826D3529129E458FAF6DAA9924B5A8F3B6A82 PUSH2 0x42CB JUMP JUMPDEST DUP4 PUSH2 0xF6C DUP5 DUP3 PUSH2 0x43CD JUMP JUMPDEST POP PUSH1 0x1 DUP5 ADD PUSH2 0xF7B DUP4 DUP3 PUSH2 0x43CD JUMP JUMPDEST POP PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0xFF DUP4 AND OR SWAP1 SSTORE PUSH2 0x87C PUSH32 0xA219A02500000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x42CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x1096 JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x77E PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x3C130D9000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x28963E1E00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x20C07ED100000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x53F41A9700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0xC05327E600000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x9D8FF7DA00000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xFD9 JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x42CB JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x12AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1360 JUMPI POP PUSH1 0x0 PUSH2 0x5F6 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x13B1 JUMPI POP PUSH1 0x1 PUSH2 0x5F6 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x13FB SWAP1 PUSH2 0x4334 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1427 SWAP1 PUSH2 0x4334 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60E PUSH2 0x36AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0x1DA92899D3DA68BF9787824388A37EA2BFA79780BCEF91B9716C390EEC8ECBEF PUSH2 0x42CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1535 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76616C20746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1611 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x161F JUMPI POP PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 EQ PUSH2 0x17CD JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x163E JUMPI PUSH2 0x163E PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1653 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1669 JUMPI PUSH2 0x1669 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16B1 JUMPI PUSH2 0x16B1 DUP12 DUP4 DUP13 DUP5 PUSH2 0x2C4B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1775 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP13 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x1749 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP15 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP SWAP3 DUP4 ADD SWAP3 JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x1623 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x2 DUP9 ADD DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1828 JUMPI PUSH2 0x1828 DUP6 DUP5 DUP7 DUP5 PUSH2 0x2C4B JUMP JUMPDEST PUSH2 0x1834 DUP6 DUP5 DUP5 DUP5 PUSH2 0x2D9D JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x42CB JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x87C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x19F1 PUSH2 0x609 PUSH2 0xF33 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1ADA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76616C20746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP2 ISZERO PUSH2 0x1BBB JUMPI DUP1 DUP3 ADD DUP2 DUP2 GT PUSH2 0x1B81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20616C6C6F77616E6365206F766572666C6F7700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP2 SWAP1 SSTORE SWAP1 POP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1C1A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0xF41BF6A5DB26BFFDFAB174DCF66B31FBBA8FDB7E3DB040721CE1E62D61839CEB PUSH2 0x42CB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x6DD JUMPI PUSH2 0x1C95 DUP3 PUSH2 0x37F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CA5 SWAP2 SWAP1 PUSH2 0x44E7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH2 0x93E SWAP2 PUSH1 0x4 ADD PUSH2 0x3DE4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1D80 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F206164647265737328302900000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E29 JUMPI PUSH1 0x2 DUP4 ADD SLOAD DUP2 DUP2 ADD DUP2 DUP2 GT PUSH2 0x1DF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20737570706C79206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SSTORE POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1F48 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x1F15 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH1 0x2 DUP4 ADD DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0x1E70 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x1FFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x200B JUMPI POP PUSH2 0xD02 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP10 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP1 DUP1 JUMPDEST DUP5 DUP2 EQ PUSH2 0x22E1 JUMPI PUSH1 0x0 DUP10 DUP10 DUP4 DUP2 DUP2 LT PUSH2 0x2050 JUMPI PUSH2 0x2050 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2065 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x20E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x20F8 JUMPI PUSH2 0x20F8 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH1 0x0 EQ PUSH2 0x2270 JUMPI DUP5 DUP2 ADD DUP6 DUP2 GT PUSH2 0x2175 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2076616C756573206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 SWAP6 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21FF JUMPI DUP2 DUP16 PUSH1 0x0 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x226E JUMP JUMPDEST DUP7 DUP3 GT ISZERO PUSH2 0x2269 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST SWAP4 DUP2 ADD SWAP4 JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x22CF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x2035 JUMP JUMPDEST POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x22F1 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x238D JUMPI DUP2 DUP4 SUB DUP4 DUP2 LT PUSH2 0x2362 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP14 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 ADD SWAP1 SSTORE JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x23CC JUMPI PUSH2 0x23CC DUP12 DUP11 DUP13 DUP6 PUSH2 0x2C4B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD DUP2 EQ PUSH2 0x2445 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x2453 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 EQ PUSH2 0x262A JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2472 JUMPI PUSH2 0x2472 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2512 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F206164647265737328302900000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2526 JUMPI PUSH2 0x2526 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x0 EQ PUSH2 0x25D2 JUMPI DUP4 DUP2 ADD DUP5 DUP2 GT PUSH2 0x25A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2076616C756573206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE SWAP4 POP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x2457 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x1834 JUMPI PUSH1 0x2 DUP6 ADD SLOAD DUP2 DUP2 ADD DUP2 DUP2 GT PUSH2 0x26A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20737570706C79206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x2 DUP8 ADD SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x6DD SWAP1 DUP5 SWAP1 PUSH2 0x3988 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x277B JUMPI PUSH2 0x277B DUP5 DUP4 DUP6 DUP5 PUSH2 0x2C4B JUMP JUMPDEST PUSH2 0x87C DUP5 DUP4 DUP4 PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5F6 PUSH1 0x1 PUSH32 0x93FE0FF7226B064A4A8F0B09910762AFB4BC2441835792C021FFD78CD513011E PUSH2 0x42CB JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x281E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E636F6E73697374656E7420617272617973000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x282C JUMPI POP PUSH2 0xEC7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP1 DUP1 JUMPDEST DUP5 DUP2 EQ PUSH2 0x2ADE JUMPI PUSH1 0x0 DUP10 DUP10 DUP4 DUP2 DUP2 LT PUSH2 0x2871 JUMPI PUSH2 0x2871 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2886 SWAP2 SWAP1 PUSH2 0x400A JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2905 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x2919 JUMPI PUSH2 0x2919 PUSH2 0x429C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH1 0x0 EQ PUSH2 0x2A6D JUMPI DUP5 DUP2 ADD DUP6 DUP2 GT PUSH2 0x2996 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2076616C756573206F766572666C6F7700000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 SWAP6 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x29FC JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP16 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE PUSH2 0x2A6B JUMP JUMPDEST DUP7 DUP3 GT ISZERO PUSH2 0x2A66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST SWAP4 DUP2 ADD SWAP4 JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x2ACC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 ADD PUSH2 0x2856 JUMP JUMPDEST POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2AEE JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2B8A JUMPI DUP2 DUP4 SUB DUP4 DUP2 LT PUSH2 0x2B5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP13 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2BA1 DUP4 DUP3 DUP5 PUSH2 0x1C57 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x13FB SWAP1 PUSH2 0x4334 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2CC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76616C20746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 0x2D2C JUMPI POP DUP2 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1BBB JUMPI DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x1B81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2E1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F1F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 SUB DUP2 DUP2 LT PUSH2 0x2EB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E742062616C616E63650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F1C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP9 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE SWAP2 DUP7 AND DUP2 MSTORE KECCAK256 DUP1 SLOAD DUP5 ADD SWAP1 SSTORE JUMPDEST POP POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x1599 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F8B DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x17E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xD02 JUMPI PUSH2 0xD02 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3A94 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0x3068 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207065726D69742066726F6D2061646472657373283029000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x30D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2065787069726564207065726D69740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP12 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP2 MLOAD PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP2 DUP6 ADD MSTORE DUP1 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP5 DUP12 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xC0 DUP1 DUP5 ADD DUP10 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP4 ADD SWAP1 SWAP4 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 SWAP1 PUSH2 0x3171 PUSH2 0x19C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x62 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP1 DUP6 MSTORE SWAP2 DUP5 ADD DUP1 DUP5 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP3 POP SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3235 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E76616C6964207065726D69740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST POP POP POP PUSH2 0x9E0 DUP8 DUP8 DUP8 PUSH2 0x62A PUSH2 0x148A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x87C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x19B4 JUMP JUMPDEST DUP3 PUSH2 0x87C DUP3 DUP5 DUP4 PUSH2 0x4553 JUMP JUMPDEST PUSH2 0x33C9 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2D9D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0xEC7 JUMPI PUSH2 0xEC7 DUP6 DUP7 DUP7 DUP7 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3A94 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x34AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x87C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x35BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3619 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x361E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x36BF JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x36C9 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x37E5 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37E5 SWAP2 SWAP1 PUSH2 0x466D JUMP JUMPDEST ISZERO PUSH2 0x37EF JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SWAP1 SUB PUSH2 0x3815 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x382A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE SWAP1 POP PUSH1 0x1F JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x386F JUMPI PUSH2 0x386F PUSH2 0x429C JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SUB PUSH2 0x38C4 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD PUSH2 0x385D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38E2 JUMPI PUSH2 0x38E2 PUSH2 0x4305 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x390C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 GT PUSH2 0x397F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x392B JUMPI PUSH2 0x392B PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3948 JUMPI PUSH2 0x3948 PUSH2 0x429C JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x1 ADD PUSH2 0x3912 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39EA DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3BBA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x6DD JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3A08 SWAP2 SWAP1 PUSH2 0x466D JUMP JUMPDEST PUSH2 0x6DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x4FC35859 SWAP1 PUSH2 0x3AEE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x468F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3B0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B31 SWAP2 SWAP1 PUSH2 0x46D8 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x1834 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2073616665207472616E736665722072656A6563746564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x676 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3BEE SWAP2 SWAP1 PUSH2 0x46F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3C2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3C30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3C41 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3C4C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3CE2 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x3CDB JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x3CDB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x93E JUMP JUMPDEST POP DUP2 PUSH2 0x676 JUMP JUMPDEST PUSH2 0x676 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3CF7 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x93E SWAP2 SWAP1 PUSH2 0x3DE4 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAC3 DUP2 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3D91 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3D79 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3DB2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3D76 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xAC3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D9A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3E37 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3E57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x3E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3EA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3EBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ECB DUP9 DUP4 DUP10 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3EE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EF1 DUP8 DUP3 DUP9 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3F1D DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3F2D DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3F63 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3F9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x3FAA DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FD3 DUP10 DUP4 DUP11 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3FEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FF9 DUP9 DUP3 DUP10 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x401C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAC3 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4040 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4064 DUP11 DUP4 DUP12 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x407D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4089 DUP11 DUP4 DUP12 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x40A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40AF DUP10 DUP3 DUP11 ADD PUSH2 0x3E45 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x40D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x411B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4126 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4136 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FF9 DUP9 DUP3 DUP10 ADD PUSH2 0x40C1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x4180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x418B DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x419B DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x41BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x41EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x41FA DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3F63 DUP2 PUSH2 0x3DF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x421D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4240 DUP6 DUP3 DUP7 ADD PUSH2 0x40C1 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x426D DUP2 PUSH2 0x3DF7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EF1 DUP8 DUP3 DUP9 ADD PUSH2 0x40C1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5F6 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x4348 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x4381 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x43AE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEC7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x43BA JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x43E7 JUMPI PUSH2 0x43E7 PUSH2 0x4305 JUMP JUMPDEST PUSH2 0x43FB DUP2 PUSH2 0x43F5 DUP5 SLOAD PUSH2 0x4334 JUMP JUMPDEST DUP5 PUSH2 0x4387 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x444E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4418 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x449B JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x447C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x44D7 JUMPI DUP8 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206D697373696E6720270000000000000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x451F DUP2 PUSH1 0x18 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3D76 JUMP JUMPDEST PUSH32 0x2720726F6C650000000000000000000000000000000000000000000000000000 PUSH1 0x18 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x1E ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x456B JUMPI PUSH2 0x456B PUSH2 0x4305 JUMP JUMPDEST PUSH2 0x457F DUP4 PUSH2 0x4579 DUP4 SLOAD PUSH2 0x4334 JUMP JUMPDEST DUP4 PUSH2 0x4387 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x45D1 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x459B JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4620 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x4600 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x465B JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x467F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x46CE PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3D9A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x46EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xAC3 DUP2 PUSH2 0x3D2B JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4707 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3D76 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 SWAP2 MSIZE SLOAD 0x5F 0x5C ADDRESS 0xE0 0xBD BALANCE 0xD6 PUSH1 0x4 BASEFEE SGT PUSH6 0xE80A01246FF2 DUP11 0xDE RETURNDATACOPY 0x27 RETURNDATACOPY LT 0xE3 MSTORE8 0xDC GASLIMIT PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1477:954:57:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:174:7;;;;;;:::i;:::-;;:::i;:::-;;;611:14:58;;604:22;586:41;;574:2;559:18;541:174:7;;;;;;;;608:123:29;;;:::i;:::-;;;;;;;:::i;674:194:26:-;;;;;;:::i;:::-;;:::i;1939:130::-;;;:::i;:::-;;;2078:25:58;;;2066:2;2051:18;1939:130:26;1932:177:58;1072:221:28;;;;;;:::i;:::-;;:::i;1120:244:26:-;;;;;;:::i;:::-;;:::i;727:114:10:-;816:18;727:114;;;3928:42:58;3916:55;;;3898:74;;3886:2;3871:18;727:114:10;3725:253:58;1607:257:2;;;;;;:::i;:::-;;:::i;:::-;;940:123:29;;;:::i;:::-;;;4475:4:58;4463:17;;;4445:36;;4433:2;4418:18;940:123:29;4303:184:58;1270:130:32;;;:::i;1406:224:26:-;;;;;;:::i;:::-;;:::i;1263:131:30:-;;;:::i;981:202:31:-;;;;;;:::i;:::-;;:::i;652:155:28:-;;;;;;:::i;:::-;;:::i;965:287:27:-;;;;;;:::i;:::-;;:::i;876:157:10:-;;;;;;:::i;:::-;1007:18;986:40;;;;;;;;876:157;1292:252:31;;;;;;:::i;:::-;;:::i;2102:145:26:-;;;;;;:::i;:::-;;:::i;2975:542:17:-;;;;;;:::i;:::-;;:::i;848:183:28:-;;;;;;:::i;:::-;;:::i;1041:137:32:-;;;;;;:::i;:::-;;:::i;689:229:27:-;;;;;;:::i;:::-;;:::i;2615:124:2:-;;;;;;:::i;:::-;;:::i;709:129:3:-;;;:::i;2914:153:2:-;;;;;;:::i;:::-;;:::i;772:127:29:-;;;:::i;1672:234:26:-;;;;;;:::i;:::-;;:::i;901:186::-;;;;;;:::i;:::-;;:::i;973:280:33:-;;;;;;:::i;:::-;;:::i;4239:571:17:-;;;;;;:::i;:::-;;:::i;717:285:32:-;;;;;;:::i;:::-;;:::i;825:46:31:-;;;;;2161:259:2;;;;;;:::i;:::-;;:::i;2280:175:26:-;;;;;;:::i;:::-;;:::i;1028:194:30:-;;;;;;:::i;:::-;;:::i;683:244:33:-;;;;;;:::i;:::-;;:::i;872:161:3:-;;;;;;:::i;:::-;;:::i;1812:450:17:-;;;;;;:::i;:::-;;:::i;541:174:7:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;:::-;636:72;541:174;-1:-1:-1;;541:174:7:o;608:123:29:-;656:13;688:36;:29;:27;:29::i;:::-;:34;:36::i;:::-;681:43;;608:123;:::o;674:194:26:-;758:11;781:59;811:12;:10;:12::i;:::-;825:7;834:5;781:21;:19;:21::i;:::-;:29;:59;;:29;:59::i;:::-;-1:-1:-1;857:4:26;674:194;;;;:::o;1939:130::-;1994:14;2027:35;:21;:19;:21::i;:::-;24230:8:47;;;;24135:110;1072:221:28;1184:4;1200:65;1236:12;:10;:12::i;:::-;1250:6;;1258;;1200:21;:19;:21::i;:::-;:35;:65;;;;:35;:65::i;:::-;-1:-1:-1;1282:4:28;1072:221;;;;;;;:::o;1120:244:26:-;1248:11;1271:65;1306:12;:10;:12::i;:::-;1320:4;1326:2;1330:5;1271:21;:19;:21::i;:::-;:34;:65;;;:34;:65::i;:::-;-1:-1:-1;1353:4:26;1120:244;;;;;:::o;1607:257:2:-;1676:16;1695:12;:10;:12::i;:::-;1676:31;;1717:66;1774:8;1717:33;:31;:33::i;:::-;:56;;:66::i;:::-;1793:64;1833:4;1839:7;1848:8;1793:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1666:198;1607:257;;:::o;940:123:29:-;992:5;1016:40;:29;:27;:29::i;:::-;3766:15:44;;;;;;3672:116;1270:130:32;1330:7;1356:37;:35;:37::i;1406:224:26:-;1505:11;1528:74;1568:12;:10;:12::i;:::-;1582:7;1591:10;1528:21;:19;:21::i;:::-;:39;:74;;:39;:74::i;1263:131:30:-;1315:13;1347:40;:29;:27;:29::i;981:202:31:-;1058:71;1103:11;1116:12;:10;:12::i;:::-;1058:29;:27;:29::i;:::-;:44;:71;:44;:71::i;:::-;1139:37;1166:2;1170:5;1139:21;:19;:21::i;:::-;:26;:37;:26;:37::i;:::-;981:202;;:::o;652:155:28:-;716:4;732:47;759:12;:10;:12::i;:::-;773:5;732:21;:19;:21::i;:::-;:26;:47;:26;:47::i;:::-;-1:-1:-1;796:4:28;;652:155;-1:-1:-1;652:155:28:o;965:287:27:-;1129:4;1145:79;1185:12;:10;:12::i;:::-;1199:4;1205:10;;1217:6;;1145:21;:19;:21::i;:::-;:39;:79;;;;;:39;:79::i;:::-;-1:-1:-1;1241:4:27;965:287;;;;;;;:::o;1292:252:31:-;1405:71;1450:11;1463:12;:10;:12::i;1405:71::-;1486:51;1518:10;;1486:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1486:51:31;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1530:6:31;;-1:-1:-1;1530:6:31;;;;1486:51;;;1530:6;;1486:51;1530:6;1486:51;;;;;;;;;-1:-1:-1;1486:21:31;;-1:-1:-1;1486:19:31;;-1:-1:-1;;1486:21:31:i;:::-;:31;:51;:31;:51::i;:::-;1292:252;;;;:::o;2102:145:26:-;2168:15;2202:38;2234:5;2202:21;:19;:21::i;:::-;:31;24583:17:47;;24549:15;24583:17;;;;;;;;;;;;;24474:133;2975:542:17;3138:70;3195:12;:10;:12::i;:::-;3138:33;:31;:33::i;:70::-;3235:8;3268:23;;;:51;;;;-1:-1:-1;3295:24:17;;;3268:51;3260:93;;;;;;;13015:2:58;3260:93:17;;;12997:21:58;13054:2;13034:18;;;13027:30;13093:31;13073:18;;;13066:59;13142:18;;3260:93:17;;;;;;;;;3392:9;3387:114;3408:6;3403:1;:11;3387:114;;3439:47;3462:8;;3471:1;3462:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3475:7;;3483:1;3475:10;;;;;;;:::i;:::-;;;;;;;3439:6;;3446:1;3439:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3416:3;;3387:114;;;;3128:389;2975:542;;;;;;:::o;848:183:28:-;930:4;946:57;977:12;:10;:12::i;:::-;991:4;997:5;946:21;:19;:21::i;:::-;:30;:57;;:30;:57::i;1041:137:32:-;1104:7;1130:41;1165:5;1130:27;:25;:27::i;689:229:27:-;805:4;821:69;857:12;:10;:12::i;:::-;871:10;;883:6;;821:21;:19;:21::i;:::-;:35;:69;;;;:35;:69::i;2615:124:2:-;2670:62;2713:12;:10;:12::i;:::-;2727:4;2670:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;2615:124;:::o;709:129:3:-;764:7;790:41;:33;:31;:33::i;:::-;3382:15:6;;;;3286:118;2914:153:2;2985:4;3008:52;3046:4;3052:7;3008:29;:27;:29::i;:::-;2716:4:5;2739:13;;;;;;;;;;;:22;;;;;;;;;;;;;;;2597:171;3008:52:2;3001:59;2914:153;-1:-1:-1;;;2914:153:2:o;772:127:29:-;822:13;854:38;:29;:27;:29::i;:::-;:36;:38::i;1672:234:26:-;1776:11;1799:79;1839:12;:10;:12::i;:::-;1853:7;1862:15;1799:21;:19;:21::i;:::-;:39;:79;;:39;:79::i;901:186::-;981:11;1004:55;1035:12;:10;:12::i;:::-;1049:2;1053:5;1004:21;:19;:21::i;:::-;:30;:55;;:30;:55::i;973:280:33:-;1134:4;1150:75;1189:12;:10;:12::i;:::-;1203:4;1209:2;1213:5;1220:4;;1150:21;:19;:21::i;:::-;:38;:75;;;;;:38;:75::i;4239:571:17:-;4408:70;4465:12;:10;:12::i;4408:70::-;4505:8;4538:26;;;:55;;;;-1:-1:-1;4568:25:17;;;4538:55;4530:97;;;;;;;13015:2:58;4530:97:17;;;12997:21:58;13054:2;13034:18;;;13027:30;13093:31;13073:18;;;13066:59;13142:18;;4530:97:17;12813:353:58;4530:97:17;4666:9;4661:133;4682:6;4677:1;:11;4661:133;;4713:9;;4723:1;4713:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4747:4;4754:8;;4763:1;4754:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4767:8;;4776:1;4767:11;;;;;;;:::i;:::-;4713:66;;;;;;;;;;14107:42:58;14176:15;;;4713:66:17;;;14158:34:58;14228:15;;;;14208:18;;;14201:43;-1:-1:-1;4767:11:17;;;;;;14260:18:58;;;14253:34;14070:18;;4713:66:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4690:3;;;;;4661:133;;717:285:32;919:76;954:5;961:7;970:5;977:8;987:1;990;993;919:27;:25;:27::i;:::-;:34;:76;;;;;;:34;:76::i;:::-;717:285;;;;;;;:::o;2161:259:2:-;2231:16;2250:12;:10;:12::i;:::-;2231:31;;2272:66;2329:8;2272:33;:31;:33::i;:66::-;2348:65;2389:4;2395:7;2404:8;2348:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;2280:175:26:-;2369:13;2401:47;2433:5;2440:7;2401:21;:19;:21::i;:::-;:31;:47;25182:19:47;;;;25150:13;25182:19;;;:12;;;;;:19;;;;;;;;:28;;;;;;;;;;;25028:189;1028:194:30;1089:70;1146:12;:10;:12::i;1089:70::-;1169:46;1211:3;;1169:29;:27;:29::i;:::-;:41;:46;:41;:46::i;683:244:33:-;818:4;834:65;869:12;:10;:12::i;:::-;883:2;887:5;894:4;;834:21;:19;:21::i;:::-;:34;:65;;;;:34;:65::i;872:161:3:-;951:75;1003:12;:10;:12::i;:::-;1017:8;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1812:450:17:-;1924:70;1981:12;:10;:12::i;1924:70::-;2021:8;2054:24;;;2046:66;;;;;;;13015:2:58;2046:66:17;;;12997:21:58;13054:2;13034:18;;;13027:30;13093:31;13073:18;;;13066:59;13142:18;;2046:66:17;12813:353:58;2046:66:17;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;1614:293:47:-;1649:53;1705:34;:32;:34::i;:::-;1649:90;-1:-1:-1;1749:66:47;1649:90;1784:24;1810:4;1749:34;:66::i;:::-;1825:75;:12;1860:33;1895:4;1825:34;:75::i;3794:174:44:-;3835:16;;661:72;732:1;669:59;661:72;:::i;1294:387::-;1467:1;:23;1481:9;1467:1;:23;:::i;:::-;-1:-1:-1;1500:13:44;;;:27;1516:11;1500:13;:27;:::i;:::-;-1:-1:-1;1537:15:44;;;:31;;;;;;;;;;1578:96;1635:32;-1:-1:-1;1578:34:44;:32;:34::i;:::-;:56;:96;:56;:96::i;3737:174:6:-;3778:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;1420:26;;;;1416:152;;1462:30;;;;;;;;;;;;1511:46;;-1:-1:-1;;1511:46:6;;-1:-1:-1;;1511:46:6;1416:152;1577:89;1634:25;1661:4;1577:34;:32;:34::i;763:138:45:-;798:96;855:32;889:4;798:34;:32;:34::i;:96::-;763:138::o;2515:151:47:-;2563:96;2620:32;2654:4;2563:34;:32;:34::i;2757:151::-;2805:96;2862:32;2896:4;2805:34;:32;:34::i;2263:161::-;2316:101;2373:37;2412:4;2316:34;:32;:34::i;2004:163::-;2058:102;2115:38;2155:4;2058:34;:32;:34::i;1153:136:46:-;1188:94;1245:30;1277:4;1188:34;1643:174:9;1684:16;;287:79;365:1;295:66;287:79;:::i;670:276::-;812:35;827:20;812:35;;;804:79;;;;;;;18061:2:58;804:79:9;;;18043:21:58;18100:2;18080:18;;;18073:30;18139:33;18119:18;;;18112:61;18190:18;;804:79:9;17859:355:58;804:79:9;893:34;;;;;:21;:34;;;;;;;;;;;;:46;;;;;;;;;;;;;670:276::o;1297:340::-;1385:14;1415:35;1430:20;1415:35;;;1411:78;;-1:-1:-1;1473:5:9;1466:12;;1411:78;1502:40;;;;;1498:82;;-1:-1:-1;1565:4:9;1558:11;;1498:82;-1:-1:-1;1596:34:9;;:21;:34;;;;;;;;;;;;;;;1297:340::o;2792:115:44:-;2847:23;2889:1;:11;;2882:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2792:115;;;:::o;2070:175:57:-;2171:7;2197:41;:39;:41::i;25223:174:47:-;25264:16;;1200:64;1263:1;1208:51;1200:64;:::i;3336:301::-;3483:21;;;3475:63;;;;;;;18421:2:58;3475:63:47;;;18403:21:58;18460:2;18440:18;;;18433:30;18499:31;18479:18;;;18472:59;18548:18;;3475:63:47;18219:353:58;3475:63:47;3548:19;;;;;;;;:12;;;:19;;;;;;;;:28;;;;;;;;;;;;;:36;;;3599:31;;2078:25:58;;;3599:31:47;;2051:18:58;3599:31:47;;;;;;;;3336:301;;;;:::o;22711:1259::-;22896:6;22927:23;;;22919:62;;;;;;;18779:2:58;22919:62:47;;;18761:21:58;18818:2;18798:18;;;18791:30;18857:28;18837:18;;;18830:56;18903:18;;22919:62:47;18577:350:58;22919:62:47;22996:6;23006:1;22996:11;22992:24;;23009:7;;;22992:24;23026:18;23083:9;23078:725;23099:6;23094:1;:11;23078:725;;23130:12;23145:6;;23152:1;23145:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;23130:24;;23172:13;23188:6;;23195:1;23188:9;;;;;;;:::i;:::-;;;;;;;23172:25;;23228:6;23220:14;;:4;:14;;;23216:101;;23258:40;:1;23278:4;23284:6;23292:5;23258:19;:40::i;:::-;23339:10;;23335:397;;23391:16;;;23373:15;23391:16;;;;;;;;;;;23450:15;;;23495:20;;;23487:60;;;;;;;19134:2:58;23487:60:47;;;19116:21:58;19173:2;19153:18;;;19146:30;19212:29;19192:18;;;19185:57;19259:18;;23487:60:47;18932:351:58;23487:60:47;23569:16;;;:10;:16;;;;;;;;;;:29;-1:-1:-1;23620:19:47;;;;23335:397;23755:33;;2078:25:58;;;23778:1:47;;23755:33;;;;;;2066:2:58;2051:18;23755:33:47;;;;;;;-1:-1:-1;;23107:3:47;;23078:725;;;-1:-1:-1;23821:15:47;;23817:137;;23856:8;;;:22;;;;;;;22869:1101;;22711:1259;;;;;;:::o;8170:290::-;8344:6;8336:14;;:4;:14;;;8332:85;;8366:40;:1;8386:4;8392:6;8400:5;8366:19;:40::i;:::-;8426:27;:1;8437:4;8443:2;8447:5;8426:10;:27::i;:::-;8170:290;;;;;:::o;3570:161:6:-;3680:15;;;3669:26;;;3680:15;;3669:26;3661:63;;;;;;;19490:2:58;3661:63:6;;;19472:21:58;19529:2;19509:18;;;19502:30;19568:26;19548:18;;;19541:54;19612:18;;3661:63:6;19288:348:58;3235:174:5;3276:16;;393:67;459:1;401:54;393:67;:::i;987:289::-;2716:4;2739:13;;;;;;;;;;;:22;;;;;;;;;;;;;1130:140;;1175:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1200:4;1175:29;;;1223:36;;19843:25:58;;;19945:18;;;19938:43;20017:15;;;19997:18;;;19990:43;;;;1223:36:5;;19831:2:58;19816:18;1223:36:5;;;;;;;;987:289;;;;:::o;4226:545:46:-;4277:7;4355:9;4461:95;4594:36;:29;:27;:29::i;:36::-;4578:54;;;;;;;4429:321;;;;;;20303:25:58;;;;20344:18;;;20337:34;;;;4654:14:46;20387:18:58;;;20380:34;20430:18;;;20423:34;;;4727:4:46;20473:19:58;;;20466:84;20275:19;;4429:321:46;;;;;;;;;;;;4402:362;;;;;;4383:381;;;4226:545;:::o;4218:647:47:-;4375:21;;;4367:63;;;;;;;18421:2:58;4367:63:47;;;18403:21:58;18460:2;18440:18;;;18433:30;18499:31;18479:18;;;18472:59;18548:18;;4367:63:47;18219:353:58;4367:63:47;4461:19;;;;4440:18;4461:19;;;:12;;;:19;;;;;;;;:28;;;;;;;;;;4503:10;;4499:309;;4580:18;;;4624:25;;;4616:63;;;;;;;20763:2:58;4616:63:47;;;20745:21:58;20802:2;20782:18;;;20775:30;20841:27;20821:18;;;20814:55;20886:18;;4616:63:47;20561:349:58;4616:63:47;4697:19;;;;;;;;:12;;;:19;;;;;;;;:28;;;;;;;;;:43;;;4728:12;-1:-1:-1;4499:309:47;4838:7;4822:36;;4831:5;4822:36;;;4847:10;4822:36;;;;2078:25:58;;2066:2;2051:18;;1932:177;4822:36:47;;;;;;;;4357:508;4218:647;;;;:::o;1282:174:45:-;1323:16;;598:72;669:1;606:59;598:72;:::i;2948:281:5:-;2716:4;2739:13;;;;;;;;;;;:22;;;;;;;;;;;;;3075:148;;3179:20;:4;:18;:20::i;:::-;3134:76;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;3120:92;;;;;;;;:::i;17372:576:47:-;17488:16;;;17480:54;;;;;;;21738:2:58;17480:54:47;;;21720:21:58;21777:2;21757:18;;;21750:30;21816:27;21796:18;;;21789:55;21861:18;;17480:54:47;21536:349:58;17480:54:47;17548:10;;17544:352;;17591:8;;;;17661:14;;;17701:18;;;17693:53;;;;;;;22092:2:58;17693:53:47;;;22074:21:58;22131:2;22111:18;;;22104:30;22170:24;22150:18;;;22143:52;22212:18;;17693:53:47;21890:346:58;17693:53:47;17764:8;;;:20;-1:-1:-1;17802:14:47;;;:10;:14;;;;;;;;;;:23;;;;;;17544:352;17910:31;;2078:25:58;;;17910:31:47;;;;17927:1;;17910:31;;2066:2:58;2051:18;17910:31:47;;;;;;;;17372:576;;;:::o;20343:534::-;20457:10;;20453:369;;20501:16;;;20483:15;20501:16;;;;;;;;;;;20580:15;;;20621:20;;;20613:60;;;;;;;19134:2:58;20613:60:47;;;19116:21:58;19173:2;19153:18;;;19146:30;19212:29;19192:18;;;19185:57;19259:18;;20613:60:47;18932:351:58;20613:60:47;20691:16;;;:10;:16;;;;;;;;;;:29;-1:-1:-1;20738:8:47;;;:17;;;;;;;20453:369;20837:33;;2078:25:58;;;20860:1:47;;20837:33;;;;;;2066:2:58;2051:18;20837:33:47;1932:177:58;11996:1876:47;12211:10;12246:23;;;12238:62;;;;;;;18779:2:58;12238:62:47;;;18761:21:58;18818:2;18798:18;;;18791:30;18857:28;18837:18;;;18830:56;18903:18;;12238:62:47;18577:350:58;12238:62:47;12315:6;12325:1;12315:11;12311:24;;12328:7;;;12311:24;12363:16;;;12345:15;12363:16;;;;;;;;;;;;12345:15;;12482:863;12503:6;12498:1;:11;12482:863;;12534:10;12547;;12558:1;12547:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;12534:26;-1:-1:-1;12586:16:47;;;12578:58;;;;;;;22443:2:58;12578:58:47;;;22425:21:58;22482:2;22462:18;;;22455:30;22521:31;22501:18;;;22494:59;22570:18;;12578:58:47;22241:353:58;12578:58:47;12655:13;12671:6;;12678:1;12671:9;;;;;;;:::i;:::-;;;;;;;12655:25;;12703:5;12712:1;12703:10;12699:583;;12761:18;;;12809:26;;;12801:61;;;;;;;22801:2:58;12801:61:47;;;22783:21:58;22840:2;22820:18;;;22813:30;22879:24;22859:18;;;22852:52;22921:18;;12801:61:47;22599:346:58;12801:61:47;12897:13;12884:26;;12944:2;12936:10;;:4;:10;;;12932:332;;12992:5;12974:1;:10;;:14;12985:2;12974:14;;;;;;;;;;;;;;;;:23;;;;;;;;;;;12932:332;;;13069:7;13060:5;:16;;13052:56;;;;;;;19134:2:58;13052:56:47;;;19116:21:58;19173:2;19153:18;;;19146:30;19212:29;19192:18;;;19185:57;19259:18;;13052:56:47;18932:351:58;13052:56:47;13134:31;;;;12932:332;12715:567;12699:583;13320:2;13305:25;;13314:4;13305:25;;;13324:5;13305:25;;;;2078::58;;2066:2;2051:18;;1932:177;13305:25:47;;;;;;;;-1:-1:-1;;12511:3:47;;12482:863;;;-1:-1:-1;13363:15:47;;;;;:55;;;13396:22;13382:10;:36;;13363:55;13359:397;;;13459:20;;;13505;;;13497:60;;;;;;;19134:2:58;13497:60:47;;;19116:21:58;19173:2;19153:18;;;19146:30;19212:29;19192:18;;;19185:57;19259:18;;13497:60:47;18932:351:58;13497:60:47;13631:16;;;:10;:16;;;;;;;;;;13650:35;;;13631:54;;13359:397;13788:6;13780:14;;:4;:14;;;13776:90;;13810:45;:1;13830:4;13836:6;13844:10;13810:19;:45::i;:::-;12184:1688;;;;11996:1876;;;;;;;:::o;18587:1219::-;18744:17;;18789:13;;18779:23;;18771:62;;;;;;;18779:2:58;18771:62:47;;;18761:21:58;18818:2;18798:18;;;18791:30;18857:28;18837:18;;;18830:56;18903:18;;18771:62:47;18577:350:58;18771:62:47;18848:6;18858:1;18848:11;18844:24;;18861:7;18587:1219;;;:::o;18844:24::-;18878:18;18935:9;18930:601;18951:6;18946:1;:11;18930:601;;18982:10;18995;19006:1;18995:13;;;;;;;;:::i;:::-;;;;;;;18982:26;;19048:1;19034:16;;:2;:16;;;19026:54;;;;;;;21738:2:58;19026:54:47;;;21720:21:58;21777:2;21757:18;;;21750:30;21816:27;21796:18;;;21789:55;21861:18;;19026:54:47;21536:349:58;19026:54:47;19099:13;19115:6;19122:1;19115:9;;;;;;;;:::i;:::-;;;;;;;19099:25;;19146:5;19155:1;19146:10;19142:321;;19204:18;;;19252:26;;;19244:61;;;;;;;22801:2:58;19244:61:47;;;22783:21:58;22840:2;22820:18;;;22813:30;22879:24;22859:18;;;22852:52;22921:18;;19244:61:47;22599:346:58;19244:61:47;19375:14;;;:10;:14;;;;;;;;;;:23;;;;;;19340:13;-1:-1:-1;19142:321:47;19485:31;;2078:25:58;;;19485:31:47;;;;19502:1;;19485:31;;2066:2:58;2051:18;19485:31:47;;;;;;;-1:-1:-1;;18959:3:47;;18930:601;;;-1:-1:-1;19549:15:47;;19545:245;;19601:8;;;;19647:19;;;19692:18;;;19684:53;;;;;;;22092:2:58;19684:53:47;;;22074:21:58;22131:2;22111:18;;;22104:30;22170:24;22150:18;;;22143:52;22212:18;;19684:53:47;21890:346:58;19684:53:47;19755:8;;;:20;-1:-1:-1;18717:1089:47;;18587:1219;;;:::o;763:205:53:-;902:58;;;23154:42:58;23142:55;;902:58:53;;;23124:74:58;23214:18;;;;23207:34;;;902:58:53;;;;;;;;;;23097:18:58;;;;902:58:53;;;;;;;;;;925:23;902:58;;;875:86;;895:5;;875:19;:86::i;21565:258:47:-;21715:6;21707:14;;:4;:14;;;21703:85;;21737:40;:1;21757:4;21763:6;21771:5;21737:19;:40::i;:::-;21797:19;:1;21804:4;21810:5;21797:6;:19::i;4777:174:46:-;4818:16;;772:70;841:1;780:57;772:70;:::i;9283:1746:47:-;9470:10;9505:23;;;9497:62;;;;;;;18779:2:58;9497:62:47;;;18761:21:58;18818:2;18798:18;;;18791:30;18857:28;18837:18;;;18830:56;18903:18;;9497:62:47;18577:350:58;9497:62:47;9574:6;9584:1;9574:11;9570:24;;9587:7;;;9570:24;9622:16;;;9604:15;9622:16;;;;;;;;;;;;9604:15;;9741:861;9762:6;9757:1;:11;9741:861;;9793:10;9806;;9817:1;9806:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;9793:26;-1:-1:-1;9845:16:47;;;9837:58;;;;;;;22443:2:58;9837:58:47;;;22425:21:58;22482:2;22462:18;;;22455:30;22521:31;22501:18;;;22494:59;22570:18;;9837:58:47;22241:353:58;9837:58:47;9914:13;9930:6;;9937:1;9930:9;;;;;;;:::i;:::-;;;;;;;9914:25;;9961:5;9970:1;9961:10;9957:583;;10019:18;;;10067:26;;;10059:61;;;;;;;22801:2:58;10059:61:47;;;22783:21:58;22840:2;22820:18;;;22813:30;22879:24;22859:18;;;22852:52;22921:18;;10059:61:47;22599:346:58;10059:61:47;10155:13;10142:26;;10202:2;10194:10;;:4;:10;;;10190:332;;10232:14;;;:10;:14;;;;;;;;;;:23;;;;;;10190:332;;;10327:7;10318:5;:16;;10310:56;;;;;;;19134:2:58;10310:56:47;;;19116:21:58;19173:2;19153:18;;;19146:30;19212:29;19192:18;;;19185:57;19259:18;;10310:56:47;18932:351:58;10310:56:47;10392:31;;;;10190:332;9973:567;9957:583;10577:2;10562:25;;10571:4;10562:25;;;10581:5;10562:25;;;;2078::58;;2066:2;2051:18;;1932:177;10562:25:47;;;;;;;;-1:-1:-1;;9770:3:47;;9741:861;;;-1:-1:-1;10620:15:47;;;;;:55;;;10653:22;10639:10;:36;;10620:55;10616:397;;;10716:20;;;10762;;;10754:60;;;;;;;19134:2:58;10754:60:47;;;19116:21:58;19173:2;19153:18;;;19146:30;19212:29;19192:18;;;19185:57;19259:18;;10754:60:47;18932:351:58;10754:60:47;10888:16;;;:10;:16;;;;;;;;;;10907:35;;;10888:54;;10616:397;9443:1586;;;;9283:1746;;;;;;:::o;2179:243:5:-;2298:30;:1;2315:4;2321:6;2298:16;:30::i;:::-;2362:5;2338:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2382:33;;19843:25:58;;;19945:18;;;19938:43;;;19997:18;;19990:43;;;;2382:33:5;;19831:2:58;19816:18;2382:33:5;;;;;;;2179:243;;;:::o;3024:121:44:-;3081:25;3125:1;:13;;3118:20;;;;;:::i;5468:810:47:-;5625:21;;;5617:63;;;;;;;18421:2:58;5617:63:47;;;18403:21:58;18460:2;18440:18;;;18433:30;18499:31;18479:18;;;18472:59;18548:18;;5617:63:47;18219:353:58;5617:63:47;5711:19;;;;5690:18;5711:19;;;:12;;;:19;;;;;;;;:28;;;;;;;;;;5768:17;5754:31;;;;;:45;;-1:-1:-1;5789:10:47;;;5754:45;5750:471;;;5989:18;;;6033:25;;;6025:67;;;;;;;23454:2:58;6025:67:47;;;23436:21:58;23493:2;23473:18;;;23466:30;23532:31;23512:18;;;23505:59;23581:18;;6025:67:47;23252:353:58;6773:643:47;6915:16;;;6907:58;;;;;;;22443:2:58;6907:58:47;;;22425:21:58;22482:2;22462:18;;;22455:30;22521:31;22501:18;;;22494:59;22570:18;;6907:58:47;22241:353:58;6907:58:47;6980:10;;6976:393;;7024:16;;;7006:15;7024:16;;;;;;;;;;;7103:15;;;7144:20;;;7136:60;;;;;;;19134:2:58;7136:60:47;;;19116:21:58;19173:2;19153:18;;;19146:30;19212:29;19192:18;;;19185:57;19259:18;;7136:60:47;18932:351:58;7136:60:47;7226:2;7218:10;;:4;:10;;;7214:131;;7252:16;;;;:10;:16;;;;;;;;;;;:29;;;7303:14;;;;;;:23;;;;;;7214:131;7054:305;6992:377;6976:393;7399:2;7384:25;;7393:4;7384:25;;;7403:5;7384:25;;;;2078::58;;2066:2;2051:18;;1932:177;16450:347:47;16645:39;:1;16660:6;16668:4;16674:2;16678:5;16645:14;:39::i;:::-;16698:13;;;1465:19:54;:23;16694:97:47;;16729:51;16750:6;16758:4;16764:2;16768:5;16775:4;;16729:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16729:20:47;;-1:-1:-1;;;16729:51:47:i;2102:802:46:-;2330:19;;;2322:61;;;;;;;23812:2:58;2322:61:46;;;23794:21:58;23851:2;23831:18;;;23824:30;23890:31;23870:18;;;23863:59;23939:18;;2322:61:46;23610:353:58;2322:61:46;2420:8;2401:15;:27;;2393:61;;;;;;;24170:2:58;2393:61:46;;;24152:21:58;24209:2;24189:18;;;24182:30;24248:23;24228:18;;;24221:51;24289:18;;2393:61:46;23968:345:58;2393:61:46;2570:23;;;;2488:18;2570:23;;;;;;;;;;;:25;;;;;;;;2519:87;;968:95;2519:87;;;24605:25:58;24707:18;;;24700:43;;;;24779:15;;;24759:18;;;24752:43;24811:18;;;24804:34;;;24854:19;;;24847:35;;;;24898:19;;;;24891:35;;;2519:87:46;;;;;;;;;;24577:19:58;;;;2519:87:46;;;2509:98;;;;;;;;2675:18;:16;:18::i;:::-;2646:60;;25207:66:58;2646:60:46;;;25195:79:58;25290:11;;;25283:27;;;;25326:12;;;25319:28;;;25363:12;;2646:60:46;;;;;;;;;;;;;2636:71;;2646:60;2636:71;;;;2721:14;2738:24;;;;;;;;;25613:25:58;;;25686:4;25674:17;;25654:18;;;25647:45;;;;25708:18;;;25701:34;;;25751:18;;;25744:34;;;2636:71:46;;-1:-1:-1;2721:14:46;2738:24;;25585:19:58;;2738:24:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2721:41;;2794:5;2784:15;;:6;:15;;;2776:49;;;;;;;25991:2:58;2776:49:46;;;25973:21:58;26030:2;26010:18;;;26003:30;26069:23;26049:18;;;26042:51;26110:18;;2776:49:46;25789:345:58;2776:49:46;2464:372;;;2845:52;2875:5;2882:7;2891:5;2845:21;:19;:21::i;1654:290:5:-;2716:4;2739:13;;;;;;;;;;;:22;;;;;;;;;;;;;1798:140;;;1867:5;1842:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1891:36;;19843:25:58;;;19945:18;;;19938:43;20017:15;;;19997:18;;;19990:43;;;;1891:36:5;;19831:2:58;19816:18;1891:36:5;19641:398:58;977:97:45;1056:1;:11;1064:3;;1056:1;:11;:::i;14925:305:47:-;15092:27;:1;15103:4;15109:2;15113:5;15092:10;:27::i;:::-;15133:13;;;1465:19:54;:23;15129:95:47;;15164:49;15185:4;15191;15197:2;15201:5;15208:4;;15164:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15164:20:47;;-1:-1:-1;;;15164:49:47:i;2760:399:6:-;2912:15;;;;;;;2945:23;;;;2937:60;;;;;;;19490:2:58;2937:60:6;;;19472:21:58;19529:2;19509:18;;;19502:30;19568:26;19548:18;;;19541:54;19612:18;;2937:60:6;19288:348:58;2937:60:6;3028:8;3011:25;;:13;:25;;;3007:146;;3052:26;;;;;;;;;;;;;3097:45;;;;;;;;-1:-1:-1;;3097:45:6;2878:281;2760:399;;;:::o;2412:312:54:-;2526:6;2501:21;:31;;2493:73;;;;;;;27671:2:58;2493:73:54;;;27653:21:58;27710:2;27690:18;;;27683:30;27749:31;27729:18;;;27722:59;27798:18;;2493:73:54;27469:353:58;2493:73:54;2578:12;2596:9;:14;;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;;;;28239:2:58;2639:78:54;;;28221:21:58;28278:2;28258:18;;;28251:30;28317:34;28297:18;;;28290:62;28388:28;28368:18;;;28361:56;28434:19;;2639:78:54;28037:422:58;781:743:11;834:7;1044:10;1058:9;1044:23;;:47;;-1:-1:-1;1089:2:11;1071:8;:20;1044:47;1040:95;;;-1:-1:-1;1114:10:11;;781:743::o;1040:95::-;461:23:14;465:14;461:23;448:37;444:2;440:46;1369:18:11;1347:41;;:10;:41;;:103;;-1:-1:-1;1392:58:11;;;;;:38;28717:15:58;;;1392:58:11;;;28699:34:58;1439:10:11;28749:18:58;;;28742:43;1392:18:11;:38;;;;28611:18:58;;1392:58:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1343:147;;;1473:6;781:743;-1:-1:-1;781:743:11:o;1343:147::-;1507:10;1500:17;;;781:743;:::o;1022:577:49:-;1083:13;1145:4;1136:13;;;1132:28;;-1:-1:-1;;1151:9:49;;;;;;;;;-1:-1:-1;1151:9:49;;;1022:577::o;1132:28::-;1174:24;1224:5;1207:23;;;;;;29207:19:58;;29251:2;29242:12;;29078:182;1207:23:49;;;;;;;;;;;;;;;-1:-1:-1;1259:2:49;1275:101;1310:11;1322:3;1310:16;;;;;;;;:::i;:::-;;;;;;;1330:1;1310:21;1333:5;1306:32;1356:5;;1275:101;;;1389:24;1426:3;1432:1;1426:7;1416:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1416:18:49;;1389:45;;1453:9;1448:95;1469:3;1464:1;:8;1448:95;;1514:11;1526:1;1514:14;;;;;;;;:::i;:::-;;;;;;;;;1497:11;1509:1;1497:14;;;;;;;;:::i;:::-;;;;:31;;;;;;;;;;-1:-1:-1;1474:3:49;;1448:95;;;-1:-1:-1;1570:11:49;1022:577;-1:-1:-1;;;;1022:577:49:o;3747:706:53:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:53;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;29467:2:58;4351:85:53;;;29449:21:58;29506:2;29486:18;;;29479:30;29545:34;29525:18;;;29518:62;29616:12;29596:18;;;29589:40;29646:19;;4351:85:53;29265:406:58;25802:298:47;25980:61;;1314:39;25980:61;;;1314:39;25980:34;;;;1314:39;;25980:61;;26015:6;;26023:4;;26029:5;;26036:4;;25980:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:79;;;25972:121;;;;;;;30649:2:58;25972:121:47;;;30631:21:58;30688:2;30668:18;;;30661:30;30727:31;30707:18;;;30700:59;30776:18;;25972:121:47;30447:353:58;3873:223:54;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4006;5241;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:54:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;1465:19;;;;7908:60;;;;;;;31706:2:58;7908:60:54;;;31688:21:58;31745:2;31725:18;;;31718:30;31784:31;31764:18;;;31757:59;31833:18;;7908:60:54;31504:353:58;7908:60:54;-1:-1:-1;8003:10:54;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;14:177:58:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:58;862:16;;855:27;638:250::o;893:330::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1137:2;1125:15;1142:66;1121:88;1112:98;;;;1212:4;1108:109;;893:330;-1:-1:-1;;893:330:58:o;1228:220::-;1377:2;1366:9;1359:21;1340:4;1397:45;1438:2;1427:9;1423:18;1415:6;1397:45;:::i;1453:154::-;1539:42;1532:5;1528:54;1521:5;1518:65;1508:93;;1597:1;1594;1587:12;1612:315;1680:6;1688;1741:2;1729:9;1720:7;1716:23;1712:32;1709:52;;;1757:1;1754;1747:12;1709:52;1796:9;1783:23;1815:31;1840:5;1815:31;:::i;:::-;1865:5;1917:2;1902:18;;;;1889:32;;-1:-1:-1;;;1612:315:58:o;2114:367::-;2177:8;2187:6;2241:3;2234:4;2226:6;2222:17;2218:27;2208:55;;2259:1;2256;2249:12;2208:55;-1:-1:-1;2282:20:58;;2325:18;2314:30;;2311:50;;;2357:1;2354;2347:12;2311:50;2394:4;2386:6;2382:17;2370:29;;2454:3;2447:4;2437:6;2434:1;2430:14;2422:6;2418:27;2414:38;2411:47;2408:67;;;2471:1;2468;2461:12;2408:67;2114:367;;;;;:::o;2486:773::-;2608:6;2616;2624;2632;2685:2;2673:9;2664:7;2660:23;2656:32;2653:52;;;2701:1;2698;2691:12;2653:52;2741:9;2728:23;2770:18;2811:2;2803:6;2800:14;2797:34;;;2827:1;2824;2817:12;2797:34;2866:70;2928:7;2919:6;2908:9;2904:22;2866:70;:::i;:::-;2955:8;;-1:-1:-1;2840:96:58;-1:-1:-1;3043:2:58;3028:18;;3015:32;;-1:-1:-1;3059:16:58;;;3056:36;;;3088:1;3085;3078:12;3056:36;;3127:72;3191:7;3180:8;3169:9;3165:24;3127:72;:::i;:::-;2486:773;;;;-1:-1:-1;3218:8:58;-1:-1:-1;;;;2486:773:58:o;3264:456::-;3341:6;3349;3357;3410:2;3398:9;3389:7;3385:23;3381:32;3378:52;;;3426:1;3423;3416:12;3378:52;3465:9;3452:23;3484:31;3509:5;3484:31;:::i;:::-;3534:5;-1:-1:-1;3591:2:58;3576:18;;3563:32;3604:33;3563:32;3604:33;:::i;:::-;3264:456;;3656:7;;-1:-1:-1;;;3710:2:58;3695:18;;;;3682:32;;3264:456::o;3983:315::-;4051:6;4059;4112:2;4100:9;4091:7;4087:23;4083:32;4080:52;;;4128:1;4125;4118:12;4080:52;4164:9;4151:23;4141:33;;4224:2;4213:9;4209:18;4196:32;4237:31;4262:5;4237:31;:::i;:::-;4287:5;4277:15;;;3983:315;;;;;:::o;4674:180::-;4733:6;4786:2;4774:9;4765:7;4761:23;4757:32;4754:52;;;4802:1;4799;4792:12;4754:52;-1:-1:-1;4825:23:58;;4674:180;-1:-1:-1;4674:180:58:o;4859:908::-;4990:6;4998;5006;5014;5022;5075:2;5063:9;5054:7;5050:23;5046:32;5043:52;;;5091:1;5088;5081:12;5043:52;5130:9;5117:23;5149:31;5174:5;5149:31;:::i;:::-;5199:5;-1:-1:-1;5255:2:58;5240:18;;5227:32;5278:18;5308:14;;;5305:34;;;5335:1;5332;5325:12;5305:34;5374:70;5436:7;5427:6;5416:9;5412:22;5374:70;:::i;:::-;5463:8;;-1:-1:-1;5348:96:58;-1:-1:-1;5551:2:58;5536:18;;5523:32;;-1:-1:-1;5567:16:58;;;5564:36;;;5596:1;5593;5586:12;5564:36;;5635:72;5699:7;5688:8;5677:9;5673:24;5635:72;:::i;:::-;4859:908;;;;-1:-1:-1;4859:908:58;;-1:-1:-1;5726:8:58;;5609:98;4859:908;-1:-1:-1;;;4859:908:58:o;5772:247::-;5831:6;5884:2;5872:9;5863:7;5859:23;5855:32;5852:52;;;5900:1;5897;5890:12;5852:52;5939:9;5926:23;5958:31;5983:5;5958:31;:::i;6024:1103::-;6197:6;6205;6213;6221;6229;6237;6290:2;6278:9;6269:7;6265:23;6261:32;6258:52;;;6306:1;6303;6296:12;6258:52;6346:9;6333:23;6375:18;6416:2;6408:6;6405:14;6402:34;;;6432:1;6429;6422:12;6402:34;6471:70;6533:7;6524:6;6513:9;6509:22;6471:70;:::i;:::-;6560:8;;-1:-1:-1;6445:96:58;-1:-1:-1;6648:2:58;6633:18;;6620:32;;-1:-1:-1;6664:16:58;;;6661:36;;;6693:1;6690;6683:12;6661:36;6732:72;6796:7;6785:8;6774:9;6770:24;6732:72;:::i;:::-;6823:8;;-1:-1:-1;6706:98:58;-1:-1:-1;6911:2:58;6896:18;;6883:32;;-1:-1:-1;6927:16:58;;;6924:36;;;6956:1;6953;6946:12;6924:36;;6995:72;7059:7;7048:8;7037:9;7033:24;6995:72;:::i;:::-;6024:1103;;;;-1:-1:-1;6024:1103:58;;-1:-1:-1;6024:1103:58;;7086:8;;6024:1103;-1:-1:-1;;;6024:1103:58:o;7548:347::-;7599:8;7609:6;7663:3;7656:4;7648:6;7644:17;7640:27;7630:55;;7681:1;7678;7671:12;7630:55;-1:-1:-1;7704:20:58;;7747:18;7736:30;;7733:50;;;7779:1;7776;7769:12;7733:50;7816:4;7808:6;7804:17;7792:29;;7868:3;7861:4;7852:6;7844;7840:19;7836:30;7833:39;7830:59;;;7885:1;7882;7875:12;7900:754;7997:6;8005;8013;8021;8029;8082:3;8070:9;8061:7;8057:23;8053:33;8050:53;;;8099:1;8096;8089:12;8050:53;8138:9;8125:23;8157:31;8182:5;8157:31;:::i;:::-;8207:5;-1:-1:-1;8264:2:58;8249:18;;8236:32;8277:33;8236:32;8277:33;:::i;:::-;8329:7;-1:-1:-1;8383:2:58;8368:18;;8355:32;;-1:-1:-1;8438:2:58;8423:18;;8410:32;8465:18;8454:30;;8451:50;;;8497:1;8494;8487:12;8451:50;8536:58;8586:7;8577:6;8566:9;8562:22;8536:58;:::i;9768:829::-;9879:6;9887;9895;9903;9911;9919;9927;9980:3;9968:9;9959:7;9955:23;9951:33;9948:53;;;9997:1;9994;9987:12;9948:53;10036:9;10023:23;10055:31;10080:5;10055:31;:::i;:::-;10105:5;-1:-1:-1;10162:2:58;10147:18;;10134:32;10175:33;10134:32;10175:33;:::i;:::-;10227:7;-1:-1:-1;10281:2:58;10266:18;;10253:32;;-1:-1:-1;10332:2:58;10317:18;;10304:32;;-1:-1:-1;10388:3:58;10373:19;;10360:33;10437:4;10424:18;;10412:31;;10402:59;;10457:1;10454;10447:12;10402:59;9768:829;;;;-1:-1:-1;9768:829:58;;;;10480:7;10534:3;10519:19;;10506:33;;-1:-1:-1;10586:3:58;10571:19;;;10558:33;;9768:829;-1:-1:-1;;9768:829:58:o;10602:388::-;10670:6;10678;10731:2;10719:9;10710:7;10706:23;10702:32;10699:52;;;10747:1;10744;10737:12;10699:52;10786:9;10773:23;10805:31;10830:5;10805:31;:::i;:::-;10855:5;-1:-1:-1;10912:2:58;10897:18;;10884:32;10925:33;10884:32;10925:33;:::i;10995:410::-;11066:6;11074;11127:2;11115:9;11106:7;11102:23;11098:32;11095:52;;;11143:1;11140;11133:12;11095:52;11183:9;11170:23;11216:18;11208:6;11205:30;11202:50;;;11248:1;11245;11238:12;11202:50;11287:58;11337:7;11328:6;11317:9;11313:22;11287:58;:::i;:::-;11364:8;;11261:84;;-1:-1:-1;10995:410:58;-1:-1:-1;;;;10995:410:58:o;11410:612::-;11498:6;11506;11514;11522;11575:2;11563:9;11554:7;11550:23;11546:32;11543:52;;;11591:1;11588;11581:12;11543:52;11630:9;11617:23;11649:31;11674:5;11649:31;:::i;:::-;11699:5;-1:-1:-1;11751:2:58;11736:18;;11723:32;;-1:-1:-1;11806:2:58;11791:18;;11778:32;11833:18;11822:30;;11819:50;;;11865:1;11862;11855:12;11819:50;11904:58;11954:7;11945:6;11934:9;11930:22;11904:58;:::i;13171:184::-;13223:77;13220:1;13213:88;13320:4;13317:1;13310:15;13344:4;13341:1;13334:15;14558:282;14625:9;;;14646:11;;;14643:191;;;14690:77;14687:1;14680:88;14791:4;14788:1;14781:15;14819:4;14816:1;14809:15;14845:184;14897:77;14894:1;14887:88;14994:4;14991:1;14984:15;15018:4;15015:1;15008:15;15034:437;15113:1;15109:12;;;;15156;;;15177:61;;15231:4;15223:6;15219:17;15209:27;;15177:61;15284:2;15276:6;15273:14;15253:18;15250:38;15247:218;;15321:77;15318:1;15311:88;15422:4;15419:1;15412:15;15450:4;15447:1;15440:15;15247:218;;15034:437;;;:::o;15602:545::-;15704:2;15699:3;15696:11;15693:448;;;15740:1;15765:5;15761:2;15754:17;15810:4;15806:2;15796:19;15880:2;15868:10;15864:19;15861:1;15857:27;15851:4;15847:38;15916:4;15904:10;15901:20;15898:47;;;-1:-1:-1;15939:4:58;15898:47;15994:2;15989:3;15985:12;15982:1;15978:20;15972:4;15968:31;15958:41;;16049:82;16067:2;16060:5;16057:13;16049:82;;;16112:17;;;16093:1;16082:13;16049:82;;16383:1471;16509:3;16503:10;16536:18;16528:6;16525:30;16522:56;;;16558:18;;:::i;:::-;16587:97;16677:6;16637:38;16669:4;16663:11;16637:38;:::i;:::-;16631:4;16587:97;:::i;:::-;16739:4;;16803:2;16792:14;;16820:1;16815:782;;;;17641:1;17658:6;17655:89;;;-1:-1:-1;17710:19:58;;;17704:26;17655:89;16289:66;16280:1;16276:11;;;16272:84;16268:89;16258:100;16364:1;16360:11;;;16255:117;17757:81;;16785:1063;;16815:782;15549:1;15542:14;;;15586:4;15573:18;;16863:66;16851:79;;;17028:236;17042:7;17039:1;17036:14;17028:236;;;17131:19;;;17125:26;17110:42;;17223:27;;;;17191:1;17179:14;;;;17058:19;;17028:236;;;17032:3;17292:6;17283:7;17280:19;17277:261;;;17353:19;;;17347:26;17454:66;17436:1;17432:14;;;17448:3;17428:24;17424:97;17420:102;17405:118;17390:134;;17277:261;-1:-1:-1;;;;;17584:1:58;17568:14;;;17564:22;17551:36;;-1:-1:-1;16383:1471:58:o;20915:616::-;21278:26;21273:3;21266:39;21248:3;21334:6;21328:13;21350:75;21418:6;21413:2;21408:3;21404:12;21397:4;21389:6;21385:17;21350:75;:::i;:::-;21489:8;21484:2;21444:16;;;;21476:11;;;21469:29;-1:-1:-1;21522:2:58;21514:11;;20915:616;-1:-1:-1;20915:616:58:o;26139:1325::-;26263:18;26258:3;26255:27;26252:53;;;26285:18;;:::i;:::-;26314:94;26404:3;26364:38;26396:4;26390:11;26364:38;:::i;:::-;26358:4;26314:94;:::i;:::-;26434:1;26459:2;26454:3;26451:11;26476:1;26471:735;;;;27250:1;27267:3;27264:93;;;-1:-1:-1;27323:19:58;;;27310:33;27264:93;16289:66;16280:1;16276:11;;;16272:84;16268:89;16258:100;16364:1;16360:11;;;16255:117;27370:78;;26444:1014;;26471:735;15549:1;15542:14;;;15586:4;15573:18;;26516:66;26507:76;;;26667:9;26689:229;26703:7;26700:1;26697:14;26689:229;;;26792:19;;;26779:33;26764:49;;26899:4;26884:20;;;;26852:1;26840:14;;;;26719:12;26689:229;;;26693:3;26946;26937:7;26934:16;26931:219;;;27066:66;27060:3;27054;27051:1;27047:11;27043:21;27039:94;27035:99;27022:9;27017:3;27013:19;27000:33;26996:139;26988:6;26981:155;26931:219;;;27193:1;27187:3;27184:1;27180:11;27176:19;27170:4;27163:33;26444:1014;;26139:1325;;;:::o;28796:277::-;28863:6;28916:2;28904:9;28895:7;28891:23;28887:32;28884:52;;;28932:1;28929;28922:12;28884:52;28964:9;28958:16;29017:5;29010:13;29003:21;28996:5;28993:32;28983:60;;29039:1;29036;29029:12;29676:512;29870:4;29899:42;29980:2;29972:6;29968:15;29957:9;29950:34;30032:2;30024:6;30020:15;30015:2;30004:9;30000:18;29993:43;;30072:6;30067:2;30056:9;30052:18;30045:34;30115:3;30110:2;30099:9;30095:18;30088:31;30136:46;30177:3;30166:9;30162:19;30154:6;30136:46;:::i;:::-;30128:54;29676:512;-1:-1:-1;;;;;;29676:512:58:o;30193:249::-;30262:6;30315:2;30303:9;30294:7;30290:23;30286:32;30283:52;;;30331:1;30328;30321:12;30283:52;30363:9;30357:16;30382:30;30406:5;30382:30;:::i;31212:287::-;31341:3;31379:6;31373:13;31395:66;31454:6;31449:3;31442:4;31434:6;31430:17;31395:66;:::i;:::-;31477:16;;;;;31212:287;-1:-1:-1;;31212:287:58:o"},"gasEstimates":{"creation":{"codeDepositCost":"3649400","executionCost":"infinite","totalCost":"infinite"},"external":{"DOMAIN_SEPARATOR()":"infinite","MINTER_ROLE()":"284","allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"infinite","batchBurnFrom(address[],uint256[])":"infinite","batchMint(address[],uint256[])":"infinite","batchTransfer(address[],uint256[])":"infinite","batchTransferFrom(address,address[],uint256[])":"infinite","burn(uint256)":"infinite","burnFrom(address,uint256)":"infinite","decimals()":"infinite","decreaseAllowance(address,uint256)":"infinite","forwarderRegistry()":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","increaseAllowance(address,uint256)":"infinite","isTrustedForwarder(address)":"infinite","mint(address,uint256)":"infinite","name()":"infinite","nonces(address)":"infinite","owner()":"infinite","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","safeTransfer(address,uint256,bytes)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setTokenURI(string)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenURI()":"infinite","totalSupply()":"infinite","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","MINTER_ROLE()":"d5391393","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","batchBurnFrom(address[],uint256[])":"1b9a7529","batchMint(address[],uint256[])":"68573107","batchTransfer(address[],uint256[])":"88d695b2","batchTransferFrom(address,address[],uint256[])":"4885b254","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","increaseAllowance(address,uint256)":"39509351","isTrustedForwarder(address)":"572b6c05","mint(address,uint256)":"40c10f19","name()":"06fdde03","nonces(address)":"7ecebe00","owner()":"8da5cb5b","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setTokenURI(string)":"e0df5b6f","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI()":"3c130d90","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.\",\"returns\":{\"_0\":\"The EIP-712 encoded hash struct of the domain-specific information for permits.\"}},\"allowance(address,address)\":{\"params\":{\"owner\":\"The account that has granted an allowance to `spender`.\",\"spender\":\"The account that was granted an allowance by `owner`.\"},\"returns\":{\"value\":\"The amount which `spender` is allowed to spend on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Emits an {Approval} event.\",\"params\":{\"spender\":\"The account being granted the allowance by the message caller.\",\"value\":\"The allowance amount to grant.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The account whose balance will be returned.\"},\"returns\":{\"balance\":\"The account balance.\"}},\"batchBurnFrom(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\",\"params\":{\"owners\":\"The list of accounts to burn the tokens from.\",\"values\":\"The list of amounts of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"batchMint(address[],uint256[])\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"recipients\":\"The list of accounts to mint the tokens to.\",\"values\":\"The list of amounts of tokens to mint to each of `recipients`.\"}},\"batchTransfer(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.\",\"params\":{\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"batchTransferFrom(address,address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to be transferred.\",\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burn(uint256)\":{\"details\":\"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.\",\"params\":{\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account to burn the tokens from.\",\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"decimals()\":{\"details\":\"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\",\"returns\":{\"_0\":\"The number of decimals used to display the balances.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being decreased.\",\"value\":\"The allowance amount decrease.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"_0\":\"whether `account` has `role`.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being increased.\",\"value\":\"The allowance amount increase.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if the sender does not have the 'minter' role.\",\"params\":{\"to\":\"The account to mint the tokens to.\",\"value\":\"The amount of tokens to mint.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token.\"}},\"nonces(address)\":{\"params\":{\"owner\":\"The account to check the nonce of.\"},\"returns\":{\"_0\":\"The current permit nonce of `owner`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.\",\"params\":{\"deadline\":\"The deadline from which the permit signature is no longer valid.\",\"owner\":\"The token owner granting the allowance to `spender`.\",\"r\":\"Permit signature r parameter.\",\"s\":\"Permit signature s parameter.\",\"spender\":\"The token spender being granted the allowance by `owner`.\",\"v\":\"Permit signature v parameter\",\"value\":\"The allowance amount to grant.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if the sender does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"setTokenURI(string)\":{\"details\":\"Reverts if the sender is not the contract owner.\",\"params\":{\"uri\":\"The token URI.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token.\"}},\"tokenURI()\":{\"returns\":{\"_0\":\"The token metadata URI.\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"The total token supply.\"}},\"transfer(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.\",\"params\":{\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when a role is granted.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when a role is revoked or renounced.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\"},\"allowance(address,address)\":{\"notice\":\"Gets the amount that an account is allowed to spend on behalf of another.\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"balanceOf(address)\":{\"notice\":\"Gets an account balance.\"},\"batchBurnFrom(address[],uint256[])\":{\"notice\":\"Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\"},\"batchMint(address[],uint256[])\":{\"notice\":\"Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\"},\"batchTransfer(address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from the sender.\"},\"batchTransferFrom(address,address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from a specified address.\"},\"burn(uint256)\":{\"notice\":\"Burns an amount of tokens from the sender, decreasing the total supply.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns an amount of tokens from a specified address, decreasing the total supply.\"},\"decimals()\":{\"notice\":\"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"mint(address,uint256)\":{\"notice\":\"Mints an amount of tokens to a recipient, increasing the total supply.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"nonces(address)\":{\"notice\":\"Gets the current permit nonce of an account.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"},\"setTokenURI(string)\":{\"notice\":\"Sets the token URI.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI()\":{\"notice\":\"Gets the token metadata URI.\"},\"totalSupply()\":{\"notice\":\"Gets the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/erc20/PRIMATEv2.sol\":\"PRIMATEv2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xad30286210b6693b212a323037dde404939d7745e4578ee1a899cce60b3aa216\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a role is granted.\\n    /// @param role the granted role.\\n    /// @param account the account granted with the role.\\n    /// @param operator the initiator of the grant.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when a role is revoked or renounced.\\n    /// @param role the revoked or renounced role.\\n    /// @param account the account losing the role.\\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if the sender does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8f619858115dc1f3d4a3214a651753a3a3ba4e53b0837a03054ae471e10410\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Bytes32 for bytes32;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    event RoleGranted(bytes32 role, address account, address operator);\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account,\\n        address operator\\n    ) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(\\n        Layout storage s,\\n        address sender,\\n        bytes32 role\\n    ) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return whether `account` has `role`.\\n    function hasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(\\n        Layout storage s,\\n        bytes32 role,\\n        address account\\n    ) internal view {\\n        if (!s.hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\\"AccessControl: missing '\\\", role.toASCIIString(), \\\"' role\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40e5d3ab6520371a3631dd21841ece33ebb1137663c1557d8b566abe50cd0710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(\\n        Layout storage s,\\n        address sender,\\n        address newOwner\\n    ) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ccf3ca5aa4650760608f607e7864af94f05c8ae1158628afe1ffd58dc09c427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(\\n        Layout storage s,\\n        bytes4 interfaceId,\\n        bool supported\\n    ) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef41456fa6531302638a347d647c875b537bbe521c1ae642603554c89f912fa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(\\n        address[] calldata accounts,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(\\n        address[] calldata accounts,\\n        IERC721[] calldata contracts,\\n        uint256[] calldata tokenIds\\n    ) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb7a7e313881a8a1e982d22f39e5d58fc13f6a73484a89af03891f62af6259cc3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20Base} from \\\"./base/ERC20Base.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20 is ERC20Base, InterfaceDetection {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    constructor() {\\n        ERC20Storage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x040f1cb6e9aac145fb794488949047f7979ab41b7fda8f4ee5b97a8f5d5d9731\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20BatchTransfersBase} from \\\"./base/ERC20BatchTransfersBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20BatchTransfers is ERC20BatchTransfersBase {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    constructor() {\\n        ERC20Storage.initERC20BatchTransfers();\\n    }\\n}\\n\",\"keccak256\":\"0xcd02cf7b1fb8cc5f38d26981ed056320cd57db92b69313ccf151db93e6d572dd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20BurnableBase} from \\\"./base/ERC20BurnableBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Burnable is ERC20BurnableBase {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    constructor() {\\n        ERC20Storage.initERC20Burnable();\\n    }\\n}\\n\",\"keccak256\":\"0x9698a148105772a3432afb8e2f4dd552466aa217e042c8540df0024c9a1a50fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20DetailedStorage} from \\\"./libraries/ERC20DetailedStorage.sol\\\";\\nimport {ERC20DetailedBase} from \\\"./base/ERC20DetailedBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Detailed is ERC20DetailedBase {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    /// @notice Initializes the storage with the token details.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) {\\n        ERC20DetailedStorage.layout().constructorInit(tokenName, tokenSymbol, tokenDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0x4cfad4c54b5f56dace3b93ad1ac8f826546d96066acc52c4d2f89f38592026f5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20MetadataStorage} from \\\"./libraries/ERC20MetadataStorage.sol\\\";\\nimport {ERC20MetadataBase} from \\\"./base/ERC20MetadataBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Metadata is ERC20MetadataBase, ContractOwnership {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\\n    constructor() {\\n        ERC20MetadataStorage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x6dc76cad3f8d679e55ae6244d681a88d392346bc7984e888b3dd56d77b88bec3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20MintableBase} from \\\"./base/ERC20MintableBase.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Mintable is ERC20MintableBase, AccessControl {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    constructor() {\\n        ERC20Storage.initERC20Mintable();\\n    }\\n}\\n\",\"keccak256\":\"0xcc66fdcce200179aba42efdbc313fd1f3ebc7c9849909bc9ceb1b1b125cffda0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./interfaces/IERC20Permit.sol\\\";\\nimport {ERC20PermitStorage} from \\\"./libraries/ERC20PermitStorage.sol\\\";\\nimport {ERC20PermitBase} from \\\"./base/ERC20PermitBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Note: This contract requires ERC20Detailed.\\nabstract contract ERC20Permit is ERC20PermitBase {\\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\\n    constructor() {\\n        ERC20PermitStorage.init();\\n    }\\n}\\n\",\"keccak256\":\"0x365a7e6d423193e1f83d774d469a21243e28ac08ac48bc62ee529c9f53d471e5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20Storage} from \\\"./libraries/ERC20Storage.sol\\\";\\nimport {ERC20SafeTransfersBase} from \\\"./base/ERC20SafeTransfersBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20SafeTransfers is ERC20SafeTransfersBase {\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    constructor() {\\n        ERC20Storage.initERC20SafeTransfers();\\n    }\\n}\\n\",\"keccak256\":\"0x379357be54c3effcd23dec4c54f20564596071603226bd3eb339413b4bee1e72\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC20Base is Context, IERC20, IERC20Allowance {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20\\n    function approve(address spender, uint256 value) external virtual override returns (bool result) {\\n        ERC20Storage.layout().approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address to, uint256 value) external virtual override returns (bool result) {\\n        ERC20Storage.layout().transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual override returns (bool result) {\\n        ERC20Storage.layout().transferFrom(_msgSender(), from, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual override returns (bool result) {\\n        ERC20Storage.layout().increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual override returns (bool result) {\\n        ERC20Storage.layout().decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() external view override returns (uint256 supply) {\\n        return ERC20Storage.layout().totalSupply();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address owner) external view override returns (uint256 balance) {\\n        return ERC20Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual override returns (uint256 value) {\\n        return ERC20Storage.layout().allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0xc31905cde6fc13c3f294bfef5215349ee71b231f4f89a35d1b5ce4924a7aefdc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BatchTransfersBase is Context, IERC20BatchTransfers {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchTransfer(_msgSender(), recipients, values);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchTransferFrom(_msgSender(), from, recipients, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b64b7f17accdc7aa7ee690afb5174e8535b78cb08efaf817cdbcd9615bce1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BurnableBase is Context, IERC20Burnable {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burn(uint256 value) external virtual override returns (bool) {\\n        ERC20Storage.layout().burn(_msgSender(), value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burnFrom(address from, uint256 value) external virtual override returns (bool) {\\n        ERC20Storage.layout().burnFrom(_msgSender(), from, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external virtual override returns (bool) {\\n        ERC20Storage.layout().batchBurnFrom(_msgSender(), owners, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xa37701705ac19757b61e470c1349d2ef3a8f3bbf2d8d227878d8b52004066e5d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./../libraries/ERC20DetailedStorage.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20DetailedBase is IERC20Detailed {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    /// @inheritdoc IERC20Detailed\\n    function name() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().name();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function symbol() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().symbol();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function decimals() external view override returns (uint8) {\\n        return ERC20DetailedStorage.layout().decimals();\\n    }\\n}\\n\",\"keccak256\":\"0x6c6660e3a72dc1142df26fa586b6dde752cf96fd5320b4a8cd2bcb1028cd10b6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ERC20MetadataStorage} from \\\"./../libraries/ERC20MetadataStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract ERC20MetadataBase is Context, IERC20Metadata {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Sets the token URI.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @param uri The token URI.\\n    function setTokenURI(string calldata uri) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        ERC20MetadataStorage.layout().setTokenURI(uri);\\n    }\\n\\n    /// @inheritdoc IERC20Metadata\\n    function tokenURI() external view override returns (string memory) {\\n        return ERC20MetadataStorage.layout().tokenURI();\\n    }\\n}\\n\",\"keccak256\":\"0xafc7f7d8d6344772864187460424e36446284dd6f3e8b575635e323e988a9409\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../../access/libraries/AccessControlStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires AccessControl.\\nabstract contract ERC20MintableBase is Context, IERC20Mintable {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n\\n    /// @inheritdoc IERC20Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function mint(address to, uint256 value) external virtual override {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC20Storage.layout().mint(to, value);\\n    }\\n\\n    /// @inheritdoc IERC20Mintable\\n    /// @dev Reverts if the sender does not have the 'minter' role.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external virtual override {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\\n        ERC20Storage.layout().batchMint(recipients, values);\\n    }\\n}\\n\",\"keccak256\":\"0x2dd8173df413d58d7e900a986c5150a8805e3df828abb355f7a0ca475876fe1d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {ERC20PermitStorage} from \\\"./../libraries/ERC20PermitStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC20Detailed.\\nabstract contract ERC20PermitBase is Context, IERC20Permit {\\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\\n\\n    /// @inheritdoc IERC20Permit\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        ERC20PermitStorage.layout().permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    function nonces(address owner) external view override returns (uint256) {\\n        return ERC20PermitStorage.layout().nonces(owner);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return ERC20PermitStorage.DOMAIN_SEPARATOR();\\n    }\\n}\\n\",\"keccak256\":\"0xc6083e06bbb4465fc80948af0a0e74e9808bf204ce423856ee625cdf07bc2754\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20SafeTransfersBase is Context, IERC20SafeTransfers {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().safeTransfer(_msgSender(), to, value, data);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override returns (bool) {\\n        ERC20Storage.layout().safeTransferFrom(_msgSender(), from, to, value, data);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4a74b0f7b1ca9007cec26b6a5295027e4307a5dee2329c9f4695b41242170b48\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf9f312dbe258b50e4b0e6ead0ba30f4f2ef0b0040c73ce419c8e7a42ff6d1e1c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x943ab087f418015c8fbba0a612a12ff89f26c6b88caff78fb0db19c7f89fca28\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xac295da79a0031a413ce7090351f6e01d6bc6743f17992b1b70532f1cd70cca6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xa2302453fadf555cae4896bbe741d70a2ae52b652b3ce7c5af80738835577115\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\\ninterface IERC20Metadata {\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI() external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x6df7125e130e45af5b4dda067ef73a0dc22394616fc37a201d9f7db43caed5e5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x2259db124747c81c788c87ba72aee7596e6b41fec83fe4bf9b40b920c7677950\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit \\u2013 712-signed approvals\\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\\ninterface IERC20Permit {\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(address owner) external view returns (uint256 nonce);\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\\n}\\n\",\"keccak256\":\"0x7ffba0a81ba8e7140397a36ece601c20a684343472736f1926cf6b03d156eb92\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(\\n        address operator,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x5a76260a7d1598147be517103113eb53f53d2b60b8425fa28a3baf478e80fd55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc2c89a83fae54c35fb00da74c567edc52f5a73351514712a75a898d28d8522e9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x211d4d4a7995acc283a54ec021f574434cfdfc97ed8c39ac0a335be8b1f5afee\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20MetadataStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    struct Layout {\\n        string uri;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Metadata.storage\\\")) - 1);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the token URI.\\n    /// @param uri The token URI.\\n    function setTokenURI(Layout storage s, string calldata uri) internal {\\n        s.uri = uri;\\n    }\\n\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\\n        return s.uri;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac83c87ff6e55db9ff3353956b4613602188257c84357be9d71471332b28fab0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {ERC20Storage} from \\\"./ERC20Storage.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./ERC20DetailedStorage.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20PermitStorage {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) accountNonces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Permit.storage\\\")) - 1);\\n\\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(\\n        Layout storage st,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: permit from address(0)\\\");\\n        require(block.timestamp <= deadline, \\\"ERC20: expired permit\\\");\\n        unchecked {\\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\\n            bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n            address signer = ecrecover(hash, v, r, s);\\n            require(signer == owner, \\\"ERC20: invalid permit\\\");\\n        }\\n        ERC20Storage.layout().approve(owner, spender, value);\\n    }\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\\n        return s.accountNonces[owner];\\n    }\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\\n                    keccak256(\\\"1\\\"),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85e578a3e3fd1bcd2749f41c9562bb0fb930644033b39a3757319ab4a264a354\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = allowance_ + value;\\n                require(newAllowance > allowance_, \\\"ERC20: allowance overflow\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(\\n        Layout storage s,\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(spender != address(0), \\\"ERC20: approval to address(0)\\\");\\n        uint256 allowance_ = s.allowances[owner][spender];\\n\\n        if (allowance_ != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = allowance_ - value;\\n                require(newAllowance < allowance_, \\\"ERC20: insufficient allowance\\\");\\n                s.allowances[owner][spender] = newAllowance;\\n                allowance_ = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, allowance_);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(\\n        Layout storage s,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address[] calldata recipients,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: transfer to address(0)\\\");\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        require(value <= balance, \\\"ERC20: insufficient balance\\\");\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\"); // balance must be sufficient, including self-transfers\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(\\n        Layout storage s,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(\\n        Layout storage s,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(\\n        Layout storage s,\\n        address[] memory recipients,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 length = recipients.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                require(to != address(0), \\\"ERC20: mint to address(0)\\\");\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    require(newTotalValue > totalValue, \\\"ERC20: values overflow\\\");\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                require(newSupply > supply, \\\"ERC20: supply overflow\\\");\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(\\n        Layout storage s,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(\\n        Layout storage s,\\n        address sender,\\n        address[] calldata owners,\\n        uint256[] calldata values\\n    ) internal {\\n        uint256 length = owners.length;\\n        require(length == values.length, \\\"ERC20: inconsistent arrays\\\");\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    require(newBalance < balance, \\\"ERC20: insufficient balance\\\");\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(\\n        Layout storage s,\\n        address owner,\\n        address spender\\n    ) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \\\"ERC20: safe transfer rejected\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf2777d69630ff76f8fbfac4f1edfceb8c5fc8548cfa39a623947d989678f7d55\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x715b3aa1e8452ad6320e6aeb1cb0dbc1dfc93f906c258f05431b6c572ba21348\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/token/erc20/PRIMATEv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC20} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Detailed} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport {ERC20Metadata} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Metadata.sol\\\";\\nimport {ERC20Permit} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Permit.sol\\\";\\nimport {ERC20SafeTransfers} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20SafeTransfers.sol\\\";\\nimport {ERC20BatchTransfers} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20BatchTransfers.sol\\\";\\nimport {ERC20Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Mintable.sol\\\";\\nimport {ERC20Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\ncontract PRIMATEv2 is\\n    ERC20,\\n    ERC20Detailed,\\n    ERC20Metadata,\\n    ERC20Mintable,\\n    ERC20Burnable,\\n    ERC20SafeTransfers,\\n    ERC20BatchTransfers,\\n    ERC20Permit,\\n    ForwarderRegistryContext,\\n    TokenRecovery\\n{\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals,\\n        IForwarderRegistry forwarderRegistry\\n    )\\n        ERC20()\\n        ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\\n        ERC20Metadata()\\n        ForwarderRegistryContext(forwarderRegistry)\\n        ContractOwnership(msg.sender)\\n    {}\\n\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x3514d865cce56f7515766e98020d938841bf2ec7eb00ac921e238dc8bc1f25ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when an approval is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when a role is granted."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when a role is revoked or renounced."},"Transfer(address,address,uint256)":{"notice":"Emitted when tokens are transferred, including zero value transfers."}},"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"Returns the EIP-712 encoded hash struct of the domain-specific information for permits."},"allowance(address,address)":{"notice":"Gets the amount that an account is allowed to spend on behalf of another."},"approve(address,uint256)":{"notice":"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"balanceOf(address)":{"notice":"Gets an account balance."},"batchBurnFrom(address[],uint256[])":{"notice":"Burns multiple amounts of tokens from multiple owners, decreasing the total supply."},"batchMint(address[],uint256[])":{"notice":"Mints multiple amounts of tokens to multiple recipients, increasing the total supply."},"batchTransfer(address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from the sender."},"batchTransferFrom(address,address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from a specified address."},"burn(uint256)":{"notice":"Burns an amount of tokens from the sender, decreasing the total supply."},"burnFrom(address,uint256)":{"notice":"Burns an amount of tokens from a specified address, decreasing the total supply."},"decimals()":{"notice":"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei."},"decreaseAllowance(address,uint256)":{"notice":"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"increaseAllowance(address,uint256)":{"notice":"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"mint(address,uint256)":{"notice":"Mints an amount of tokens to a recipient, increasing the total supply."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"nonces(address)":{"notice":"Gets the current permit nonce of an account."},"owner()":{"notice":"Gets the address of the contract owner."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114"},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."},"setTokenURI(string)":{"notice":"Sets the token URI."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI()":{"notice":"Gets the token metadata URI."},"totalSupply()":{"notice":"Gets the total token supply."},"transfer(address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from the sender."},"transferFrom(address,address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from a specified address."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}